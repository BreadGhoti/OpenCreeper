// Generated by dart2js, the Dart to JavaScript compiler.
// The code supports the following hooks:
// dartPrint(message)   - if this function is defined it is called
//                        instead of the Dart [print] method.
// dartMainRunner(main) - if this function is defined, the Dart [main]
//                        method will not be invoked directly.
//                        Instead, a closure that will invoke [main] is
//                        passed to [dartMainRunner].
function Isolate() {}
init();

var $ = Isolate.$isolateProperties;
var $$ = {};

// Native classes
$$._HTMLElement = {"": "Element;"};

$$.AnchorElement = {"": "Element;target=",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.AnimationEvent = {"": "Event;"};

$$.AreaElement = {"": "Element;target="};

$$.Attr = {"": "Node;"};

$$.AudioElement = {"": "MediaElement;"};

$$.AutocompleteErrorEvent = {"": "Event;"};

$$.BRElement = {"": "Element;"};

$$.BaseElement = {"": "Element;target="};

$$.BeforeLoadEvent = {"": "Event;"};

$$.BodyElement = {"": "Element;",
  get$onLoad: function(receiver) {
    return $.EventStreamProvider_load.forTarget$1(receiver);
  }
};

$$.ButtonElement = {"": "Element;value="};

$$.CDataSection = {"": "Text;"};

$$.CanvasElement = {"": "Element;height%,width%",
  getContext$2: function(receiver, contextId, attrs) {
    var t1 = $ === attrs;
    if (t1)
      attrs = null;
    if (!t1)
      return receiver.getContext(contextId, $.convertDartToNative_Dictionary(attrs));
    return receiver.getContext(contextId);
  },
  getContext$1: function($receiver, contextId) {
    return this.getContext$2($receiver, contextId, $);
  }
};

$$.CanvasGradient = {"": "Interceptor;"};

$$.CanvasPattern = {"": "Interceptor;"};

$$.CanvasRenderingContext = {"": "Interceptor;"};

$$.CanvasRenderingContext2D = {"": "CanvasRenderingContext;fillStyle},font},globalAlpha},globalCompositeOperation},lineWidth},strokeStyle},textAlign}",
  beginPath$0: function(receiver) {
    return receiver.beginPath();
  },
  clearRect$4: function(receiver, x, y, width, height) {
    return receiver.clearRect(x, y, width, height);
  },
  closePath$0: function(receiver) {
    return receiver.closePath();
  },
  createPattern$2: function(receiver, canvas_OR_image, repetitionType) {
    return receiver.createPattern(canvas_OR_image, repetitionType);
  },
  fillRect$4: function(receiver, x, y, width, height) {
    return receiver.fillRect(x, y, width, height);
  },
  fillText$4: function(receiver, text, x, y, maxWidth) {
    return receiver.fillText(text, x, y, maxWidth);
  },
  fillText$3: function($receiver, text, x, y) {
    return $receiver.fillText(text, x, y);
  },
  lineTo$2: function(receiver, x, y) {
    return receiver.lineTo(x, y);
  },
  moveTo$2: function(receiver, x, y) {
    return receiver.moveTo(x, y);
  },
  restore$0: function(receiver) {
    return receiver.restore();
  },
  rotate$1: function(receiver, angle) {
    return receiver.rotate(angle);
  },
  save$0: function(receiver) {
    return receiver.save();
  },
  stroke$0: function(receiver) {
    return receiver.stroke();
  },
  strokeRect$5: function(receiver, x, y, width, height, lineWidth) {
    return receiver.strokeRect(x, y, width, height, lineWidth);
  },
  strokeRect$4: function($receiver, x, y, width, height) {
    return $receiver.strokeRect(x, y, width, height);
  },
  translate$2: function(receiver, tx, ty) {
    return receiver.translate(tx, ty);
  },
  arc$6: function(receiver, x, y, radius, startAngle, endAngle, anticlockwise) {
    receiver.arc(x, y, radius, startAngle, endAngle, anticlockwise);
  },
  drawImage$3: function(receiver, source, destX, destY) {
    return receiver.drawImage(source, destX, destY);
  },
  drawImageScaled$5: function(receiver, source, destX, destY, destWidth, destHeight) {
    return receiver.drawImage(source, destX, destY, destWidth, destHeight);
  },
  drawImageScaledFromSource$9: function(receiver, source, sourceX, sourceY, sourceWidth, sourceHeight, destX, destY, destWidth, destHeight) {
    return receiver.drawImage(source, sourceX, sourceY, sourceWidth, sourceHeight, destX, destY, destWidth, destHeight);
  }
};

$$.CharacterData = {"": "Node;length="};

$$.CloseEvent = {"": "Event;"};

$$.Comment = {"": "CharacterData;"};

$$.CompositionEvent = {"": "UIEvent;"};

$$.ContentElement = {"": "Element;"};

$$.CssFontFaceLoadEvent = {"": "Event;"};

$$.CssStyleDeclaration = {"": "Interceptor;length=",
  setProperty$3: function(receiver, propertyName, value, priority) {
    var exception;
    try {
      if (priority == null)
        priority = "";
      receiver.setProperty(propertyName, value, priority);
      if (!!receiver.setAttribute)
        receiver.setAttribute(propertyName, value);
    } catch (exception) {
      $.unwrapException(exception);
    }

  },
  get$bottom: function(receiver) {
    var propValue = receiver.getPropertyValue("bottom");
    return propValue != null ? propValue : "";
  },
  set$bottom: function(receiver, value) {
    this.setProperty$3(receiver, "bottom", value, "");
  },
  get$clear: function(receiver) {
    var propValue = receiver.getPropertyValue("clear");
    return propValue != null ? propValue : "";
  },
  clear$0: function($receiver) {
    return this.get$clear($receiver).call$0();
  },
  get$height: function(receiver) {
    var propValue = receiver.getPropertyValue("height");
    return propValue != null ? propValue : "";
  },
  set$height: function(receiver, value) {
    this.setProperty$3(receiver, "height", value, "");
  },
  get$left: function(receiver) {
    var propValue = receiver.getPropertyValue("left");
    return propValue != null ? propValue : "";
  },
  set$left: function(receiver, value) {
    this.setProperty$3(receiver, "left", value, "");
  },
  get$position: function(receiver) {
    var propValue = receiver.getPropertyValue("position");
    return propValue != null ? propValue : "";
  },
  get$right: function(receiver) {
    var propValue = receiver.getPropertyValue("right");
    return propValue != null ? propValue : "";
  },
  set$right: function(receiver, value) {
    this.setProperty$3(receiver, "right", value, "");
  },
  get$size: function(receiver) {
    var propValue = receiver.getPropertyValue("size");
    return propValue != null ? propValue : "";
  },
  get$top: function(receiver) {
    var propValue = receiver.getPropertyValue("top");
    return propValue != null ? propValue : "";
  },
  set$top: function(receiver, value) {
    this.setProperty$3(receiver, "top", value, "");
  },
  get$width: function(receiver) {
    var propValue = receiver.getPropertyValue("width");
    return propValue != null ? propValue : "";
  },
  set$width: function(receiver, value) {
    this.setProperty$3(receiver, "width", value, "");
  }
};

$$.CustomElementConstructor = {"": "Interceptor;"};

$$.CustomEvent = {"": "Event;"};

$$.DListElement = {"": "Element;"};

$$.DataListElement = {"": "Element;"};

$$.DetailsElement = {"": "Element;"};

$$.DeviceMotionEvent = {"": "Event;"};

$$.DeviceOrientationEvent = {"": "Event;"};

$$.DialogElement = {"": "Element;"};

$$.DivElement = {"": "Element;"};

$$.Document = {"": "Node;",
  register$2: function(receiver, $name, options) {
    var t1 = $ === options;
    if (t1)
      options = null;
    if (!t1)
      return receiver.webkitRegister($name, $.convertDartToNative_Dictionary(options));
    return receiver.webkitRegister($name);
  },
  get$onKeyDown: function(receiver) {
    return $.EventStreamProvider_keydown.forTarget$1(receiver);
  },
  get$onKeyUp: function(receiver) {
    return $.EventStreamProvider_keyup.forTarget$1(receiver);
  },
  get$onLoad: function(receiver) {
    return $.EventStreamProvider_load.forTarget$1(receiver);
  }
};

$$.DocumentFragment = {"": "Node;",
  get$children: function(receiver) {
    if (receiver._children == null)
      receiver._children = new $.FilteredElementList(receiver, new $._ChildNodeListLazy(receiver));
    return receiver._children;
  },
  set$innerHtml: function(receiver, value) {
    var e, t1, t2;
    new $._ChildNodeListLazy(receiver)._this.textContent = "";
    e = document.createElement("div");
    t1 = $.getInterceptor$x(e);
    t1.set$innerHtml(e, value);
    t2 = new $._ChildNodeListLazy(receiver);
    t2.addAll$1(t2, $.List_List$from(t1.get$nodes(e), false));
  }
};

$$.DocumentType = {"": "Node;"};

$$.DomError = {"": "Interceptor;"};

$$.DomException = {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.Element = {"": "Node;$$dom_children:children=,id=,innerHtml:innerHTML}",
  get$children: function(receiver) {
    return new $._ChildrenElementList(receiver, this.get$$$dom_children(receiver));
  },
  get$client: function(receiver) {
    return new $.Rect(receiver.clientLeft, receiver.clientTop, receiver.clientWidth, receiver.clientHeight);
  },
  translate$2: function($receiver, arg0, arg1) {
    return this.translate.call$2(arg0, arg1);
  },
  get$onLoad: function(receiver) {
    return $.EventStreamProvider_load.forTarget$1(receiver);
  },
  get$onMouseDown: function(receiver) {
    return $.EventStreamProvider_mousedown.forTarget$1(receiver);
  },
  get$onMouseUp: function(receiver) {
    return $.EventStreamProvider_mouseup.forTarget$1(receiver);
  },
  $isElement: true,
  $asElement: null
};

$$.EmbedElement = {"": "Element;height%,src},width%"};

$$.ErrorEvent = {"": "Event;"};

$$.Event = {"": "Interceptor;",
  get$currentTarget: function(receiver) {
    return $._convertNativeToDart_EventTarget(receiver.currentTarget);
  },
  get$target: function(receiver) {
    return $._convertNativeToDart_EventTarget(receiver.target);
  },
  preventDefault$0: function(receiver) {
    return receiver.preventDefault();
  }
};

$$.EventException = {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.EventTarget = {"": "Interceptor;", $isEventTarget: true, $asEventTarget: null};

$$.FieldSetElement = {"": "Element;"};

$$.FileError = {"": "Interceptor;"};

$$.FileException = {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.FocusEvent = {"": "UIEvent;"};

$$.FormElement = {"": "Element;length=,target="};

$$.HRElement = {"": "Element;"};

$$.HashChangeEvent = {"": "Event;"};

$$.HeadElement = {"": "Element;"};

$$.HeadingElement = {"": "Element;"};

$$.HtmlCollection = {"": "Interceptor_ListMixin_ImmutableListMixin;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException(new $.RangeError("value " + $.S(index) + " not in range 0.." + t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException(new $.UnsupportedError("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException(new $.UnsupportedError("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  $isList: true,
  $asList: function() { return [$.Node]; },
  $isIterable: true,
  $asIterable: function() { return [$.Node]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.HtmlDocument = {"": "Document;"};

$$.HtmlElement = {"": "Element;"};

$$.HtmlFormControlsCollection = {"": "HtmlCollection;"};

$$.HtmlOptionsCollection = {"": "HtmlCollection;"};

$$.HttpRequestProgressEvent = {"": "ProgressEvent;position="};

$$.IFrameElement = {"": "Element;height%,src},width%"};

$$.ImageElement = {"": "Element;height%,src},width%,x=,y="};

$$.InputElement = {"": "Element;height%,size=,src},value=,width%", $isElement: true, $asElement: null, $isNode: true, $asNode: null, $isEventTarget: true, $asEventTarget: null};

$$.KeyboardEvent = {"": "UIEvent;",
  get$keyCode: function(receiver) {
    return receiver.keyCode;
  }
};

$$.KeygenElement = {"": "Element;"};

$$.LIElement = {"": "Element;value="};

$$.LabelElement = {"": "Element;",
  control$1: function($receiver, arg0) {
    return this.control.call$1(arg0);
  }
};

$$.LegendElement = {"": "Element;"};

$$.LinkElement = {"": "Element;"};

$$.MapElement = {"": "Element;"};

$$.MediaController = {"": "EventTarget;currentTime=,volume}",
  play$0: function(receiver) {
    return receiver.play();
  }
};

$$.MediaElement = {"": "Element;currentTime=,ended=,loop},src},volume}",
  play$0: function(receiver) {
    return receiver.play();
  }
};

$$.MediaError = {"": "Interceptor;"};

$$.MediaKeyError = {"": "Interceptor;"};

$$.MediaKeyEvent = {"": "Event;"};

$$.MediaStreamEvent = {"": "Event;"};

$$.MediaStreamTrackEvent = {"": "Event;"};

$$.MenuElement = {"": "Element;"};

$$.MessageEvent = {"": "Event;"};

$$.MetaElement = {"": "Element;"};

$$.MeterElement = {"": "Element;value="};

$$.MidiConnectionEvent = {"": "Event;"};

$$.MidiMessageEvent = {"": "Event;"};

$$.ModElement = {"": "Element;"};

$$.MouseEvent = {"": "UIEvent;",
  get$client: function(receiver) {
    return new $.Point(receiver.clientX, receiver.clientY);
  }
};

$$.MutationEvent = {"": "Event;"};

$$.Navigator = {"": "Interceptor;"};

$$.NavigatorUserMediaError = {"": "Interceptor;"};

$$.Node = {"": "EventTarget;",
  get$nodes: function(receiver) {
    return new $._ChildNodeListLazy(receiver);
  },
  remove$0: function(receiver) {
    var t1 = receiver.parentNode;
    if (t1 != null)
      t1.removeChild(receiver);
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i0(this, "remove$0", receiver);
  },
  replaceWith$1: function(receiver, otherNode) {
    var $parent, exception;
    try {
      $parent = receiver.parentNode;
      $.$$dom_replaceChild$2$x($parent, otherNode, receiver);
    } catch (exception) {
      $.unwrapException(exception);
    }

    return receiver;
  },
  toString$0: function(receiver) {
    var t1 = receiver.localName;
    if (t1 == null) {
      t1 = receiver.nodeValue;
      if (t1 == null)
        t1 = $.Interceptor.prototype.toString$0.call(this, receiver);
    }
    return t1;
  },
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $$dom_replaceChild$2: function(receiver, newChild, oldChild) {
    return receiver.replaceChild(newChild, oldChild);
  },
  $isNode: true,
  $asNode: null
};

$$.NodeList = {"": "Interceptor_ListMixin_ImmutableListMixin0;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException(new $.RangeError("value " + $.S(index) + " not in range 0.." + t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException(new $.UnsupportedError("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException(new $.UnsupportedError("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  $isList: true,
  $asList: function() { return [$.Node]; },
  $isIterable: true,
  $asIterable: function() { return [$.Node]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.Notation = {"": "Node;"};

$$.OListElement = {"": "Element;"};

$$.ObjectElement = {"": "Element;height%,width%"};

$$.OptGroupElement = {"": "Element;"};

$$.OptionElement = {"": "Element;index=,selected%,value="};

$$.OutputElement = {"": "Element;value="};

$$.OverflowEvent = {"": "Event;"};

$$.PageTransitionEvent = {"": "Event;"};

$$.ParagraphElement = {"": "Element;"};

$$.ParamElement = {"": "Element;value="};

$$.PopStateEvent = {"": "Event;"};

$$.PositionError = {"": "Interceptor;"};

$$.PreElement = {"": "Element;"};

$$.ProcessingInstruction = {"": "Node;target="};

$$.ProgressElement = {"": "Element;position=,value="};

$$.ProgressEvent = {"": "Event;"};

$$.QuoteElement = {"": "Element;"};

$$.RtcDataChannelEvent = {"": "Event;"};

$$.RtcDtmfToneChangeEvent = {"": "Event;"};

$$.RtcIceCandidateEvent = {"": "Event;"};

$$.ScriptElement = {"": "Element;src}"};

$$.SecurityPolicyViolationEvent = {"": "Event;"};

$$.SelectElement = {"": "Element;length=,size=,value="};

$$.ShadowElement = {"": "Element;"};

$$.ShadowRoot = {"": "DocumentFragment;innerHtml:innerHTML}"};

$$.SourceElement = {"": "Element;src}"};

$$.SpanElement = {"": "Element;"};

$$.SpeechInputEvent = {"": "Event;"};

$$.SpeechRecognitionError = {"": "Event;"};

$$.SpeechRecognitionEvent = {"": "Event;"};

$$.SpeechSynthesisEvent = {"": "Event;"};

$$.StorageEvent = {"": "Event;key="};

$$.StyleElement = {"": "Element;"};

$$.TableCaptionElement = {"": "Element;"};

$$.TableCellElement = {"": "Element;"};

$$.TableColElement = {"": "Element;"};

$$.TableElement = {"": "Element;"};

$$.TableRowElement = {"": "Element;"};

$$.TableSectionElement = {"": "Element;"};

$$.TemplateElement = {"": "Element;"};

$$.Text = {"": "CharacterData;"};

$$.TextAreaElement = {"": "Element;value="};

$$.TextEvent = {"": "UIEvent;"};

$$.TextTrack = {"": "EventTarget;"};

$$.TextTrackList = {"": "EventTarget_ListMixin_ImmutableListMixin;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException(new $.RangeError("value " + $.S(index) + " not in range 0.." + t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException(new $.UnsupportedError("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException(new $.UnsupportedError("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  $isList: true,
  $asList: function() { return [$.TextTrack]; },
  $isIterable: true,
  $asIterable: function() { return [$.TextTrack]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.TimeRanges = {"": "Interceptor;length="};

$$.TitleElement = {"": "Element;"};

$$.TouchEvent = {"": "UIEvent;"};

$$.TrackElement = {"": "Element;src}"};

$$.TrackEvent = {"": "Event;"};

$$.TransitionEvent = {"": "Event;"};

$$.UIEvent = {"": "Event;which="};

$$.UListElement = {"": "Element;"};

$$.UnknownElement = {"": "Element;"};

$$.VideoElement = {"": "MediaElement;height%,width%"};

$$.WheelEvent = {"": "MouseEvent;",
  get$deltaY: function(receiver) {
    var detail;
    if (receiver.deltaY !== undefined)
      return receiver.deltaY;
    else if (receiver.wheelDelta !== undefined)
      return -receiver.wheelDelta;
    else if (receiver.detail !== undefined) {
      if (receiver.axis == MouseScrollEvent.VERTICAL_AXIS) {
        detail = receiver.detail;
        if (Math.abs(detail) < 100)
          return -detail * 40;
        return -detail;
      }
      return 0;
    }
    throw $.wrapException(new $.UnsupportedError("deltaY is not supported"));
  }
};

$$.Window = {"": "EventTarget;status%",
  _requestAnimationFrame$1: function(receiver, callback) {
    return receiver.requestAnimationFrame($.convertDartClosureToJS(callback, 1));
  },
  _ensureRequestAnimationFrame$0: function(receiver) {
    if (!!(receiver.requestAnimationFrame && receiver.cancelAnimationFrame))
      return;
      (function($this) {
   var vendors = ['ms', 'moz', 'webkit', 'o'];
   for (var i = 0; i < vendors.length && !$this.requestAnimationFrame; ++i) {
     $this.requestAnimationFrame = $this[vendors[i] + 'RequestAnimationFrame'];
     $this.cancelAnimationFrame =
         $this[vendors[i]+'CancelAnimationFrame'] ||
         $this[vendors[i]+'CancelRequestAnimationFrame'];
   }
   if ($this.requestAnimationFrame && $this.cancelAnimationFrame) return;
   $this.requestAnimationFrame = function(callback) {
      return window.setTimeout(function() {
        callback(Date.now());
      }, 16 /* 16ms ~= 60fps */);
   };
   $this.cancelAnimationFrame = function(id) { clearTimeout(id); }
  })(receiver);
  },
  get$top: function(receiver) {
    return $._convertNativeToDart_Window(receiver.top);
  },
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  toString$0: function(receiver) {
    return receiver.toString();
  },
  get$onLoad: function(receiver) {
    return $.EventStreamProvider_load.forTarget$1(receiver);
  },
  get$onResize: function(receiver) {
    return $.EventStreamProvider_resize.forTarget$1(receiver);
  }
};

$$.XPathException = {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$._ClientRect = {"": "Interceptor;bottom=,height=,left=,right=,top=,width=",
  toString$0: function(receiver) {
    return "(" + $.S(receiver.left) + ", " + $.S(receiver.top) + ", " + $.S(receiver.width) + ", " + $.S(receiver.height) + ")";
  },
  $eq: function(receiver, other) {
    var t1, t2, t3;
    if (other == null)
      return false;
    if (typeof other !== "object" || other === null || !$.getInterceptor(other).$isRect)
      return false;
    t1 = receiver.left;
    t2 = $.getInterceptor$x(other);
    t3 = t2.get$left(other);
    if (t1 == null ? t3 == null : t1 === t3) {
      t1 = receiver.top;
      t3 = t2.get$top(other);
      if (t1 == null ? t3 == null : t1 === t3) {
        t1 = receiver.width;
        t3 = t2.get$width(other);
        if (t1 == null ? t3 == null : t1 === t3) {
          t1 = receiver.height;
          t2 = t2.get$height(other);
          t2 = t1 == null ? t2 == null : t1 === t2;
          t1 = t2;
        } else
          t1 = false;
      } else
        t1 = false;
    } else
      t1 = false;
    return t1;
  },
  ceil$0: function(receiver) {
    return new $.Rect($.ceil$0$nx(receiver.left), $.ceil$0$nx(receiver.top), $.ceil$0$nx(receiver.width), $.ceil$0$nx(receiver.height));
  },
  floor$0: function(receiver) {
    return new $.Rect($.floor$0$nx(receiver.left), $.floor$0$nx(receiver.top), $.floor$0$nx(receiver.width), $.floor$0$nx(receiver.height));
  },
  toInt$0: function(receiver) {
    return new $.Rect($.toInt$0$nx(receiver.left), $.toInt$0$nx(receiver.top), $.toInt$0$nx(receiver.width), $.toInt$0$nx(receiver.height));
  },
  $isRect: true,
  $asRect: null
};

$$._NamedNodeMap = {"": "Interceptor_ListMixin_ImmutableListMixin1;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException(new $.RangeError("value " + $.S(index) + " not in range 0.." + t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException(new $.UnsupportedError("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException(new $.UnsupportedError("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  $isList: true,
  $asList: function() { return [$.Node]; },
  $isIterable: true,
  $asIterable: function() { return [$.Node]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.VersionChangeEvent = {"": "Event;"};

$$.AElement = {"": "StyledElement;target="};

$$.AltGlyphElement = {"": "TextPositioningElement;"};

$$.AnimateElement = {"": "AnimationElement;"};

$$.AnimateMotionElement = {"": "AnimationElement;"};

$$.AnimateTransformElement = {"": "AnimationElement;"};

$$.AnimatedEnumeration = {"": "Interceptor;"};

$$.AnimatedLength = {"": "Interceptor;"};

$$.AnimatedLengthList = {"": "Interceptor;"};

$$.AnimatedNumber = {"": "Interceptor;"};

$$.AnimatedNumberList = {"": "Interceptor;"};

$$.AnimatedString = {"": "Interceptor;"};

$$.AnimationElement = {"": "SvgElement;"};

$$.CircleElement = {"": "StyledElement;"};

$$.ClipPathElement = {"": "StyledElement;"};

$$.DefsElement = {"": "StyledElement;"};

$$.DescElement = {"": "StyledElement;"};

$$.EllipseElement = {"": "StyledElement;"};

$$.FEBlendElement = {"": "StyledElement;height=,width=,x=,y="};

$$.FEColorMatrixElement = {"": "StyledElement;height=,width=,x=,y="};

$$.FEComponentTransferElement = {"": "StyledElement;height=,width=,x=,y="};

$$.FECompositeElement = {"": "StyledElement;height=,width=,x=,y="};

$$.FEConvolveMatrixElement = {"": "StyledElement;height=,width=,x=,y="};

$$.FEDiffuseLightingElement = {"": "StyledElement;height=,width=,x=,y="};

$$.FEDisplacementMapElement = {"": "StyledElement;height=,width=,x=,y="};

$$.FEDistantLightElement = {"": "SvgElement;"};

$$.FEFloodElement = {"": "StyledElement;height=,width=,x=,y="};

$$.FEFuncAElement = {"": "_SVGComponentTransferFunctionElement;"};

$$.FEFuncBElement = {"": "_SVGComponentTransferFunctionElement;"};

$$.FEFuncGElement = {"": "_SVGComponentTransferFunctionElement;"};

$$.FEFuncRElement = {"": "_SVGComponentTransferFunctionElement;"};

$$.FEGaussianBlurElement = {"": "StyledElement;height=,width=,x=,y="};

$$.FEImageElement = {"": "StyledElement;height=,width=,x=,y="};

$$.FEMergeElement = {"": "StyledElement;height=,width=,x=,y="};

$$.FEMergeNodeElement = {"": "SvgElement;"};

$$.FEMorphologyElement = {"": "StyledElement;height=,width=,x=,y="};

$$.FEOffsetElement = {"": "StyledElement;height=,width=,x=,y="};

$$.FEPointLightElement = {"": "SvgElement;x=,y=,z="};

$$.FESpecularLightingElement = {"": "StyledElement;height=,width=,x=,y="};

$$.FESpotLightElement = {"": "SvgElement;x=,y=,z="};

$$.FETileElement = {"": "StyledElement;height=,width=,x=,y="};

$$.FETurbulenceElement = {"": "StyledElement;seed=,height=,width=,x=,y="};

$$.FilterElement = {"": "StyledElement;height=,width=,x=,y="};

$$.ForeignObjectElement = {"": "StyledElement;height=,width=,x=,y="};

$$.GElement = {"": "StyledElement;"};

$$.ImageElement0 = {"": "StyledElement;height=,width=,x=,y="};

$$.LineElement = {"": "StyledElement;"};

$$.LinearGradientElement = {"": "_GradientElement;"};

$$.MarkerElement = {"": "StyledElement;"};

$$.MaskElement = {"": "StyledElement;height=,width=,x=,y="};

$$.MetadataElement = {"": "SvgElement;"};

$$.PathElement = {"": "StyledElement;"};

$$.PatternElement = {"": "StyledElement;height=,width=,x=,y="};

$$.PolygonElement = {"": "StyledElement;"};

$$.PolylineElement = {"": "StyledElement;"};

$$.RadialGradientElement = {"": "_GradientElement;"};

$$.RectElement = {"": "StyledElement;height=,width=,x=,y="};

$$.ScriptElement0 = {"": "SvgElement;"};

$$.SetElement = {"": "AnimationElement;"};

$$.StopElement = {"": "StyledElement;"};

$$.StyleElement0 = {"": "SvgElement;"};

$$.StyledElement = {"": "SvgElement;"};

$$.SvgDocument = {"": "Document;"};

$$.SvgElement = {"": "Element;",
  get$children: function(receiver) {
    return new $.FilteredElementList(receiver, new $._ChildNodeListLazy(receiver));
  },
  set$innerHtml: function(receiver, svg) {
    var container, t1, children;
    container = document.createElement("div");
    t1 = $.getInterceptor$x(container);
    t1.set$innerHtml(container, "<svg version=\"1.1\">" + $.S(svg) + "</svg>");
    t1 = $.get$children$x($.$index$asx(t1.get$children(container), 0));
    children = new $.FilteredElementList(receiver, $._ChildNodeListLazy$(receiver));
    children._childNodes._this.textContent = "";
    children.addAll$1(children, t1);
  },
  get$$$dom_children: function(receiver) {
    throw $.wrapException(new $.UnsupportedError("Cannot get dom_children on SVG."));
  },
  get$id: function(receiver) {
    return receiver.id;
  }
};

$$.SvgException = {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.SvgSvgElement = {"": "StyledElement;height=,width=,x=,y="};

$$.SwitchElement = {"": "StyledElement;"};

$$.SymbolElement = {"": "StyledElement;"};

$$.TSpanElement = {"": "TextPositioningElement;"};

$$.TextContentElement = {"": "StyledElement;"};

$$.TextElement = {"": "TextPositioningElement;"};

$$.TextPathElement = {"": "TextContentElement;"};

$$.TextPositioningElement = {"": "TextContentElement;x=,y="};

$$.TitleElement0 = {"": "StyledElement;"};

$$.UseElement = {"": "StyledElement;height=,width=,x=,y="};

$$.ViewElement = {"": "SvgElement;"};

$$.ZoomEvent = {"": "UIEvent;"};

$$._GradientElement = {"": "StyledElement;"};

$$._SVGComponentTransferFunctionElement = {"": "SvgElement;"};

$$.AudioProcessingEvent = {"": "Event;"};

$$.OfflineAudioCompletionEvent = {"": "Event;"};

$$.ContextEvent = {"": "Event;"};

$$.RenderingContext = {"": "CanvasRenderingContext;"};

$$.SqlError = {"": "Interceptor;"};

$$.SqlException = {"": "Interceptor;"};

$$.TypedData = {"": "Interceptor;"};

$$.Uint8ClampedList = {"": "Uint8List;",
  $index: function(receiver, index) {
    var t1;
    if (typeof index !== "number")
      return this.$$index$bailout1(1, index, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      if (index < 0 || index >= t1)
        $.throwExpression(new $.RangeError("value " + $.S(index) + " not in range 0.." + t1));
      else
        $.throwExpression(new $.ArgumentError("Invalid list index " + $.S(index)));
    return receiver[index];
  },
  $$index$bailout1: function(state0, index, receiver) {
    var t1, t2;
    t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1)) {
      t2 = $.getInterceptor$n(index);
      if (t2.$lt(index, 0) || t2.$ge(index, t1))
        $.throwExpression(new $.RangeError("value " + $.S(index) + " not in range 0.." + t1));
      else
        $.throwExpression(new $.ArgumentError("Invalid list index " + $.S(index)));
    }
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    if (typeof index !== "number")
      return this.$$indexSet$bailout1(1, index, value, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      if (index < 0 || index >= t1)
        $.throwExpression(new $.RangeError("value " + $.S(index) + " not in range 0.." + t1));
      else
        $.throwExpression(new $.ArgumentError("Invalid list index " + $.S(index)));
    receiver[index] = value;
  },
  $$indexSet$bailout1: function(state0, index, value, receiver) {
    var t1, t2;
    t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1)) {
      t2 = $.getInterceptor$n(index);
      if (t2.$lt(index, 0) || t2.$ge(index, t1))
        $.throwExpression(new $.RangeError("value " + $.S(index) + " not in range 0.." + t1));
      else
        $.throwExpression(new $.ArgumentError("Invalid list index " + $.S(index)));
    }
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    return new $.ListIterator(receiver, receiver.length, 0, null);
  },
  forEach$1: function(receiver, f) {
    return $.IterableMixinWorkaround_forEach(receiver, f);
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.wrapException(new $.UnsupportedError("Cannot add to immutable List."));
  },
  clear$0: function(receiver) {
    throw $.wrapException(new $.UnsupportedError("Cannot clear immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException(new $.UnsupportedError("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.wrapException(new $.UnsupportedError("Cannot remove from immutable List."));
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i1(this, "remove$1", receiver);
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = receiver.length;
    return $._Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  toString$0: function(receiver) {
    var buffer = new $.StringBuffer("");
    buffer._contents = "[";
    buffer.writeAll$2(receiver, ", ");
    buffer._contents = buffer._contents + "]";
    return buffer._contents;
  },
  $isList: true,
  $asList: function() { return [$.JSInt]; },
  $isIterable: true,
  $asIterable: function() { return [$.JSInt]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.Uint8List = {"": "TypedData;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1;
    if (typeof index !== "number")
      return this.$$index$bailout(1, index, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      if (index < 0 || index >= t1)
        $.throwExpression(new $.RangeError("value " + $.S(index) + " not in range 0.." + t1));
      else
        $.throwExpression(new $.ArgumentError("Invalid list index " + $.S(index)));
    return receiver[index];
  },
  $$index$bailout: function(state0, index, receiver) {
    var t1, t2;
    t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1)) {
      t2 = $.getInterceptor$n(index);
      if (t2.$lt(index, 0) || t2.$ge(index, t1))
        $.throwExpression(new $.RangeError("value " + $.S(index) + " not in range 0.." + t1));
      else
        $.throwExpression(new $.ArgumentError("Invalid list index " + $.S(index)));
    }
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    if (typeof index !== "number")
      return this.$$indexSet$bailout(1, index, value, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      if (index < 0 || index >= t1)
        $.throwExpression(new $.RangeError("value " + $.S(index) + " not in range 0.." + t1));
      else
        $.throwExpression(new $.ArgumentError("Invalid list index " + $.S(index)));
    receiver[index] = value;
  },
  $$indexSet$bailout: function(state0, index, value, receiver) {
    var t1, t2;
    t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1)) {
      t2 = $.getInterceptor$n(index);
      if (t2.$lt(index, 0) || t2.$ge(index, t1))
        $.throwExpression(new $.RangeError("value " + $.S(index) + " not in range 0.." + t1));
      else
        $.throwExpression(new $.ArgumentError("Invalid list index " + $.S(index)));
    }
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    return new $.ListIterator(receiver, receiver.length, 0, null);
  },
  forEach$1: function(receiver, f) {
    return $.IterableMixinWorkaround_forEach(receiver, f);
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.wrapException(new $.UnsupportedError("Cannot add to immutable List."));
  },
  clear$0: function(receiver) {
    throw $.wrapException(new $.UnsupportedError("Cannot clear immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException(new $.UnsupportedError("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.wrapException(new $.UnsupportedError("Cannot remove from immutable List."));
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i1(this, "remove$1", receiver);
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = receiver.length;
    return $._Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  toString$0: function(receiver) {
    var buffer = new $.StringBuffer("");
    buffer._contents = "[";
    buffer.writeAll$2(receiver, ", ");
    buffer._contents = buffer._contents + "]";
    return buffer._contents;
  },
  $isList: true,
  $asList: function() { return [$.JSInt]; },
  $isIterable: true,
  $asIterable: function() { return [$.JSInt]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

// Bound closures
$$.BoundClosure$i1 = {"": "Closure;self,target,receiver",
  call$1: function(p0) {
    return this.self[this.target](this.receiver, p0);
  }
};

$$.BoundClosure$1 = {"": "Closure;self,target",
  call$1: function(p0) {
    return this.self[this.target](p0);
  }
};

$$.BoundClosure$0 = {"": "Closure;self,target",
  call$0: function() {
    return this.self[this.target]();
  }
};

$$.BoundClosure$i0 = {"": "Closure;self,target,receiver",
  call$0: function() {
    return this.self[this.target](this.receiver);
  }
};

$$.Closure$_processWorkerMessage = {"": "Closure;call$2,$name"};

$$.Closure$_throwFormatException = {"": "Closure;call$1,$name"};

$$.Closure$wrapException = {"": "Closure;call$1,$name"};

$$.Closure$toStringWrapper = {"": "Closure;call$0,$name"};

$$.Closure$invokeClosure = {"": "Closure;call$5,$name"};

$$.Closure$typeNameInChrome = {"": "Closure;call$1,$name"};

$$.Closure$typeNameInSafari = {"": "Closure;call$1,$name"};

$$.Closure$typeNameInOpera = {"": "Closure;call$1,$name"};

$$.Closure$typeNameInFirefox = {"": "Closure;call$1,$name"};

$$.Closure$typeNameInIE = {"": "Closure;call$1,$name"};

$$.Closure$constructorNameFallback = {"": "Closure;call$1,$name"};

$$.Closure$doneResizing = {"": "Closure;call$0,$name"};

$$.Closure$main = {"": "Closure;call$0,$name"};

$$.Closure$_asyncRunCallback = {"": "Closure;call$0,$name"};

$$.Closure$_nullDataHandler = {"": "Closure;call$1,$name"};

$$.Closure$_nullErrorHandler = {"": "Closure;call$1,$name"};

$$.Closure$_nullDoneHandler = {"": "Closure;call$0,$name"};

$$.Closure$compare = {"": "Closure;call$2,$name"};

$$.Closure$_determineMouseWheelEventType = {"": "Closure;call$1,$name"};

(function (reflectionData) {
  if (!init.libraries) init.libraries = [];
  var libraries = init.libraries;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var length = reflectionData.length;
  for (var i = 0; i < length; i++) {
    var data = reflectionData[i];
    var name = data[0];
    var descriptor = data[1];
    var classes = [];
    var functions = [];
    for (var property in descriptor) {
      if (!hasOwnProperty.call(descriptor, property)) continue;
      var element = descriptor[property];
      if (typeof element === "function") {
        $[property] = element;
        functions.push(property);
      } else {
        $$[property] = element;
        classes.push(property);
        classes.push(element[""]);
      }
    }
    var uri = ".../library" + i + ".dart";
    libraries.push([name, uri, classes, functions]);
  }
})([
["_interceptors", {
Interceptor: {"": "Object;",
  $eq: function(receiver, other) {
    return receiver === other;
  },
  get$hashCode: function(receiver) {
    return $.Primitives_objectHashCode(receiver);
  },
  toString$0: function(receiver) {
    return "Instance of '" + $.Primitives_objectTypeName(receiver) + "'";
  }
},

JSBool: {"": "bool/Interceptor;",
  toString$0: function(receiver) {
    return String(receiver);
  },
  get$hashCode: function(receiver) {
    return receiver ? 519018 : 218159;
  },
  $isbool: true
},

JSNull: {"": "Interceptor;",
  $eq: function(receiver, other) {
    return null == other;
  },
  toString$0: function(receiver) {
    return "null";
  },
  get$hashCode: function(receiver) {
    return 0;
  }
},

JSUnknown: {"": "Interceptor;",
  toString$0: function(receiver) {
    return String(receiver);
  },
  get$hashCode: function(receiver) {
    return 0;
  }
},

JSArray: {"": "List/Interceptor;",
  add$1: function(receiver, value) {
    if (!!receiver.fixed$length)
      $.throwExpression(new $.UnsupportedError("add"));
    receiver.push(value);
  },
  removeAt$1: function(receiver, index) {
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw $.wrapException(new $.ArgumentError(index));
    if (index < 0 || index >= receiver.length)
      throw $.wrapException(new $.RangeError("value " + index));
    if (!!receiver.fixed$length)
      $.throwExpression(new $.UnsupportedError("removeAt"));
    return receiver.splice(index, 1)[0];
  },
  removeLast$0: function(receiver) {
    if (!!receiver.fixed$length)
      $.throwExpression(new $.UnsupportedError("removeLast"));
    if (receiver.length === 0)
      throw $.wrapException(new $.RangeError("value -1"));
    return receiver.pop();
  },
  remove$1: function(receiver, element) {
    var i;
    if (!!receiver.fixed$length)
      $.throwExpression(new $.UnsupportedError("remove"));
    for (i = 0; i < receiver.length; ++i)
      if ($.$eq(receiver[i], element)) {
        receiver.splice(i, 1);
        return true;
      }
    return false;
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i1(this, "remove$1", receiver);
  },
  addAll$1: function(receiver, collection) {
    var t1;
    for (t1 = this.get$iterator(collection); t1.moveNext$0();)
      this.add$1(receiver, t1.get$current());
  },
  clear$0: function(receiver) {
    this.set$length(receiver, 0);
  },
  forEach$1: function(receiver, f) {
    return $.IterableMixinWorkaround_forEach(receiver, f);
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  sublist$2: function(receiver, start, end) {
    var t1;
    if (start == null)
      $.throwExpression(new $.ArgumentError(null));
    if (typeof start !== "number" || Math.floor(start) !== start)
      throw $.wrapException(new $.ArgumentError(start));
    else
      start;
    if (start < 0 || start > receiver.length) {
      t1 = receiver.length;
      throw $.wrapException(new $.RangeError("value " + start + " not in range 0.." + t1));
    }
    if (end == null)
      end = receiver.length;
    else {
      if (typeof end !== "number" || Math.floor(end) !== end)
        throw $.wrapException(new $.ArgumentError(end));
      if (end < start || end > receiver.length) {
        t1 = receiver.length;
        throw $.wrapException(new $.RangeError("value " + end + " not in range " + start + ".." + t1));
      }
    }
    if (start === end)
      return [];
    return receiver.slice(start, end);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  toString$0: function(receiver) {
    var result = new $.StringBuffer("");
    result._contents = "";
    $.ToString__emitValue(receiver, result, $.List_List($));
    return result._contents;
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$iterator: function(receiver) {
    return new $.ListIterator(receiver, receiver.length, 0, null);
  },
  get$hashCode: function(receiver) {
    return $.Primitives_objectHashCode(receiver);
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  set$length: function(receiver, newLength) {
    if (typeof newLength !== "number" || Math.floor(newLength) !== newLength)
      throw $.wrapException(new $.ArgumentError(newLength));
    if (newLength < 0)
      throw $.wrapException(new $.RangeError("value " + newLength));
    if (!!receiver.fixed$length)
      $.throwExpression(new $.UnsupportedError("set length"));
    receiver.length = newLength;
  },
  $index: function(receiver, index) {
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw $.wrapException(new $.ArgumentError(index));
    if (index >= receiver.length || index < 0)
      throw $.wrapException(new $.RangeError("value " + index));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    if (!!receiver.immutable$list)
      $.throwExpression(new $.UnsupportedError("indexed set"));
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw $.wrapException(new $.ArgumentError(index));
    if (index >= receiver.length || index < 0)
      throw $.wrapException(new $.RangeError("value " + index));
    receiver[index] = value;
  },
  $asList: null,
  $asIterable: null,
  $isList: true,
  $isIterable: true
},

JSMutableArray: {"": "JSArray;", $asList: function() { return [null]; }, $asIterable: function() { return [null]; }},

JSFixedArray: {"": "JSMutableArray;"},

JSExtendableArray: {"": "JSMutableArray;"},

JSNumber: {"": "num/Interceptor;",
  compareTo$1: function(receiver, b) {
    var t1, bIsNegative;
    if (typeof b !== "number")
      throw $.wrapException(new $.ArgumentError(b));
    else
      b;
    if (receiver < b)
      return -1;
    else if (receiver > b)
      return 1;
    else if (receiver === b) {
      t1 = receiver === 0;
      if (t1) {
        bIsNegative = this.get$isNegative(b);
        if ((t1 ? 1 / receiver < 0 : receiver < 0) === bIsNegative)
          return 0;
        if (t1 ? 1 / receiver < 0 : receiver < 0)
          return -1;
        return 1;
      }
      return 0;
    } else if (isNaN(receiver)) {
      if (this.get$isNaN(b))
        return 0;
      return 1;
    } else
      return -1;
  },
  get$isNegative: function(receiver) {
    return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
  },
  get$isNaN: function(receiver) {
    return isNaN(receiver);
  },
  abs$0: function(receiver) {
    return Math.abs(receiver);
  },
  toInt$0: function(receiver) {
    var truncated;
    if (isNaN(receiver))
      throw $.wrapException(new $.UnsupportedError("NaN"));
    if (receiver == Infinity || receiver == -Infinity)
      throw $.wrapException(new $.UnsupportedError("Infinity"));
    truncated = receiver < 0 ? Math.ceil(receiver) : Math.floor(receiver);
    return truncated == -0.0 ? 0 : truncated;
  },
  ceil$0: function(receiver) {
    var t1, truncated;
    t1 = Math.ceil(receiver);
    if (isNaN(t1))
      $.throwExpression(new $.UnsupportedError("NaN"));
    if (t1 == Infinity || t1 == -Infinity)
      $.throwExpression(new $.UnsupportedError("Infinity"));
    truncated = t1 < 0 ? Math.ceil(t1) : Math.floor(t1);
    return truncated == -0.0 ? 0 : truncated;
  },
  floor$0: function(receiver) {
    var t1, truncated;
    t1 = Math.floor(receiver);
    if (isNaN(t1))
      $.throwExpression(new $.UnsupportedError("NaN"));
    if (t1 == Infinity || t1 == -Infinity)
      $.throwExpression(new $.UnsupportedError("Infinity"));
    truncated = t1 < 0 ? Math.ceil(t1) : Math.floor(t1);
    return truncated == -0.0 ? 0 : truncated;
  },
  ceilToDouble$0: function(receiver) {
    return Math.ceil(receiver);
  },
  floorToDouble$0: function(receiver) {
    return Math.floor(receiver);
  },
  roundToDouble$0: function(receiver) {
    if (receiver < 0)
      return -Math.round(-receiver);
    else
      return Math.round(receiver);
  },
  clamp$2: function(receiver, lowerLimit, upperLimit) {
    if ($.JSInt_methods.compareTo$1(lowerLimit, upperLimit) > 0)
      throw $.wrapException(new $.ArgumentError(lowerLimit));
    if (this.compareTo$1(receiver, lowerLimit) < 0)
      return lowerLimit;
    if (this.compareTo$1(receiver, upperLimit) > 0)
      return upperLimit;
    return receiver;
  },
  toStringAsFixed$1: function(receiver, fractionDigits) {
    var result, t1;
    if (fractionDigits < 0 || fractionDigits > 20)
      throw $.wrapException(new $.RangeError(fractionDigits));
    result = receiver.toFixed(fractionDigits);
    t1 = receiver === 0;
    if (t1)
      t1 = t1 ? 1 / receiver < 0 : receiver < 0;
    else
      t1 = false;
    if (t1)
      return "-" + result;
    return result;
  },
  toString$0: function(receiver) {
    if (receiver === 0 && 1 / receiver < 0)
      return "-0.0";
    else
      return "" + receiver;
  },
  get$hashCode: function(receiver) {
    return receiver & 0x1FFFFFFF;
  },
  $negate: function(receiver) {
    return -receiver;
  },
  $add: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException(new $.ArgumentError(other));
    return receiver + other;
  },
  $sub: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException(new $.ArgumentError(other));
    return receiver - other;
  },
  $div: function(receiver, other) {
    return receiver / other;
  },
  $mul: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException(new $.ArgumentError(other));
    return receiver * other;
  },
  $mod: function(receiver, other) {
    var result = receiver % other;
    if (result === 0)
      return 0;
    if (result > 0)
      return result;
    if (other < 0)
      return result - other;
    else
      return result + other;
  },
  $tdiv: function(receiver, other) {
    var t1, truncated;
    t1 = receiver / other;
    if (isNaN(t1))
      $.throwExpression(new $.UnsupportedError("NaN"));
    if (t1 == Infinity || t1 == -Infinity)
      $.throwExpression(new $.UnsupportedError("Infinity"));
    truncated = t1 < 0 ? Math.ceil(t1) : Math.floor(t1);
    return truncated == -0.0 ? 0 : truncated;
  },
  $shl: function(receiver, other) {
    if (other < 0)
      throw $.wrapException(new $.ArgumentError(other));
    if (other > 31)
      return 0;
    return receiver << other >>> 0;
  },
  $and: function(receiver, other) {
    return (receiver & other) >>> 0;
  },
  $lt: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException(new $.ArgumentError(other));
    return receiver < other;
  },
  $gt: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException(new $.ArgumentError(other));
    return receiver > other;
  },
  $le: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException(new $.ArgumentError(other));
    return receiver <= other;
  },
  $ge: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException(new $.ArgumentError(other));
    return receiver >= other;
  },
  $isnum: true
},

JSInt: {"": "int/JSNumber;", $isint: true, $isnum: true},

JSDouble: {"": "double/JSNumber;", $isdouble: true, $isnum: true},

JSString: {"": "String/Interceptor;",
  codeUnitAt$1: function(receiver, index) {
    if (index < 0)
      throw $.wrapException(new $.RangeError("value " + index));
    if (index >= receiver.length)
      throw $.wrapException(new $.RangeError("value " + index));
    return receiver.charCodeAt(index);
  },
  $add: function(receiver, other) {
    if (typeof other !== "string")
      throw $.wrapException(new $.ArgumentError(other));
    return receiver + other;
  },
  endsWith$1: function(receiver, other) {
    var otherLength, t1;
    otherLength = other.length;
    t1 = receiver.length;
    if (otherLength > t1)
      return false;
    return other === this.substring$1(receiver, t1 - otherLength);
  },
  replaceAll$2: function(receiver, from, to) {
    return $.stringReplaceAllUnchecked(receiver, from, to);
  },
  substring$2: function(receiver, startIndex, endIndex) {
    if (endIndex == null)
      endIndex = receiver.length;
    if (typeof endIndex !== "number")
      $.throwExpression(new $.ArgumentError(endIndex));
    if (startIndex < 0)
      throw $.wrapException(new $.RangeError("value " + startIndex));
    if ($.JSInt_methods.$gt(startIndex, endIndex))
      throw $.wrapException(new $.RangeError("value " + startIndex));
    if ($.$gt$n(endIndex, receiver.length))
      throw $.wrapException(new $.RangeError("value " + $.S(endIndex)));
    return receiver.substring(startIndex, endIndex);
  },
  substring$1: function($receiver, startIndex) {
    return this.substring$2($receiver, startIndex, null);
  },
  trim$0: function(receiver) {
    var endIndex, startIndex, codeUnit, endIndex0, endIndex1;
    for (endIndex = receiver.length, startIndex = 0; startIndex < endIndex;) {
      if (startIndex >= endIndex)
        $.throwExpression(new $.RangeError("value " + startIndex));
      codeUnit = receiver.charCodeAt(startIndex);
      if (codeUnit === 32 || codeUnit === 13 || $.JSString__isWhitespace(codeUnit))
        ++startIndex;
      else
        break;
    }
    if (startIndex === endIndex)
      return "";
    for (endIndex0 = endIndex; true; endIndex0 = endIndex1) {
      endIndex1 = endIndex0 - 1;
      if (endIndex1 < 0)
        $.throwExpression(new $.RangeError("value " + endIndex1));
      if (endIndex1 >= endIndex)
        $.throwExpression(new $.RangeError("value " + endIndex1));
      codeUnit = receiver.charCodeAt(endIndex1);
      if (codeUnit === 32 || codeUnit === 13 || $.JSString__isWhitespace(codeUnit))
        ;
      else
        break;
    }
    if (startIndex === 0 && endIndex0 === endIndex)
      return receiver;
    return receiver.substring(startIndex, endIndex0);
  },
  compareTo$1: function(receiver, other) {
    var t1;
    if (typeof other !== "string")
      throw $.wrapException(new $.ArgumentError(other));
    if (receiver === other)
      t1 = 0;
    else
      t1 = receiver < other ? -1 : 1;
    return t1;
  },
  toString$0: function(receiver) {
    return receiver;
  },
  get$hashCode: function(receiver) {
    var hash, i;
    for (hash = 0, i = 0; i < receiver.length; ++i) {
      hash = 536870911 & hash + receiver.charCodeAt(i);
      hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
      hash ^= hash >> 6;
    }
    hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
    hash ^= hash >> 11;
    return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw $.wrapException(new $.ArgumentError(index));
    if (index >= receiver.length || index < 0)
      throw $.wrapException(new $.RangeError("value " + index));
    return receiver[index];
  },
  $isString: true
},

getDispatchProperty: function(object) {
  return object[$.dispatchPropertyName];
},

setDispatchProperty: function(object, value) {
  Object.defineProperty(object, $.dispatchPropertyName, {value: value, enumerable: false, writable: true, configurable: true});
},

makeDispatchRecord: function(interceptor, proto, extension) {
  return {i: interceptor, p: proto, e: extension, x: null};
},

getNativeInterceptor: function(object) {
  var record, proto, objectProto;
  record = $.getDispatchProperty(object);
  if (record != null) {
    proto = record.p;
    if (false === proto)
      return record.i;
    if (true === proto)
      return object;
    objectProto = Object.getPrototypeOf(object);
    if (proto === objectProto)
      return record.i;
    if (record.e === objectProto)
      return proto(object, record);
  }
  record = $.lookupDispatchRecord(object);
  if (record == null)
    return $.C_JSUnknown;
  $.setDispatchProperty(Object.getPrototypeOf(object), record);
  return $.getNativeInterceptor(object);
},

initializeDispatchProperty: function(setGetDispatchPropertyFn, rootProperty, jsObjectInterceptor) {
  var objectProto, i, property;
  if (typeof rootProperty !== "string")
    return $.initializeDispatchProperty$bailout(1, setGetDispatchPropertyFn, rootProperty, jsObjectInterceptor);
  objectProto = Object.prototype;
  for (i = 0; true; ++i) {
    if (i > 0)
      property = rootProperty + "_" + i;
    else
      property = rootProperty;
    if (typeof objectProto[property] === "undefined") {
      $.dispatchPropertyName = property;
      setGetDispatchPropertyFn(new Function("a", "return a." + property));
      $.setDispatchProperty(objectProto, $.makeDispatchRecord(jsObjectInterceptor, objectProto, null));
      return;
    }
  }
},

initializeDispatchProperty$bailout: function(state0, setGetDispatchPropertyFn, rootProperty, jsObjectInterceptor) {
  var objectProto, i, property;
  objectProto = Object.prototype;
  for (i = 0; true; ++i) {
    property = i > 0 ? rootProperty + "_" + i : rootProperty;
    if (typeof objectProto[property] === "undefined") {
      $.dispatchPropertyName = property;
      setGetDispatchPropertyFn(new Function("a", "return a." + property));
      $.setDispatchProperty(objectProto, $.makeDispatchRecord(jsObjectInterceptor, objectProto, null));
      return;
    }
  }
},

JSString__isWhitespace: function(codeUnit) {
  if (codeUnit < 256)
    switch (codeUnit) {
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 32:
      case 133:
      case 160:
        return true;
      default:
        return false;
    }
  switch (codeUnit) {
    case 5760:
    case 6158:
    case 8192:
    case 8193:
    case 8194:
    case 8195:
    case 8196:
    case 8197:
    case 8198:
    case 8199:
    case 8200:
    case 8201:
    case 8202:
    case 8232:
    case 8233:
    case 8239:
    case 8287:
    case 12288:
    case 65279:
      return true;
    default:
      return false;
  }
}}],
["_isolate_helper", {
CloseToken: {"": "Object;", $isCloseToken: true},

JsIsolateSink: {"": "EventSink;_isClosed,_port<",
  add$1: function(_, message) {
    this._port.send$1(message);
  },
  $eq: function(_, other) {
    if (other == null)
      return false;
    return typeof other === "object" && other !== null && !!$.getInterceptor(other).$isIsolateSink && $.$eq(this._port, other.get$_port());
  },
  get$hashCode: function(_) {
    return $.$add$ns($.get$hashCode$(this._port), 499);
  },
  $isJsIsolateSink: true,
  $asIsolateSink: null,
  $isIsolateSink: true
},

_Manager: {"": "Object;nextIsolateId,currentManagerId,nextManagerId,currentContext,rootContext,topEventLoop,fromCommandLine,isWorker,supportsWorkers,isolates,mainManager,managers,entry",
  _nativeDetectEnvironment$0: function() {
    var t1, t2;
    t1 = $.get$globalWindow() == null;
    t2 = $.get$globalWorker();
    this.isWorker = t1 && $.get$globalPostMessageDefined() === true;
    if (this.isWorker !== true)
      if (t2 != null) {
        $.get$IsolateNatives_thisScript();
        t2 = true;
      } else
        t2 = false;
    else
      t2 = true;
    this.supportsWorkers = t2;
    this.fromCommandLine = t1 && this.isWorker !== true;
  },
  _Manager$1: function(entry) {
    var $function;
    this._nativeDetectEnvironment$0();
    this.topEventLoop = new $._EventLoop($.ListQueue$(null), 0);
    this.isolates = new $.HashMap(0, null, null, null, null);
    this.managers = new $.HashMap(0, null, null, null, null);
    if (this.isWorker === true) {
      this.mainManager = $._MainManagerStub$();
      $function = function (e) { $.IsolateNatives__processWorkerMessage$closure.call$2(this.mainManager, e); };
      $.get$globalThis().onmessage = $function;
      $.get$globalThis().dartPrint = function (object) {};
    }
  }
},

_IsolateContext: {"": "Object;id>,ports,isolateStatics",
  eval$1: function(code) {
    var old, result;
    old = $globalState.currentContext;
    $globalState.currentContext = this;
    $ = this.isolateStatics;
    result = null;
    try {
      result = code.call$0();
    } finally {
      $globalState.currentContext = old;
      if (old != null)
        old._setGlobals$0();
    }
    return result;
  },
  _setGlobals$0: function() {
    $ = this.isolateStatics;
  },
  lookup$1: function(portId) {
    var t1 = this.ports;
    return t1.$index(t1, portId);
  },
  register$2: function(_, portId, port) {
    var t1;
    if (this.ports.containsKey$1(portId))
      throw $.wrapException(new $._ExceptionImplementation("Registry: ports must be registered only once."));
    t1 = this.ports;
    t1.$indexSet(t1, portId, port);
    t1 = $globalState.isolates;
    t1.$indexSet(t1, this.id, this);
  },
  unregister$1: function(portId) {
    var t1 = this.ports;
    t1.remove$1(t1, portId);
    if (this.ports._length === 0) {
      t1 = $globalState.isolates;
      t1.remove$1(t1, this.id);
    }
  },
  _IsolateContext$0: function() {
    var t1, t2;
    t1 = $globalState;
    t2 = t1.nextIsolateId;
    t1.nextIsolateId = t2 + 1;
    this.id = t2;
    this.ports = new $.HashMap(0, null, null, null, null);
    this.isolateStatics = new Isolate();
  }
},

_EventLoop: {"": "Object;events,activeTimerCount",
  dequeue$0: function() {
    var t1 = this.events;
    if (t1._head === t1._tail)
      return;
    return t1.removeFirst$0();
  },
  checkOpenReceivePortsFromCommandLine$0: function() {
    if ($globalState.rootContext != null && $globalState.isolates.containsKey$1($globalState.rootContext.id) && $globalState.fromCommandLine === true && $globalState.rootContext.ports._length === 0)
      throw $.wrapException(new $._ExceptionImplementation("Program exited with open ReceivePorts."));
  },
  runIteration$0: function() {
    var $event, t1, t2;
    $event = this.dequeue$0();
    if ($event == null) {
      this.checkOpenReceivePortsFromCommandLine$0();
      t1 = $globalState;
      if (t1.isWorker === true) {
        t2 = t1.isolates;
        t2.get$isEmpty;
        t2 = t2._length === 0 && t1.topEventLoop.activeTimerCount === 0;
      } else
        t2 = false;
      if (t2) {
        t1 = t1.mainManager;
        t2 = $._serializeMessage($.makeLiteralMap(["command", "close"]));
        t1.postMessage$1;
        self.postMessage(t2);
      }
      return false;
    }
    $event.process$0();
    return true;
  },
  _runHelper$0: function() {
    if ($.get$globalWindow() != null)
      new $._EventLoop__runHelper_next(this).call$0();
    else
      for (; this.runIteration$0();)
        ;
  },
  run$0: function() {
    var e, trace, exception, t1, t2;
    if ($globalState.isWorker !== true)
      this._runHelper$0();
    else
      try {
        this._runHelper$0();
      } catch (exception) {
        t1 = $.unwrapException(exception);
        e = t1;
        trace = $.getTraceFromException(exception);
        t1 = $globalState.mainManager;
        t2 = $._serializeMessage($.makeLiteralMap(["command", "error", "msg", $.S(e) + "\n" + $.S(trace)]));
        t1.postMessage$1;
        self.postMessage(t2);
      }

  }
},

_EventLoop__runHelper_next: {"": "Closure;this_0",
  call$0: function() {
    if (!this.this_0.runIteration$0())
      return;
    var milliseconds = $.JSNumber_methods.$tdiv($.Duration_0._duration, 1000);
    $.TimerImpl$(milliseconds < 0 ? 0 : milliseconds, this);
  }
},

_IsolateEvent: {"": "Object;isolate,fn,message",
  process$0: function() {
    this.isolate.eval$1(this.fn);
  }
},

_MainManagerStub: {"": "Object;"},

IsolateNatives__processWorkerMessage_closure: {"": "Closure;entryPoint_0,replyTo_1",
  call$0: function() {
    var t1 = $.ReceivePortImpl__nextFreeId;
    $.ReceivePortImpl__nextFreeId = $.$add$ns(t1, 1);
    t1 = new $.ReceivePortImpl(t1, null);
    $.register$2$x($._globalState().currentContext, t1._id, t1);
    $.lazyPort = t1;
    if ($.lazyPort == null)
      $.lazyPort = $.ReceivePortImpl$();
    t1 = $.lazyPort;
    t1.toSendPort$0;
    this.replyTo_1.send$2("spawned", new $._NativeJsSendPort(t1, $.get$id$x($globalState.currentContext)));
    this.entryPoint_0.call$0();
  }
},

_BaseSendPort: {"": "Object;_isolateId<",
  _checkReplyTo$1: function(replyTo) {
    if (replyTo != null && (typeof replyTo !== "object" || replyTo === null || !$.getInterceptor(replyTo).$is_NativeJsSendPort) && (typeof replyTo !== "object" || replyTo === null || !$.getInterceptor(replyTo).$is_WorkerSendPort) && true)
      throw $.wrapException(new $._ExceptionImplementation("SendPort.send: Illegal replyTo port type"));
  },
  call$1: function(message) {
    var completer, t1, port;
    completer = $._AsyncCompleter$();
    t1 = $.ReceivePortImpl__nextFreeId;
    $.ReceivePortImpl__nextFreeId = $.$add$ns(t1, 1);
    port = new $.ReceivePortImpl(t1, null);
    $.register$2$x($globalState.currentContext, port._id, port);
    this.send$2(message, new $._NativeJsSendPort(port, $.get$id$x($globalState.currentContext)));
    port._callback = new $._BaseSendPort_call_closure(completer, port);
    return completer.future;
  },
  $isSendPort: true
},

_BaseSendPort_call_closure: {"": "Closure;completer_0,port_1",
  call$2: function(value, ignoreReplyTo) {
    var t1 = this.port_1;
    t1._callback = null;
    $globalState.currentContext.unregister$1(t1._id);
    t1 = this.completer_0;
    if (typeof value === "object" && value !== null && !!$.getInterceptor(value).$isException) {
      if (t1._isComplete)
        $.throwExpression(new $.StateError("Future already completed"));
      t1._isComplete = true;
      t1._setFutureError$1(value);
    } else {
      if (t1._isComplete)
        $.throwExpression(new $.StateError("Future already completed"));
      t1._isComplete = true;
      t1._setFutureValue$1(value);
    }
  }
},

_NativeJsSendPort: {"": "_BaseSendPort;_receivePort<,_isolateId",
  send$2: function(message, replyTo) {
    $._waitForPendingPorts([message, replyTo], new $._NativeJsSendPort_send_closure(this, message, replyTo));
  },
  send$1: function(message) {
    return this.send$2(message, null);
  },
  $eq: function(_, other) {
    if (other == null)
      return false;
    return typeof other === "object" && other !== null && !!$.getInterceptor(other).$is_NativeJsSendPort && $.$eq(this._receivePort, other._receivePort);
  },
  get$hashCode: function(_) {
    return this._receivePort.get$_id();
  },
  $is_NativeJsSendPort: true,
  $isSendPort: true
},

_NativeJsSendPort_send_closure: {"": "Closure;this_1,message_2,replyTo_3",
  call$0: function() {
    var t1, t2, t3, t4, isolate, t5, shouldSerialize, msg;
    t1 = {};
    t2 = this.this_1;
    t3 = this.replyTo_3;
    t2._checkReplyTo$1(t3);
    t4 = $globalState.isolates;
    isolate = t4.$index(t4, t2.get$_isolateId());
    if (isolate == null)
      return;
    if (t2.get$_receivePort().get$_callback() == null)
      return;
    if ($globalState.currentContext != null) {
      t4 = $.get$id$x($globalState.currentContext);
      t5 = t2.get$_isolateId();
      shouldSerialize = t4 == null ? t5 != null : t4 !== t5;
    } else
      shouldSerialize = false;
    msg = this.message_2;
    t1.msg_0 = msg;
    t1.reply_1 = t3;
    if (shouldSerialize) {
      t1.msg_0 = $._serializeMessage(t1.msg_0);
      t1.reply_1 = $._serializeMessage(t1.reply_1);
    }
    t3 = $globalState.topEventLoop;
    t4 = "receive " + $.S(msg);
    t3.enqueue$3;
    t3.events._add$1(new $._IsolateEvent(isolate, new $._NativeJsSendPort_send__closure(t1, t2, shouldSerialize), t4));
  }
},

_NativeJsSendPort_send__closure: {"": "Closure;box_0,this_4,shouldSerialize_5",
  call$0: function() {
    var t1, t2;
    t1 = this.this_4;
    if (t1.get$_receivePort().get$_callback() != null) {
      if (this.shouldSerialize_5) {
        t2 = this.box_0;
        t2.msg_0 = $._deserializeMessage(t2.msg_0);
        t2.reply_1 = $._deserializeMessage(t2.reply_1);
      }
      t2 = this.box_0;
      t1.get$_receivePort()._callback$2(t2.msg_0, t2.reply_1);
    }
  }
},

_WorkerSendPort: {"": "_BaseSendPort;_workerId<,_receivePortId,_isolateId",
  send$2: function(message, replyTo) {
    $._waitForPendingPorts([message, replyTo], new $._WorkerSendPort_send_closure(this, message, replyTo));
  },
  send$1: function(message) {
    return this.send$2(message, null);
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    if (typeof other === "object" && other !== null && !!$.getInterceptor(other).$is_WorkerSendPort) {
      other;
      t1 = $.$eq(this._workerId, other._workerId) && $.$eq(this._isolateId, other._isolateId) && $.$eq(this._receivePortId, other._receivePortId);
    } else
      t1 = false;
    return t1;
  },
  get$hashCode: function(_) {
    var t1, t2, t3;
    t1 = $.$shl$n(this._workerId, 16);
    t2 = $.$shl$n(this._isolateId, 8);
    t3 = this._receivePortId;
    if (typeof t3 !== "number")
      throw $.iae(t3);
    return (t1 ^ t2 ^ t3) >>> 0;
  },
  $is_WorkerSendPort: true,
  $isSendPort: true
},

_WorkerSendPort_send_closure: {"": "Closure;this_0,message_1,replyTo_2",
  call$0: function() {
    var t1, t2, workerMessage, manager;
    t1 = this.this_0;
    t2 = this.replyTo_2;
    t1._checkReplyTo$1(t2);
    workerMessage = $._serializeMessage($.makeLiteralMap(["command", "message", "port", t1, "msg", this.message_1, "replyTo", t2]));
    if ($globalState.isWorker === true) {
      $globalState.mainManager.postMessage$1;
      self.postMessage(workerMessage);
    } else {
      t2 = $globalState.managers;
      manager = t2.$index(t2, t1.get$_workerId());
      if (manager != null)
        manager.postMessage(workerMessage);
    }
  }
},

ReceivePortImpl: {"": "Object;_id<,_callback<",
  _callback$2: function(arg0, arg1) {
    return this._callback.call$2(arg0, arg1);
  },
  ReceivePortImpl$0: function() {
    $.register$2$x($globalState.currentContext, this._id, this);
  }
},

_waitForPendingPorts_closure: {"": "Closure;callback_0",
  call$1: function(_) {
    return this.callback_0.call$0();
  }
},

_PendingSendPortFinder: {"": "_MessageTraverser;ports,_visited",
  visitPrimitive$1: function(x) {
  },
  visitList$1: function(list) {
    var t1 = this._visited;
    if (t1.$index(t1, list) != null)
      return;
    t1.$indexSet(t1, list, true);
    $.forEach$1$ax(list, new $._PendingSendPortFinder_visitList_closure(this));
  },
  visitMap$1: function(map) {
    var t1 = this._visited;
    if (t1.$index(t1, map) != null)
      return;
    t1.$indexSet(t1, map, true);
    $.forEach$1$ax(map.get$values(map), new $._PendingSendPortFinder_visitMap_closure(this));
  },
  visitSendPort$1: function(port) {
    if (false)
      this.ports.push(port.get$_futurePort());
  },
  visitIsolateSink$1: function(sink) {
    var t1 = sink._port;
    if (false)
      this.ports.push(t1.get$_futurePort());
  },
  visitCloseToken$1: function(token) {
  },
  _PendingSendPortFinder$0: function() {
    this._visited = $._JsVisitedMap$();
  }
},

_PendingSendPortFinder_visitList_closure: {"": "Closure;this_0",
  call$1: function(e) {
    return this.this_0._dispatch$1(e);
  }
},

_PendingSendPortFinder_visitMap_closure: {"": "Closure;this_0",
  call$1: function(e) {
    return this.this_0._dispatch$1(e);
  }
},

_JsSerializer: {"": "_Serializer;_nextFreeRefId,_visited",
  visitSendPort$1: function(x) {
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$is_NativeJsSendPort)
      return ["sendport", $globalState.currentManagerId, x._isolateId, x._receivePort.get$_id()];
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$is_WorkerSendPort)
      return ["sendport", x._workerId, x._isolateId, x._receivePortId];
    throw $.wrapException("Illegal underlying port " + $.S(x));
  },
  visitIsolateSink$1: function(sink) {
    var isClosed = sink._isClosed;
    return ["isolateSink", this.visitSendPort$1(sink._port), isClosed];
  },
  visitCloseToken$1: function(token) {
    return ["closeToken"];
  },
  _JsSerializer$0: function() {
    this._visited = $._JsVisitedMap$();
  }
},

_JsCopier: {"": "_Copier;_visited",
  visitSendPort$1: function(x) {
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$is_NativeJsSendPort)
      return new $._NativeJsSendPort(x._receivePort, x._isolateId);
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$is_WorkerSendPort)
      return new $._WorkerSendPort(x._workerId, x._receivePortId, x._isolateId);
    throw $.wrapException("Illegal underlying port " + $.S(this.get$p()));
  },
  visitIsolateSink$1: function(sink) {
    var result = new $.JsIsolateSink(false, this.visitSendPort$1(sink._port));
    result._isClosed = sink._isClosed;
    return result;
  },
  visitCloseToken$1: function(token) {
    return token;
  },
  _JsCopier$0: function() {
    this._visited = $._JsVisitedMap$();
  }
},

_JsDeserializer: {"": "_Deserializer;_deserialized",
  deserializeSendPort$1: function(list) {
    var t1, managerId, isolateId, receivePortId, isolate, receivePort;
    t1 = $.getInterceptor$asx(list);
    managerId = t1.$index(list, 1);
    isolateId = t1.$index(list, 2);
    receivePortId = t1.$index(list, 3);
    if ($.$eq(managerId, $globalState.currentManagerId)) {
      t1 = $globalState.isolates;
      isolate = t1.$index(t1, isolateId);
      if (isolate == null)
        return;
      receivePort = isolate.lookup$1(receivePortId);
      if (receivePort == null)
        return;
      return new $._NativeJsSendPort(receivePort, isolateId);
    } else
      return new $._WorkerSendPort(managerId, receivePortId, isolateId);
  },
  deserializeIsolateSink$1: function(list) {
    var t1, port, result;
    t1 = $.getInterceptor$asx(list);
    port = this.deserializeSendPort$1(t1.$index(list, 1));
    result = new $.JsIsolateSink(false, port);
    result._isClosed = t1.$index(list, 2);
    return result;
  },
  deserializeCloseToken$1: function(list) {
    return $.C_CloseToken;
  }
},

_JsVisitedMap: {"": "Object;tagged",
  $index: function(_, object) {
    return object.__MessageTraverser__attached_info__;
  },
  $indexSet: function(_, object, info) {
    $.add$1$ax(this.tagged, object);
    object.__MessageTraverser__attached_info__ = info;
  },
  reset$0: function(_) {
    this.tagged = $.List_List($);
  },
  cleanup$0: function() {
    var $length, i, t1;
    for ($length = this.tagged.length, i = 0; i < $length; ++i) {
      t1 = this.tagged;
      if (i >= t1.length)
        throw $.ioore(i);
      t1[i].__MessageTraverser__attached_info__ = null;
    }
    this.tagged = null;
  }
},

_MessageTraverserVisitedMap: {"": "Object;",
  $index: function(_, object) {
    return;
  },
  $indexSet: function(_, object, info) {
  },
  reset$0: function(_) {
  },
  cleanup$0: function() {
  }
},

_MessageTraverser: {"": "Object;_visited",
  traverse$1: function(x) {
    var result, t1;
    t1 = x;
    if (t1 == null || typeof t1 === "string" || typeof t1 === "number" || typeof t1 === "boolean")
      return this.visitPrimitive$1(x);
    t1 = this._visited;
    t1.reset$0(t1);
    result = null;
    try {
      result = this._dispatch$1(x);
    } finally {
      this._visited.cleanup$0();
    }
    return result;
  },
  _dispatch$1: function(x) {
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return this.visitPrimitive$1(x);
    if (typeof x === "object" && x !== null && (x.constructor === Array || !!$.getInterceptor(x).$isList))
      return this.visitList$1(x);
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$isMap)
      return this.visitMap$1(x);
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$isSendPort)
      return this.visitSendPort$1(x);
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$isJsIsolateSink)
      return this.visitIsolateSink$1(x);
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$isCloseToken)
      return this.visitCloseToken$1(x);
    $.throwExpression("Message serialization: Illegal value " + $.S(x) + " passed");
    return;
  }
},

_Copier: {"": "_MessageTraverser;_visited",
  visitPrimitive$1: function(x) {
    return x;
  },
  visitList$1: function(list) {
    var t1, copy, len, i;
    if (typeof list !== "string" && (typeof list !== "object" || list === null || list.constructor !== Array && !$.isJsIndexable(list, list[$.dispatchPropertyName])))
      return this.visitList$1$bailout1(1, list);
    t1 = this._visited;
    copy = t1.$index(t1, list);
    if (copy != null)
      return copy;
    len = list.length;
    copy = $.List_List(len);
    t1 = this._visited;
    t1.$indexSet(t1, list, copy);
    for (i = 0; i < len; ++i) {
      if (i >= list.length)
        throw $.ioore(i);
      copy[i] = this._dispatch$1(list[i]);
    }
    return copy;
  },
  visitList$1$bailout1: function(state0, list) {
    var t1, copy, len, t2, i, t3;
    t1 = this._visited;
    copy = t1.$index(t1, list);
    if (copy != null)
      return copy;
    t1 = $.getInterceptor$asx(list);
    len = t1.get$length(list);
    copy = $.List_List(len);
    t2 = this._visited;
    t2.$indexSet(t2, list, copy);
    for (t2 = copy.length, i = 0; $.JSNumber_methods.$lt(i, len); ++i) {
      t3 = this._dispatch$1(t1.$index(list, i));
      if (i >= t2)
        throw $.ioore(i);
      copy[i] = t3;
    }
    return copy;
  },
  visitMap$1: function(map) {
    var t1, t2;
    t1 = {};
    t2 = this._visited;
    t1.copy_0 = t2.$index(t2, map);
    t2 = t1.copy_0;
    if (t2 != null)
      return t2;
    t1.copy_0 = new $.HashMap(0, null, null, null, null);
    t2 = this._visited;
    t2.$indexSet(t2, map, t1.copy_0);
    map.forEach$1(map, new $._Copier_visitMap_closure(t1, this));
    return t1.copy_0;
  }
},

_Copier_visitMap_closure: {"": "Closure;box_0,this_1",
  call$2: function(key, val) {
    var t1 = this.this_1;
    $.$indexSet$ax(this.box_0.copy_0, t1._dispatch$1(key), t1._dispatch$1(val));
  }
},

_Serializer: {"": "_MessageTraverser;_nextFreeRefId,_visited",
  visitPrimitive$1: function(x) {
    return x;
  },
  visitList$1: function(list) {
    var t1, copyId, id;
    t1 = this._visited;
    copyId = t1.$index(t1, list);
    if (copyId != null)
      return ["ref", copyId];
    id = this._nextFreeRefId;
    this._nextFreeRefId = id + 1;
    t1 = this._visited;
    t1.$indexSet(t1, list, id);
    return ["list", id, this._serializeList$1(list)];
  },
  visitMap$1: function(map) {
    var t1, copyId, id;
    t1 = this._visited;
    copyId = t1.$index(t1, map);
    if (copyId != null)
      return ["ref", copyId];
    id = this._nextFreeRefId;
    this._nextFreeRefId = id + 1;
    t1 = this._visited;
    t1.$indexSet(t1, map, id);
    return ["map", id, this._serializeList$1($.toList$0$ax(map.get$keys())), this._serializeList$1($.toList$0$ax(map.get$values(map)))];
  },
  _serializeList$1: function(list) {
    var len, result, i;
    if (typeof list !== "string" && (typeof list !== "object" || list === null || list.constructor !== Array && !$.isJsIndexable(list, list[$.dispatchPropertyName])))
      return this._serializeList$1$bailout(1, list);
    len = list.length;
    result = $.List_List(len);
    for (i = 0; i < len; ++i) {
      if (i >= list.length)
        throw $.ioore(i);
      result[i] = this._dispatch$1(list[i]);
    }
    return result;
  },
  _serializeList$1$bailout: function(state0, list) {
    var t1, len, result, t2, i, t3;
    t1 = $.getInterceptor$asx(list);
    len = t1.get$length(list);
    result = $.List_List(len);
    for (t2 = result.length, i = 0; $.JSNumber_methods.$lt(i, len); ++i) {
      t3 = this._dispatch$1(t1.$index(list, i));
      if (i >= t2)
        throw $.ioore(i);
      result[i] = t3;
    }
    return result;
  }
},

_Deserializer: {"": "Object;_deserialized",
  deserialize$1: function(x) {
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return x;
    this._deserialized = new $.HashMap(0, null, null, null, null);
    return this._deserializeHelper$1(x);
  },
  _deserializeHelper$1: function(x) {
    var t1, id;
    t1 = $.getInterceptor(x);
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return x;
    switch (t1.$index(x, 0)) {
      case "ref":
        id = t1.$index(x, 1);
        t1 = this._deserialized;
        return t1.$index(t1, id);
      case "list":
        return this._deserializeList$1(x);
      case "map":
        return this._deserializeMap$1(x);
      case "sendport":
        return this.deserializeSendPort$1(x);
      case "isolateSink":
        return this.deserializeIsolateSink$1(x);
      case "closeToken":
        return this.deserializeCloseToken$1(x);
      default:
        $.throwExpression("Unexpected serialized object");
        return;
    }
  },
  _deserializeList$1: function(x) {
    var t1, id, dartList, len, i;
    t1 = $.getInterceptor$asx(x);
    id = t1.$index(x, 1);
    dartList = t1.$index(x, 2);
    if (typeof dartList !== "object" || dartList === null || (dartList.constructor !== Array || !!dartList.immutable$list) && !$.isJsIndexable(dartList, dartList[$.dispatchPropertyName]))
      return this._deserializeList$1$bailout(1, dartList, id);
    t1 = this._deserialized;
    t1.$indexSet(t1, id, dartList);
    len = dartList.length;
    for (i = 0; i < len; ++i) {
      if (i >= dartList.length)
        throw $.ioore(i);
      t1 = this._deserializeHelper$1(dartList[i]);
      if (i >= dartList.length)
        throw $.ioore(i);
      dartList[i] = t1;
    }
    return dartList;
  },
  _deserializeList$1$bailout: function(state0, dartList, id) {
    var t1, len, i;
    t1 = this._deserialized;
    t1.$indexSet(t1, id, dartList);
    t1 = $.getInterceptor$asx(dartList);
    len = t1.get$length(dartList);
    for (i = 0; $.JSNumber_methods.$lt(i, len); ++i)
      t1.$indexSet(dartList, i, this._deserializeHelper$1(t1.$index(dartList, i)));
    return dartList;
  },
  _deserializeMap$1: function(x) {
    var result, t1, id, t2, keys, values, len, i, key;
    result = new $.HashMap(0, null, null, null, null);
    t1 = $.getInterceptor$asx(x);
    id = t1.$index(x, 1);
    t2 = this._deserialized;
    t2.$indexSet(t2, id, result);
    keys = t1.$index(x, 2);
    if (typeof keys !== "string" && (typeof keys !== "object" || keys === null || keys.constructor !== Array && !$.isJsIndexable(keys, keys[$.dispatchPropertyName])))
      return this._deserializeMap$1$bailout(1, x, result, keys, t1);
    values = t1.$index(x, 3);
    if (typeof values !== "string" && (typeof values !== "object" || values === null || values.constructor !== Array && !$.isJsIndexable(values, values[$.dispatchPropertyName])))
      return this._deserializeMap$1$bailout(2, 0, result, keys, 0, values);
    len = keys.length;
    for (i = 0; i < len; ++i) {
      if (i >= keys.length)
        throw $.ioore(i);
      key = this._deserializeHelper$1(keys[i]);
      if (i >= values.length)
        throw $.ioore(i);
      result.$indexSet(result, key, this._deserializeHelper$1(values[i]));
    }
    return result;
  },
  _deserializeMap$1$bailout: function(state0, x, result, keys, t1, values) {
    switch (state0) {
      case 0:
        result = new $.HashMap(0, null, null, null, null);
        t1 = $.getInterceptor$asx(x);
        id = t1.$index(x, 1);
        t2 = this._deserialized;
        t2.$indexSet(t2, id, result);
        keys = t1.$index(x, 2);
      case 1:
        state0 = 0;
        values = t1.$index(x, 3);
      case 2:
        var id, t2, len, i;
        state0 = 0;
        t1 = $.getInterceptor$asx(keys);
        len = t1.get$length(keys);
        for (t2 = $.getInterceptor$asx(values), i = 0; $.JSNumber_methods.$lt(i, len); ++i)
          result.$indexSet(result, this._deserializeHelper$1(t1.$index(keys, i)), this._deserializeHelper$1(t2.$index(values, i)));
        return result;
    }
  }
},

TimerImpl: {"": "Object;_once,_inEventLoop,_handle?",
  cancel$0: function() {
    if ($.get$globalThis().setTimeout != null) {
      if (this._inEventLoop)
        throw $.wrapException(new $.UnsupportedError("Timer in event loop cannot be canceled."));
      if (this._handle == null)
        return;
      var t1 = $globalState.topEventLoop;
      t1.activeTimerCount = t1.activeTimerCount - 1;
      if (this._once)
        $.get$globalThis().clearTimeout(this._handle);
      else
        $.get$globalThis().clearInterval(this._handle);
      this._handle = null;
    } else
      throw $.wrapException(new $.UnsupportedError("Canceling a timer."));
  },
  TimerImpl$periodic$2: function(milliseconds, callback) {
    var t1;
    if ($.get$globalThis().setTimeout != null) {
      t1 = $globalState.topEventLoop;
      t1.activeTimerCount = t1.activeTimerCount + 1;
      this._handle = $.get$globalThis().setInterval($.convertDartClosureToJS(new $.TimerImpl$periodic_closure(this, callback), 0), milliseconds);
    } else
      throw $.wrapException(new $.UnsupportedError("Periodic timer."));
  },
  TimerImpl$2: function(milliseconds, callback) {
    var t1, t2;
    if (milliseconds === 0)
      t1 = $.get$globalThis().setTimeout == null || $globalState.isWorker === true;
    else
      t1 = false;
    if (t1) {
      t1 = $globalState.topEventLoop;
      t2 = $globalState.currentContext;
      t1.enqueue$3;
      t1.events._add$1(new $._IsolateEvent(t2, callback, "timer"));
      this._inEventLoop = true;
    } else if ($.get$globalThis().setTimeout != null) {
      t1 = $globalState.topEventLoop;
      t1.activeTimerCount = t1.activeTimerCount + 1;
      this._handle = $.get$globalThis().setTimeout($.convertDartClosureToJS(new $.TimerImpl_internalCallback(this, callback), 0), milliseconds);
    } else
      throw $.wrapException(new $.UnsupportedError("Timer greater than 0."));
  }
},

TimerImpl_internalCallback: {"": "Closure;this_0,callback_1",
  call$0: function() {
    this.callback_1.call$0();
    this.this_0.set$_handle(null);
    var t1 = $globalState.topEventLoop;
    t1.activeTimerCount = t1.activeTimerCount - 1;
  }
},

TimerImpl$periodic_closure: {"": "Closure;this_0,callback_1",
  call$0: function() {
    this.callback_1.call$1(this.this_0);
  }
},

startRootIsolate: function(entry) {
  var rootContext, t1, t2;
  $globalState = $._Manager$(entry);
  if ($globalState.isWorker === true)
    return;
  rootContext = new $._IsolateContext(null, null, null);
  t1 = $globalState;
  t2 = t1.nextIsolateId;
  t1.nextIsolateId = t2 + 1;
  rootContext.id = t2;
  rootContext.ports = new $.HashMap(0, null, null, null, null);
  rootContext.isolateStatics = new Isolate();
  $globalState.rootContext = rootContext;
  $globalState.currentContext = rootContext;
  rootContext.eval$1(entry);
  $globalState.topEventLoop.run$0();
},

_globalState: function() {
  return $globalState;
},

_Manager$: function(entry) {
  var t1 = new $._Manager(0, 0, 1, null, null, null, null, null, null, null, null, null, entry);
  t1._Manager$1(entry);
  return t1;
},

_MainManagerStub$: function() {
  return new $._MainManagerStub();
},

IsolateNatives_computeThisScript: function() {
  var currentScript, stack, matches;
  currentScript = $.$currentScript;
  if (currentScript != null)
    return String(currentScript.src);
  stack = new Error().stack;
  if (stack == null)
    stack = (function() {try { throw new Error() } catch(e) { return e.stack }})();
  matches = stack.match(new RegExp("^ *at [^(]*\\((.*):[0-9]*:[0-9]*\\)$", "m"));
  if (matches != null)
    return matches[1];
  matches = stack.match(new RegExp("^[^@]*@(.*):[0-9]*$", "m"));
  if (matches != null)
    return matches[1];
  throw $.wrapException(new $.UnsupportedError("Cannot extract URI from \"" + $.S(stack) + "\""));
},

IsolateNatives__processWorkerMessage: function(sender, e) {
  var msg, t1, functionName, entryPoint, replyTo, context, t2, values;
  msg = $._deserializeMessage(e.data);
  t1 = $.getInterceptor$asx(msg);
  switch (t1.$index(msg, "command")) {
    case "start":
      $globalState.currentManagerId = t1.$index(msg, "id");
      functionName = t1.$index(msg, "functionName");
      entryPoint = functionName == null ? $globalState.entry : $[functionName];
      replyTo = $._deserializeMessage(t1.$index(msg, "replyTo"));
      context = new $._IsolateContext(null, null, null);
      t1 = $globalState;
      t2 = t1.nextIsolateId;
      t1.nextIsolateId = t2 + 1;
      context.id = t2;
      context.ports = new $.HashMap(0, null, null, null, null);
      context.isolateStatics = new Isolate();
      t2 = $globalState.topEventLoop;
      t2.enqueue$3;
      t2.events._add$1(new $._IsolateEvent(context, new $.IsolateNatives__processWorkerMessage_closure(entryPoint, replyTo), "worker-start"));
      $globalState.currentContext = context;
      $globalState.topEventLoop.run$0();
      break;
    case "spawn-worker":
      $.IsolateNatives__spawnWorker(t1.$index(msg, "functionName"), t1.$index(msg, "uri"), t1.$index(msg, "replyPort"));
      break;
    case "message":
      if (t1.$index(msg, "port") != null)
        t1.$index(msg, "port").send$2(t1.$index(msg, "msg"), t1.$index(msg, "replyTo"));
      $globalState.topEventLoop.run$0();
      break;
    case "close":
      t1 = $globalState.managers;
      t2 = $.get$IsolateNatives_workerIds();
      values = $.Primitives_getProperty(sender, "expando$values");
      t1.remove$1(t1, values == null ? null : $.Primitives_getProperty(values, t2._getKey$0()));
      sender.terminate();
      $globalState.topEventLoop.run$0();
      break;
    case "log":
      $.IsolateNatives__log(t1.$index(msg, "msg"));
      break;
    case "print":
      if ($globalState.isWorker === true) {
        t1 = $globalState.mainManager;
        t2 = $._serializeMessage($.makeLiteralMap(["command", "print", "msg", msg]));
        t1.postMessage$1;
        self.postMessage(t2);
      } else
        $.Primitives_printString($.toString$0(t1.$index(msg, "msg")));
      break;
    case "error":
      throw $.wrapException(t1.$index(msg, "msg"));
  }
},

IsolateNatives__log: function(msg) {
  var trace, t1, t2, exception;
  if ($globalState.isWorker === true) {
    t1 = $globalState.mainManager;
    t2 = $._serializeMessage($.makeLiteralMap(["command", "log", "msg", msg]));
    t1.postMessage$1;
    self.postMessage(t2);
  } else
    try {
      $.get$globalThis().console.log(msg);
    } catch (exception) {
      $.unwrapException(exception);
      trace = $.getTraceFromException(exception);
      throw $.wrapException(new $._ExceptionImplementation(trace));
    }

},

IsolateNatives__spawnWorker: function(functionName, uri, replyPort) {
  var worker, t1, workerId;
  if (uri == null)
    uri = $.get$IsolateNatives_thisScript();
  worker = new Worker(uri);
  worker.onmessage = function(e) { $.IsolateNatives__processWorkerMessage$closure.call$2(worker, e); };
  t1 = $globalState;
  workerId = t1.nextManagerId;
  t1.nextManagerId = workerId + 1;
  t1 = $.get$IsolateNatives_workerIds();
  t1.$indexSet(t1, worker, workerId);
  t1 = $globalState.managers;
  t1.$indexSet(t1, workerId, worker);
  worker.postMessage($._serializeMessage($.makeLiteralMap(["command", "start", "id", workerId, "replyTo", $._serializeMessage(replyPort), "functionName", functionName])));
},

ReceivePortImpl$: function() {
  var t1 = $.ReceivePortImpl__nextFreeId;
  $.ReceivePortImpl__nextFreeId = $.$add$ns(t1, 1);
  t1 = new $.ReceivePortImpl(t1, null);
  $.register$2$x($globalState.currentContext, t1._id, t1);
  return t1;
},

_waitForPendingPorts: function(message, callback) {
  var finder = new $._PendingSendPortFinder([], $._MessageTraverserVisitedMap$());
  finder._visited = $._JsVisitedMap$();
  finder.traverse$1(message);
  $._FutureImpl__FutureImpl$wait(finder.ports).then$1(new $._waitForPendingPorts_closure(callback));
},

_serializeMessage: function(message) {
  var t1;
  if ($globalState.supportsWorkers === true) {
    t1 = new $._JsSerializer(0, $._MessageTraverserVisitedMap$());
    t1._visited = $._JsVisitedMap$();
    return t1.traverse$1(message);
  } else {
    t1 = new $._JsCopier($._MessageTraverserVisitedMap$());
    t1._visited = $._JsVisitedMap$();
    return t1.traverse$1(message);
  }
},

_deserializeMessage: function(message) {
  if ($globalState.supportsWorkers === true)
    return $._JsDeserializer$().deserialize$1(message);
  else
    return message;
},

_JsDeserializer$: function() {
  return new $._JsDeserializer(null);
},

_JsVisitedMap$: function() {
  return new $._JsVisitedMap(null);
},

_MessageTraverserVisitedMap$: function() {
  return new $._MessageTraverserVisitedMap();
},

TimerImpl$: function(milliseconds, callback) {
  var t1 = new $.TimerImpl(true, false, null);
  t1.TimerImpl$2(milliseconds, callback);
  return t1;
},

TimerImpl$periodic: function(milliseconds, callback) {
  var t1 = new $.TimerImpl(false, false, null);
  t1.TimerImpl$periodic$2(milliseconds, callback);
  return t1;
}}],
["_js_helper", {
DartError: {"": "Object;",
  toString$0: function(_) {
    var dartException = this.dartException;
    if (!!Error.captureStackTrace || this.stack == null)
      return $.toString$0(dartException);
    else
      return $.S(dartException) + "\n" + $.S(this.stack);
  },
  DartError$1: function(dartException) {
    this.dartException = dartException;
    this.toString = $.DartError_toStringWrapper$closure.call$0;
  }
},

_StackTrace: {"": "Object;_stack",
  toString$0: function(_) {
    var t1 = this._stack;
    return t1 != null ? t1 : "";
  }
},

invokeClosure_closure: {"": "Closure;closure_0",
  call$0: function() {
    return this.closure_0.call$0();
  }
},

invokeClosure_closure0: {"": "Closure;closure_1,arg1_2",
  call$0: function() {
    return this.closure_1.call$1(this.arg1_2);
  }
},

invokeClosure_closure1: {"": "Closure;closure_3,arg1_4,arg2_5",
  call$0: function() {
    return this.closure_3.call$2(this.arg1_4, this.arg2_5);
  }
},

Closure: {"": "Object;",
  toString$0: function(_) {
    return "Closure";
  }
},

Creates: {"": "Object;types"},

Returns: {"": "Object;types"},

JSName: {"": "Object;name"},

Null: {"": "Object;"},

TypeErrorImplementation: {"": "Object;message",
  toString$0: function(_) {
    return this.message;
  }
},

FallThroughErrorImplementation: {"": "Object;",
  toString$0: function(_) {
    return "Switch case fall-through.";
  }
},

TypeImpl: {"": "Object;_typeName",
  toString$0: function(_) {
    return this._typeName;
  },
  get$hashCode: function(_) {
    return $.get$hashCode$(this._typeName);
  },
  $eq: function(_, other) {
    if (other == null)
      return false;
    return typeof other === "object" && other !== null && !!$.getInterceptor(other).$isTypeImpl && $.$eq(this._typeName, other._typeName);
  },
  $isTypeImpl: true
},

JSSyntaxRegExp: {"": "Object;_pattern,_isMultiLine,_isCaseSensitive,_nativeRegExp",
  firstMatch$1: function(str) {
    var m, matchStart, t1;
    if (typeof str !== "string")
      $.throwExpression(new $.ArgumentError(str));
    m = this._nativeRegExp.exec(str);
    if (m == null)
      return;
    matchStart = m.index;
    if (0 >= m.length)
      throw $.ioore(0);
    t1 = $.get$length$asx(m[0]);
    if (typeof t1 !== "number")
      throw $.iae(t1);
    return new $._MatchImplementation(this._pattern, str, matchStart, matchStart + t1, m);
  }
},

_MatchImplementation: {"": "Object;pattern,str,start,end,_groups",
  $index: function(_, index) {
    var t1 = this._groups;
    if (index >>> 0 !== index || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  }
},

_AllMatchesIterable: {"": "IterableBase;_re,_str",
  get$iterator: function(_) {
    var t1, t2, t3;
    t1 = this._re;
    t2 = t1._pattern;
    t3 = t1._isMultiLine;
    t1 = t1._isCaseSensitive;
    return new $._AllMatchesIterator(new $.JSSyntaxRegExp(t2, t3, t1, $.JSSyntaxRegExp_makeNative(t2, t3, t1, true)), this._str, null);
  },
  $asIterable: function() { return [$.Match]; }
},

_AllMatchesIterator: {"": "Object;_re,_str,_liblib3$_current",
  get$current: function() {
    return this._liblib3$_current;
  },
  moveNext$0: function() {
    this._liblib3$_current = this._re.firstMatch$1(this._str);
    return this._liblib3$_current != null;
  }
},

StringMatch: {"": "Object;start,str,pattern",
  $index: function(_, g) {
    if (!$.$eq(g, 0))
      $.throwExpression(new $.RangeError("value " + $.S(g)));
    return this.pattern;
  }
},

isJsIndexable: function(object, record) {
  var result;
  if (record != null) {
    result = record.x;
    if (result != null)
      return result;
  }
  return $.isJsIndexableSlow(object);
},

isJsIndexableSlow: function(object) {
  var result, record;
  result = typeof object === "object" && object !== null && !!$.getInterceptor(object).$isJavaScriptIndexingBehavior;
  record = $.getDispatchProperty(object);
  if (record == null)
    return result;
  record.x = result;
  return result;
},

S: function(value) {
  var res;
  if (typeof value === "string")
    return value;
  if (typeof value === "number") {
    if (value !== 0)
      return "" + value;
  } else if (true === value)
    return "true";
  else if (false === value)
    return "false";
  else if (value == null)
    return "null";
  res = $.toString$0(value);
  if (typeof res !== "string")
    throw $.wrapException(new $.ArgumentError(value));
  return res;
},

Primitives_objectHashCode: function(object) {
  var hash = object.$identityHash;
  if (hash == null) {
    hash = $.$add$ns($.Primitives_hashCodeSeed, 1);
    $.Primitives_hashCodeSeed = hash;
    object.$identityHash = hash;
  }
  return hash;
},

Primitives_printString: function(string) {
  if (typeof dartPrint == "function") {
    dartPrint(string);
    return;
  }
  if (typeof window == "object") {
    if (typeof console == "object")
      console.log(string);
    return;
  }
  if (typeof print == "function") {
    print(string);
    return;
  }
  throw "Unable to print message: " + String(string);
},

Primitives__throwFormatException: function(string) {
  throw $.wrapException(new $.FormatException(string));
},

Primitives_parseDouble: function(source, handleError) {
  var result, trimmed;
  if (handleError == null)
    handleError = $.Primitives__throwFormatException$closure;
  if (!/^\s*[+-]?(?:Infinity|NaN|(?:\.\d+|\d+(?:\.\d*)?)(?:[eE][+-]?\d+)?)\s*$/.test(source))
    return handleError.call$1(source);
  result = parseFloat(source);
  if (isNaN(result)) {
    trimmed = $.JSString_methods.trim$0(source);
    if (trimmed === "NaN" || trimmed === "+NaN" || trimmed === "-NaN")
      return result;
    return handleError.call$1(source);
  }
  return result;
},

Primitives_objectTypeName: function(object) {
  var $name, decompiled, t1;
  $name = $.constructorNameFallback(object);
  if ($.$eq($name, "Object")) {
    decompiled = String(object.constructor).match(/^\s*function\s*(\S*)\s*\(/)[1];
    if (typeof decompiled === "string")
      $name = decompiled;
  }
  t1 = $.getInterceptor$s($name);
  if (t1.codeUnitAt$1($name, 0) === 36)
    $name = t1.substring$1($name, 1);
  t1 = $.getRuntimeTypeInfo(object);
  return $.S($name) + $.joinArguments(t1, 0);
},

Primitives_numMicroseconds: function() {
  var performance, t1, truncated;
  if (typeof window != "undefined" && window !== null) {
    performance = window.performance;
    if (performance != null && typeof performance.webkitNow == "function") {
      t1 = Math.floor(1000 * performance.webkitNow());
      if (isNaN(t1))
        $.throwExpression(new $.UnsupportedError("NaN"));
      if (t1 == Infinity || t1 == -Infinity)
        $.throwExpression(new $.UnsupportedError("Infinity"));
      truncated = t1 < 0 ? Math.ceil(t1) : Math.floor(t1);
      return truncated == -0.0 ? 0 : truncated;
    }
  }
  return 1000 * Date.now();
},

Primitives_getProperty: function(object, key) {
  if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
    throw $.wrapException(new $.ArgumentError(object));
  return object[key];
},

Primitives_setProperty: function(object, key, value) {
  if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
    throw $.wrapException(new $.ArgumentError(object));
  object[key] = value;
},

iae: function(argument) {
  throw $.wrapException(new $.ArgumentError(argument));
},

ioore: function(index) {
  if (typeof index !== "number" || Math.floor(index) !== index)
    $.throwExpression(new $.ArgumentError(index));
  throw $.wrapException(new $.RangeError("value " + $.S(index)));
},

wrapException: function(ex) {
  var wrapper;
  if (ex == null)
    ex = $.C_NullThrownError;
  wrapper = new $.DartError();
  wrapper.dartException = ex;
  wrapper.toString = $.DartError_toStringWrapper$closure.call$0;
  if (!!Error.captureStackTrace)
    Error.captureStackTrace(wrapper, $.wrapException$closure);
  else
    wrapper.stack = new Error().stack;
  return wrapper;
},

throwExpression: function(ex) {
  throw $.wrapException(ex);
},

DartError_toStringWrapper: function() {
  return $.toString$0(this);
},

unwrapException: function(ex) {
  var message, type, $name, t1, ieErrorCode, ieFacilityNumber, t2;
  if (ex == null)
    return;
  if (typeof ex !== "object")
    return ex;
  if ("dartException" in ex)
    return ex.dartException;
  else if (!("message" in ex))
    return ex;
  message = ex.message;
  if (ex instanceof TypeError) {
    type = ex.type;
    $name = ex.arguments ? ex.arguments[0] : "";
    if (message.indexOf("JSNull") === -1) {
      t1 = $.getInterceptor(type);
      t1 = t1.$eq(type, "property_not_function") || t1.$eq(type, "called_non_callable") || t1.$eq(type, "non_object_property_call") || t1.$eq(type, "non_object_property_load");
    } else
      t1 = true;
    if (t1)
      return new $.NoSuchMethodError(null, $name, [], $.makeLiteralMap([]), null);
    else if ($.$eq(type, "undefined_method"))
      return new $.NoSuchMethodError("", $name, [], $.makeLiteralMap([]), null);
    ieErrorCode = ex.number & 0xffff;
    ieFacilityNumber = ex.number >> 16 & 0x1FFF;
    t1 = typeof message === "string";
    if (t1) {
      message;
      if (message === "null has no properties" || message === "'null' is not an object" || message === "'undefined' is not an object" || $.JSString_methods.endsWith$1(message, "is null") || $.JSString_methods.endsWith$1(message, "is undefined") || $.JSString_methods.endsWith$1(message, "is null or undefined") || $.JSString_methods.endsWith$1(message, "of undefined") || $.JSString_methods.endsWith$1(message, "of null"))
        return new $.NoSuchMethodError(null, message, [], $.makeLiteralMap([]), null);
      else {
        if (message.indexOf(" has no method ") === -1)
          if (message.indexOf(" is not a function") === -1)
            t2 = ieErrorCode === 438 && ieFacilityNumber === 10;
          else
            t2 = true;
        else
          t2 = true;
        if (t2)
          return new $.NoSuchMethodError("", message, [], $.makeLiteralMap([]), null);
      }
    }
    t1 = t1 ? message : "";
    return new $._ExceptionImplementation(t1);
  }
  if (ex instanceof RangeError) {
    if (typeof message === "string" && message.indexOf("call stack") !== -1)
      return new $.StackOverflowError();
    return new $.ArgumentError(null);
  }
  if (typeof InternalError == "function" && ex instanceof InternalError)
    if (typeof message === "string" && message === "too much recursion")
      return new $.StackOverflowError();
  return ex;
},

getTraceFromException: function(exception) {
  if (exception == null)
    return;
  if (typeof exception !== "object")
    return;
  if ("stack" in exception)
    return new $._StackTrace(exception.stack);
  else
    return;
},

makeLiteralMap: function(keyValuePairs) {
  var iterator, result, key;
  iterator = $.JSArray_methods.get$iterator(keyValuePairs);
  result = new $.LinkedHashMap(0, null, null, null, null, null, 0);
  for (; iterator.moveNext$0();) {
    key = iterator.get$current();
    iterator.moveNext$0();
    result.$indexSet(result, key, iterator.get$current());
  }
  return result;
},

invokeClosure: function(closure, isolate, numberOfArguments, arg1, arg2) {
  var t1, result;
  t1 = $.getInterceptor(numberOfArguments);
  if (t1.$eq(numberOfArguments, 0)) {
    result = isolate.eval$1(new $.invokeClosure_closure(closure));
    $globalState.topEventLoop.run$0();
    return result;
  } else if (t1.$eq(numberOfArguments, 1)) {
    result = isolate.eval$1(new $.invokeClosure_closure0(closure, arg1));
    $globalState.topEventLoop.run$0();
    return result;
  } else if (t1.$eq(numberOfArguments, 2)) {
    result = isolate.eval$1(new $.invokeClosure_closure1(closure, arg1, arg2));
    $globalState.topEventLoop.run$0();
    return result;
  } else
    throw $.wrapException(new $._ExceptionImplementation("Unsupported number of arguments for wrapped closure"));
},

convertDartClosureToJS: function(closure, arity) {
  var $function;
  if (closure == null)
    return;
  $function = closure.$identity;
  if (!!$function)
    return $function;
  $function = (function ($2, $3) { return function($0, $1) { return $3(closure, $2, arity, $0, $1) }})($globalState.currentContext, $.invokeClosure$closure.call$5);
  closure.$identity = $function;
  return $function;
},

throwCyclicInit: function(staticName) {
  throw $.wrapException(new $.RuntimeError("Cyclic initialization for static " + $.S(staticName)));
},

getRuntimeTypeInfo: function(target) {
  if (target == null)
    return;
  return target.$builtinTypeInfo;
},

runtimeTypeToString: function(type) {
  if (typeof type !== "string" && (typeof type !== "object" || type === null || type.constructor !== Array && !$.isJsIndexable(type, type[$.dispatchPropertyName])))
    return $.runtimeTypeToString$bailout(1, type);
  if (type.constructor === Array) {
    if (0 >= type.length)
      throw $.ioore(0);
    return type[0].builtin$cls + $.joinArguments(type, 1);
  } else
    return type.builtin$cls;
},

runtimeTypeToString$bailout: function(state0, type) {
  var t1 = type == null;
  if (t1)
    return "dynamic";
  else if (!t1 && type.constructor === Array)
    return $.$index$asx(type, 0).builtin$cls + $.joinArguments(type, 1);
  else
    return type.builtin$cls;
},

joinArguments: function(types, startIndex) {
  var buffer, index, firstArgument, allDynamic, argument, t1;
  if (typeof types !== "string" && (typeof types !== "object" || types === null || types.constructor !== Array && !$.isJsIndexable(types, types[$.dispatchPropertyName])))
    return $.joinArguments$bailout(1, types, startIndex);
  buffer = new $.StringBuffer("");
  buffer._contents = "";
  for (index = startIndex, firstArgument = true, allDynamic = true; index < types.length; ++index) {
    if (firstArgument)
      firstArgument = false;
    else
      buffer._contents = buffer._contents + ", ";
    if (index < 0 || index >= types.length)
      throw $.ioore(index);
    argument = types[index];
    if (argument != null)
      allDynamic = false;
    t1 = $.runtimeTypeToString(argument);
    buffer._contents = buffer._contents + t1;
  }
  return allDynamic ? "" : "<" + $.S(buffer) + ">";
},

joinArguments$bailout: function(state0, types, startIndex) {
  var t1, buffer, index, firstArgument, allDynamic, argument, t2;
  t1 = $.getInterceptor(types);
  if (types == null)
    return "";
  buffer = new $.StringBuffer("");
  buffer._contents = "";
  for (index = startIndex, firstArgument = true, allDynamic = true; $.JSNumber_methods.$lt(index, t1.get$length(types)); ++index) {
    if (firstArgument)
      firstArgument = false;
    else
      buffer._contents = buffer._contents + ", ";
    argument = t1.$index(types, index);
    if (argument != null)
      allDynamic = false;
    t2 = $.runtimeTypeToString(argument);
    buffer._contents = buffer._contents + t2;
  }
  return allDynamic ? "" : "<" + $.S(buffer) + ">";
},

typeNameInChrome: function(obj) {
  return $.typeNameInWebKitCommon(obj.constructor.name);
},

typeNameInSafari: function(obj) {
  return $.typeNameInWebKitCommon($.constructorNameFallback(obj));
},

typeNameInWebKitCommon: function(tag) {
  var $name = tag;
  if ($name === "CanvasPixelArray")
    return "Uint8ClampedArray";
  if ($name === "AudioChannelMerger")
    return "ChannelMergerNode";
  if ($name === "AudioChannelSplitter")
    return "ChannelSplitterNode";
  if ($name === "AudioGainNode")
    return "GainNode";
  if ($name === "AudioPannerNode")
    return "PannerNode";
  if ($name === "JavaScriptAudioNode")
    return "ScriptProcessorNode";
  if ($name === "Oscillator")
    return "OscillatorNode";
  if ($name === "RealtimeAnalyserNode")
    return "AnalyserNode";
  if ($name === "IDBVersionChangeRequest")
    return "IDBOpenDBRequest";
  return $name;
},

typeNameInOpera: function(obj) {
  return $.constructorNameFallback(obj);
},

typeNameInFirefox: function(obj) {
  var $name = $.constructorNameFallback(obj);
  if ($name === "BeforeUnloadEvent")
    return "Event";
  if ($name === "CSS2Properties")
    return "CSSStyleDeclaration";
  if ($name === "DataTransfer")
    return "Clipboard";
  if ($name === "DragEvent")
    return "MouseEvent";
  if ($name === "GeoGeolocation")
    return "Geolocation";
  if ($name === "WorkerMessageEvent")
    return "MessageEvent";
  if ($name === "XMLDocument")
    return "Document";
  return $name;
},

typeNameInIE: function(obj) {
  var $name = $.constructorNameFallback(obj);
  if ($name === "Document") {
    if (!!obj.xmlVersion)
      return "Document";
    return "HTMLDocument";
  }
  if ($name === "BeforeUnloadEvent")
    return "Event";
  if ($name === "CanvasPixelArray")
    return "Uint8ClampedArray";
  if ($name === "DataTransfer")
    return "Clipboard";
  if ($name === "DragEvent")
    return "MouseEvent";
  if ($name === "HTMLDDElement")
    return "HTMLElement";
  if ($name === "HTMLDTElement")
    return "HTMLElement";
  if ($name === "HTMLTableDataCellElement")
    return "HTMLTableCellElement";
  if ($name === "HTMLTableHeaderCellElement")
    return "HTMLTableCellElement";
  if ($name === "HTMLPhraseElement")
    return "HTMLElement";
  if ($name === "MSStyleCSSProperties")
    return "CSSStyleDeclaration";
  if ($name === "Position")
    return "Geoposition";
  if ($name === "Object")
    if (window.DataView && obj instanceof window.DataView)
      return "DataView";
  return $name;
},

constructorNameFallback: function(object) {
  var $constructor, $name, t1, string;
  if (object == null)
    return "Null";
  $constructor = object.constructor;
  if (typeof $constructor === "function") {
    $name = $constructor.builtin$cls;
    if ($name != null)
      return $name;
    $name = $constructor.name;
    if (typeof $name === "string") {
      $name;
      t1 = $name !== "" && $name !== "Object" && $name !== "Function.prototype";
    } else
      t1 = false;
    if (t1)
      return $name;
  }
  string = Object.prototype.toString.call(object);
  return string.substring(8, string.length - 1);
},

alternateTag: function(object, tag) {
  if (!!/^HTML[A-Z].*Element$/.test(tag)) {
    if (Object.prototype.toString.call(object) === "[object Object]")
      return;
    return "HTMLElement";
  }
  return;
},

getFunctionForTypeNameOf: function() {
  if (typeof navigator !== "object")
    return $.typeNameInChrome$closure;
  var userAgent = navigator.userAgent;
  if (userAgent.indexOf("Chrome") !== -1 || userAgent.indexOf("DumpRenderTree") !== -1)
    return $.typeNameInChrome$closure;
  else if (userAgent.indexOf("Firefox") !== -1)
    return $.typeNameInFirefox$closure;
  else if (userAgent.indexOf("MSIE") !== -1)
    return $.typeNameInIE$closure;
  else if (userAgent.indexOf("Opera") !== -1)
    return $.typeNameInOpera$closure;
  else if (userAgent.indexOf("AppleWebKit") !== -1)
    return $.typeNameInSafari$closure;
  else
    return $.constructorNameFallback$closure;
},

toStringForNativeObject: function(obj) {
  if ($._getTypeNameOf == null)
    $._getTypeNameOf = $.getFunctionForTypeNameOf();
  return "Instance of " + $._getTypeNameOf.call$1(obj);
},

hashCodeForNativeObject: function(object) {
  return $.Primitives_objectHashCode(object);
},

defineProperty: function(obj, property, value) {
  Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
},

defineNativeMethods: function(tags, interceptorClass) {
  $.defineNativeMethodsCommon(tags, interceptorClass, true);
},

defineNativeMethodsNonleaf: function(tags, interceptorClass) {
  $.defineNativeMethodsCommon(tags, interceptorClass, false);
},

defineNativeMethodsCommon: function(tags, interceptorClass, isLeaf) {
  var methods, tagsList, i, tag;
  methods = interceptorClass.prototype;
  if ($.interceptorsByTag == null)
    $.interceptorsByTag = {};
  if ($.leafTags == null)
    $.leafTags = {};
  tagsList = tags.split("|");
  for (i = 0; i < tagsList.length; ++i) {
    tag = tagsList[i];
    $.interceptorsByTag[tag] = methods;
    $.leafTags[tag] = isLeaf;
  }
},

defineNativeMethodsFinish: function() {
},

lookupInterceptor: function(hasOwnPropertyFunction, tag) {
  var map = $.interceptorsByTag;
  if (map == null)
    return;
  return hasOwnPropertyFunction.call(map, tag) ? map[tag] : null;
},

lookupDispatchRecord: function(obj) {
  var hasOwnPropertyFunction, tag, interceptor, secondTag, t1;
  hasOwnPropertyFunction = Object.prototype.hasOwnProperty;
  if ($._getTypeNameOf == null)
    $._getTypeNameOf = $.getFunctionForTypeNameOf();
  tag = $._getTypeNameOf.call$1(obj);
  interceptor = $.lookupInterceptor(hasOwnPropertyFunction, tag);
  if (interceptor == null) {
    secondTag = $.alternateTag(obj, tag);
    if (secondTag != null)
      interceptor = $.lookupInterceptor(hasOwnPropertyFunction, secondTag);
  }
  if (interceptor == null)
    return;
  t1 = $.leafTags;
  if (t1 != null && t1[tag] === true)
    return $.makeDispatchRecord(interceptor, false, null);
  else
    return $.makeDispatchRecord(interceptor, Object.getPrototypeOf(obj), null);
},

JSSyntaxRegExp_makeNative: function(pattern, multiLine, caseSensitive, global) {
  var m, i, g, regexp, errorMessage;
  if (typeof pattern !== "string")
    $.throwExpression(new $.ArgumentError(pattern));
  m = multiLine === true ? "m" : "";
  i = caseSensitive === true ? "" : "i";
  g = global ? "g" : "";
  regexp = (function() {try {return new RegExp(pattern, m + i + g);} catch (e) {return e;}})();
  if (regexp instanceof RegExp)
    return regexp;
  errorMessage = String(regexp);
  throw $.wrapException(new $.FormatException("Illegal RegExp pattern: " + $.S(pattern) + ", " + errorMessage));
},

stringReplaceAllUnchecked: function(receiver, from, to) {
  var result, $length, i, t1;
  if (from === "")
    if (receiver === "")
      return to;
    else {
      result = new $.StringBuffer("");
      result._contents = "";
      $length = receiver.length;
      result._contents = result._contents + to;
      for (i = 0; i < $length; ++i) {
        t1 = receiver[i];
        result._contents = result._contents + t1;
        result._contents = result._contents + to;
      }
      return result._contents;
    }
  else
    return receiver.replace(new RegExp(from.replace(new RegExp("[-[\\]{}()*+?.,\\\\^$|#\\s]", 'g'), "\\$&"), 'g'), to.replace("$", "$$$$"));
}}],
["creeper", {
Building: {"": "Object;position>,moveTargetPosition?,weaponTargetPosition@,speed,imageID<,status*,operating?,selected*,hovered<,built@,active@,canMove<,needsEnergy<,health@,maxHealth<,energy@,maxEnergy<,energyTimer@,healthRequests@,energyRequests@,requestTimer@,weaponRadius<,targetAngle?,size>,collectedEnergy@,flightCounter,scale,ship?",
  updateHoverState$0: function() {
    var position, t1, t2, t3, t4, t5, t6;
    position = $.Helper_tiled2screen(this.position);
    t1 = $.engine.mouse.x;
    t2 = position.x;
    t3 = $.getInterceptor$n(t1);
    if (t3.$gt(t1, t2)) {
      t4 = $.game;
      t5 = t4.tileSize;
      t6 = this.size;
      t4 = t4.zoom;
      if (typeof t4 !== "number")
        throw $.iae(t4);
      if (t3.$lt(t1, $.$sub$n($.$add$ns(t2, t5 * t6 * t4), 1))) {
        t1 = $.engine.mouse.y;
        t2 = position.y;
        t3 = $.getInterceptor$n(t1);
        if (t3.$gt(t1, t2)) {
          t4 = $.game;
          t5 = t4.tileSize;
          t6 = this.size;
          t4 = t4.zoom;
          if (typeof t4 !== "number")
            throw $.iae(t4);
          t4 = t3.$lt(t1, $.$sub$n($.$add$ns(t2, t5 * t6 * t4), 1));
          t1 = t4;
        } else
          t1 = false;
      } else
        t1 = false;
    } else
      t1 = false;
    this.hovered = t1;
    return this.hovered;
  },
  move$0: function() {
    var t1 = this.status;
    if (t1 === "RISING") {
      t1 = this.flightCounter;
      if (t1 < 25) {
        this.flightCounter = t1 + 1;
        this.scale = this.scale * 1.01;
      }
      if (this.flightCounter === 25)
        this.status = "MOVING";
    } else if (t1 === "FALLING") {
      t1 = this.flightCounter;
      if (t1 > 0) {
        this.flightCounter = t1 - 1;
        this.scale = this.scale / 1.01;
      }
      if (this.flightCounter === 0) {
        this.status = "IDLE";
        $.set$x$x(this.position, this.moveTargetPosition.x);
        $.set$y$x(this.position, this.moveTargetPosition.y);
        this.scale = 1;
      }
    }
    if (this.status === "MOVING") {
      this.position = $.$add$ns(this.position, this.speed);
      if ($.$gt$n($.$mul$n($.get$x$x(this.position), $.game.tileSize), $.$sub$n($.$mul$n(this.moveTargetPosition.x, $.game.tileSize), 2)) && $.$lt$n($.$mul$n($.get$x$x(this.position), $.game.tileSize), $.$add$ns($.$mul$n(this.moveTargetPosition.x, $.game.tileSize), 2)) && $.$gt$n($.$mul$n($.get$y$x(this.position), $.game.tileSize), $.$sub$n($.$mul$n(this.moveTargetPosition.y, $.game.tileSize), 2)) && $.$lt$n($.$mul$n($.get$y$x(this.position), $.game.tileSize), $.$add$ns($.$mul$n(this.moveTargetPosition.y, $.game.tileSize), 2)))
        this.status = "FALLING";
    }
  },
  calculateVector$0: function() {
    var targetPosition, ownPosition, delta, t1, t2, distance, t3, t4, t5, t6;
    if (!$.$eq(this.moveTargetPosition.x, $.get$x$x(this.position)) || !$.$eq(this.moveTargetPosition.y, $.get$y$x(this.position))) {
      targetPosition = new $.Vector($.$mul$n(this.moveTargetPosition.x, $.game.tileSize), $.$mul$n(this.moveTargetPosition.y, $.game.tileSize));
      ownPosition = new $.Vector($.$mul$n($.get$x$x(this.position), $.game.tileSize), $.$mul$n($.get$y$x(this.position), $.game.tileSize));
      delta = new $.Vector($.$sub$n(targetPosition.x, ownPosition.x), $.$sub$n(targetPosition.y, ownPosition.y));
      t1 = $.$sub$n(targetPosition.x, ownPosition.x);
      if (typeof t1 !== "number")
        $.throwExpression(new $.ArgumentError(t1));
      t1 = Math.pow(t1, 2);
      t2 = $.$sub$n(targetPosition.y, ownPosition.y);
      if (typeof t2 !== "number")
        $.throwExpression(new $.ArgumentError(t2));
      t1 += Math.pow(t2, 2);
      distance = Math.sqrt(t1);
      t1 = this.speed;
      t2 = $.$div$n(delta.x, distance);
      t3 = $.game;
      t4 = t3.buildingSpeed;
      t5 = t3.speed;
      t6 = t3.tileSize;
      t1.x = t2 * t4 * t5 / t6;
      this.speed.y = $.$div$n(delta.y, distance) * t3.buildingSpeed * t3.speed / t6;
    }
  },
  getCenter$0: function() {
    return new $.Vector($.$add$ns($.$mul$n($.get$x$x(this.position), $.game.tileSize), $.game.tileSize / 2 * this.size), $.$add$ns($.$mul$n($.get$y$x(this.position), $.game.tileSize), $.game.tileSize / 2 * this.size));
  },
  takeDamage$0: function() {
    var i, j, t1, t2, t3;
    if (this.status === "IDLE") {
      for (i = 0; i < this.size; ++i)
        for (j = 0; j < this.size; ++j) {
          t1 = $.game.world.tiles;
          t2 = $.$add$ns($.get$x$x(this.position), i);
          if (t2 >>> 0 !== t2 || t2 >= t1.length)
            throw $.ioore(t2);
          if ($.$gt$n($.$index$asx($.$index$asx(t1[t2], $.$add$ns($.get$y$x(this.position), j)), 0).get$creep(), 0)) {
            t1 = this.health;
            t2 = $.game.world.tiles;
            t3 = $.$add$ns($.get$x$x(this.position), i);
            if (t3 >>> 0 !== t3 || t3 >= t2.length)
              throw $.ioore(t3);
            t3 = $.$index$asx($.$index$asx(t2[t3], $.$add$ns($.get$y$x(this.position), j)), 0).get$creep();
            if (typeof t3 !== "number")
              throw $.iae(t3);
            this.health = t1 - t3;
          }
        }
      if (this.health < 0)
        $.game.removeBuilding$1(this);
    }
  },
  shield$0: function() {
    var center, i, j, t1, t2, t3, distance;
    if (this.built && $.$eq(this.imageID, "shield") && this.status === "IDLE") {
      center = this.getCenter$0();
      i = $.$sub$n($.get$x$x(this.position), 9);
      if (i !== (i | 0))
        return this.shield$0$bailout(1, center, i);
      for (; $.JSNumber_methods.$lt(i, $.$add$ns($.get$x$x(this.position), 10)); ++i) {
        j = $.$sub$n($.get$y$x(this.position), 9);
        if (typeof j !== "number")
          return this.shield$0$bailout(2, center, i, $.JSNumber_methods, j);
        for (; $.JSNumber_methods.$lt(j, $.$add$ns($.get$y$x(this.position), 10)); ++j) {
          t1 = $.game;
          if (t1.withinWorld$2(i, j)) {
            t1 = t1.tileSize;
            t2 = center.x;
            if (typeof t2 !== "number")
              throw $.iae(t2);
            t2 = i * t1 + t1 / 2 - t2;
            t1 = Math.pow(t2, 2);
            t2 = $.game.tileSize;
            t3 = center.y;
            if (typeof t3 !== "number")
              throw $.iae(t3);
            t3 = j * t2 + t2 / 2 - t3;
            distance = t1 + Math.pow(t3, 2);
            t1 = $.game.tileSize * 10;
            if (distance < Math.pow(t1, 2)) {
              t1 = $.game.world.tiles;
              if (i < 0 || i >= t1.length)
                throw $.ioore(i);
              t1 = t1[i];
              if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !$.isJsIndexable(t1, t1[$.dispatchPropertyName])))
                return this.shield$0$bailout(3, center, i, $.JSNumber_methods, j, distance, $.JSNumber_methods, t1);
              if (j >>> 0 !== j || j >= t1.length)
                throw $.ioore(j);
              if ($.$gt$n($.$index$asx(t1[j], 0).get$creep(), 0)) {
                t1 = $.game.world.tiles;
                if (i >= t1.length)
                  throw $.ioore(i);
                t1 = t1[i];
                if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !$.isJsIndexable(t1, t1[$.dispatchPropertyName])))
                  return this.shield$0$bailout(4, center, i, $.JSNumber_methods, j, distance, $.JSNumber_methods, t1);
                if (j >= t1.length)
                  throw $.ioore(j);
                t1 = $.$index$asx(t1[j], 0);
                t1.set$creep($.$sub$n(t1.get$creep(), distance / $.game.tileSize * 0.1));
                t1 = $.game.world.tiles;
                if (i >= t1.length)
                  throw $.ioore(i);
                t1 = t1[i];
                if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !$.isJsIndexable(t1, t1[$.dispatchPropertyName])))
                  return this.shield$0$bailout(5, center, i, $.JSNumber_methods, j, 0, $.JSNumber_methods, t1);
                if (j >= t1.length)
                  throw $.ioore(j);
                if ($.$lt$n($.$index$asx(t1[j], 0).get$creep(), 0)) {
                  t1 = $.game.world.tiles;
                  if (i >= t1.length)
                    throw $.ioore(i);
                  t1 = t1[i];
                  if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !$.isJsIndexable(t1, t1[$.dispatchPropertyName])))
                    return this.shield$0$bailout(6, center, i, $.JSNumber_methods, j, 0, $.JSNumber_methods, t1);
                  if (j >= t1.length)
                    throw $.ioore(j);
                  $.$index$asx(t1[j], 0).set$creep(0);
                }
              }
            }
          }
        }
      }
    }
  },
  shield$0$bailout: function(state0, center, i, t1, j, distance, t2, t3) {
    switch (state0) {
      case 0:
      default:
        var t4;
        if (state0 === 6 || state0 === 5 || state0 === 4 || state0 === 3 || state0 === 2 || state0 === 1 || state0 === 0 && this.built && $.$eq(this.imageID, "shield") && this.status === "IDLE")
          switch (state0) {
            case 0:
              center = this.getCenter$0();
              i = $.$sub$n($.get$x$x(this.position), 9);
            case 1:
              state0 = 0;
            default:
              L0:
                while (true)
                  switch (state0) {
                    case 0:
                      t1 = $.getInterceptor$n(i);
                      if (!t1.$lt(i, $.$add$ns($.get$x$x(this.position), 10)))
                        break L0;
                      j = $.$sub$n($.get$y$x(this.position), 9);
                    case 2:
                      state0 = 0;
                    default:
                      L1:
                        while (true)
                          switch (state0) {
                            case 0:
                              t2 = $.getInterceptor$n(j);
                              if (!t2.$lt(j, $.$add$ns($.get$y$x(this.position), 10)))
                                break L1;
                              t3 = $.game;
                            default:
                              if (state0 === 6 || state0 === 5 || state0 === 4 || state0 === 3 || state0 === 0 && t3.withinWorld$2(i, j))
                                switch (state0) {
                                  case 0:
                                    t3 = $.$sub$n($.$add$ns(t1.$mul(i, t3.tileSize), $.game.tileSize / 2), center.x);
                                    if (typeof t3 !== "number")
                                      $.throwExpression(new $.ArgumentError(t3));
                                    t3 = Math.pow(t3, 2);
                                    t4 = $.$sub$n($.$add$ns(t2.$mul(j, $.game.tileSize), $.game.tileSize / 2), center.y);
                                    if (typeof t4 !== "number")
                                      $.throwExpression(new $.ArgumentError(t4));
                                    distance = t3 + Math.pow(t4, 2);
                                    t3 = $.game.tileSize * 10;
                                  default:
                                    if (state0 === 6 || state0 === 5 || state0 === 4 || state0 === 3 || state0 === 0 && distance < Math.pow(t3, 2))
                                      switch (state0) {
                                        case 0:
                                          t3 = $.game.world.tiles;
                                          if (i >>> 0 !== i || i >= t3.length)
                                            throw $.ioore(i);
                                          t3 = t3[i];
                                        case 3:
                                          state0 = 0;
                                        default:
                                          if (state0 === 6 || state0 === 5 || state0 === 4 || state0 === 0 && $.$gt$n($.$index$asx($.$index$asx(t3, j), 0).get$creep(), 0))
                                            switch (state0) {
                                              case 0:
                                                t3 = $.game.world.tiles;
                                                if (i >= t3.length)
                                                  throw $.ioore(i);
                                                t3 = t3[i];
                                              case 4:
                                                state0 = 0;
                                                t3 = $.$index$asx($.$index$asx(t3, j), 0);
                                                t3.set$creep($.$sub$n(t3.get$creep(), distance / $.game.tileSize * 0.1));
                                                t3 = $.game.world.tiles;
                                                if (i >= t3.length)
                                                  throw $.ioore(i);
                                                t3 = t3[i];
                                              case 5:
                                                state0 = 0;
                                              case 6:
                                                if (state0 === 6 || state0 === 0 && $.$lt$n($.$index$asx($.$index$asx(t3, j), 0).get$creep(), 0))
                                                  switch (state0) {
                                                    case 0:
                                                      t3 = $.game.world.tiles;
                                                      if (i >= t3.length)
                                                        throw $.ioore(i);
                                                      t3 = t3[i];
                                                    case 6:
                                                      state0 = 0;
                                                      $.$index$asx($.$index$asx(t3, j), 0).set$creep(0);
                                                  }
                                            }
                                      }
                                }
                              j = t2.$add(j, 1);
                          }
                      i = t1.$add(i, 1);
                  }
          }
    }
  },
  drawBox$0: function() {
    var t1, context, position, t2, t3, t4, t5;
    t1 = $.engine.canvas;
    context = t1.$index(t1, "buffer").get$context();
    if (this.hovered || this.selected) {
      position = $.Helper_tiled2screen(this.position);
      t1 = $.game.zoom;
      if (typeof t1 !== "number")
        throw $.iae(t1);
      t2 = $.getInterceptor$x(context);
      t2.set$lineWidth(context, 2 * t1);
      t2.set$strokeStyle(context, "#000");
      t1 = position.x;
      t3 = position.y;
      t4 = $.game;
      t5 = t4.tileSize * this.size;
      t4 = t4.zoom;
      if (typeof t4 !== "number")
        throw $.iae(t4);
      t2.strokeRect$4(context, t1, t3, t5 * t4, t5 * t4);
    }
  },
  drawMovementIndicators$0: function() {
    var t1, context, center, target, t2, t3, t4, t5, t6;
    t1 = $.engine.canvas;
    context = t1.$index(t1, "buffer").get$context();
    if (this.status !== "IDLE") {
      center = $.Helper_real2screen(this.getCenter$0());
      target = $.Helper_tiled2screen(this.moveTargetPosition);
      t1 = $.getInterceptor$x(context);
      t1.set$strokeStyle(context, "rgba(0,255,0,0.5)");
      t2 = target.x;
      t3 = target.y;
      t4 = this.size;
      t5 = $.game;
      t4 *= t5.tileSize;
      t5 = t5.zoom;
      if (typeof t5 !== "number")
        throw $.iae(t5);
      t1.strokeRect$4(context, t2, t3, t4 * t5, t4 * t5);
      t1.set$strokeStyle(context, "rgba(255,255,255,0.5)");
      t1.beginPath$0(context);
      t1.moveTo$2(context, center.x, center.y);
      t5 = target.x;
      t4 = $.game;
      t3 = t4.tileSize;
      t2 = this.size;
      t4 = t4.zoom;
      if (typeof t4 !== "number")
        throw $.iae(t4);
      t4 = $.$add$ns(t5, t3 / 2 * t2 * t4);
      t2 = target.y;
      t3 = $.game;
      t5 = t3.tileSize;
      t6 = this.size;
      t3 = t3.zoom;
      if (typeof t3 !== "number")
        throw $.iae(t3);
      t1.lineTo$2(context, t4, $.$add$ns(t2, t5 / 2 * t6 * t3));
      t1.stroke$0(context);
    }
  },
  drawRepositionInfo$0: function() {
    var t1, context, positionScrolled, drawPosition, drawPositionCenter, center, t2, t3, t4, t5;
    t1 = $.engine.canvas;
    context = t1.$index(t1, "buffer").get$context();
    if (this.built && this.selected && this.canMove) {
      positionScrolled = $.game.getHoveredTilePosition$0();
      drawPosition = $.Helper_tiled2screen(positionScrolled);
      drawPositionCenter = $.Helper_real2screen(new $.Vector($.$add$ns($.$mul$n(positionScrolled.x, $.game.tileSize), $.game.tileSize / 2 * this.size), $.$add$ns($.$mul$n(positionScrolled.y, $.game.tileSize), $.game.tileSize / 2 * this.size)));
      center = $.Helper_real2screen(this.getCenter$0());
      $.game.drawRangeBoxes$4(positionScrolled, this.imageID, this.weaponRadius, this.size);
      t1 = $.getInterceptor$x(context);
      if ($.game.canBePlaced$3(positionScrolled, this.size, this))
        t1.set$strokeStyle(context, "rgba(0,255,0,0.5)");
      else
        t1.set$strokeStyle(context, "rgba(255,0,0,0.5)");
      t1 = drawPosition.x;
      t2 = drawPosition.y;
      t3 = $.game;
      t4 = t3.tileSize * this.size;
      t3 = t3.zoom;
      if (typeof t3 !== "number")
        throw $.iae(t3);
      t5 = $.getInterceptor$x(context);
      t5.strokeRect$4(context, t1, t2, t4 * t3, t4 * t3);
      t5.set$strokeStyle(context, "rgba(255,255,255,0.5)");
      t5.beginPath$0(context);
      t5.moveTo$2(context, center.x, center.y);
      t5.lineTo$2(context, drawPositionCenter.x, drawPositionCenter.y);
      t5.stroke$0(context);
    }
  },
  draw$0: function() {
    var t1, context, position, center, t2, t3, t4, t5, t6, targetPosition;
    t1 = $.engine.canvas;
    context = t1.$index(t1, "buffer").get$context();
    position = $.Helper_tiled2screen(this.position);
    center = $.Helper_real2screen(this.getCenter$0());
    t1 = $.engine;
    t2 = t1.images;
    t2 = $.$mul$n($.get$width$x(t2.$index(t2, this.imageID)), $.game.zoom);
    t3 = $.engine.images;
    if (t1.isVisible$2(position, new $.Vector(t2, $.$mul$n($.get$height$x(t3.$index(t3, this.imageID)), $.game.zoom)))) {
      t1 = $.getInterceptor$x(context);
      if (!this.built) {
        t1.save$0(context);
        t1.set$globalAlpha(context, 0.5);
        t2 = $.engine.images;
        t2 = t2.$index(t2, this.imageID);
        t3 = position.x;
        t4 = position.y;
        t5 = $.engine.images;
        t5 = $.$mul$n($.get$width$x(t5.$index(t5, this.imageID)), $.game.zoom);
        t6 = $.engine.images;
        t1.drawImageScaled$5(context, t2, t3, t4, t5, $.$mul$n($.get$height$x(t6.$index(t6, this.imageID)), $.game.zoom));
        if ($.$eq(this.imageID, "cannon")) {
          t2 = $.engine.images;
          t2 = t2.$index(t2, "cannongun");
          t3 = position.x;
          t4 = position.y;
          t5 = $.engine.images;
          t5 = $.$mul$n($.get$width$x(t5.$index(t5, this.imageID)), $.game.zoom);
          t6 = $.engine.images;
          t1.drawImageScaled$5(context, t2, t3, t4, t5, $.$mul$n($.get$height$x(t6.$index(t6, this.imageID)), $.game.zoom));
        }
        t1.restore$0(context);
      } else {
        t2 = $.engine.images;
        t2 = t2.$index(t2, this.imageID);
        t3 = $.$sub$n($.$add$ns(position.x, 24), 24 * this.scale);
        t4 = $.$sub$n($.$add$ns(position.y, 24), 24 * this.scale);
        t5 = $.engine.images;
        t5 = $.$mul$n($.$mul$n($.get$width$x(t5.$index(t5, this.imageID)), $.game.zoom), this.scale);
        t6 = $.engine.images;
        t1.drawImageScaled$5(context, t2, t3, t4, t5, $.$mul$n($.$mul$n($.get$height$x(t6.$index(t6, this.imageID)), $.game.zoom), this.scale));
        if ($.$eq(this.imageID, "cannon")) {
          t1.save$0(context);
          t2 = position.x;
          t3 = $.game.zoom;
          if (typeof t3 !== "number")
            throw $.iae(t3);
          t3 = $.$add$ns(t2, 24 * t3);
          t2 = position.y;
          t4 = $.game.zoom;
          if (typeof t4 !== "number")
            throw $.iae(t4);
          t1.translate$2(context, t3, $.$add$ns(t2, 24 * t4));
          t1.rotate$1(context, this.targetAngle);
          t4 = $.engine.images;
          t4 = t4.$index(t4, "cannongun");
          t2 = $.game.zoom;
          if (typeof t2 !== "number")
            throw $.iae(t2);
          t3 = this.scale;
          t5 = 48 * t2 * t3;
          t1.drawImageScaled$5(context, t4, -24 * t2 * t3, -24 * t2 * t3, t5, t5);
          t1.restore$0(context);
        }
      }
      if (this.needsEnergy) {
        t1 = $.getInterceptor$x(context);
        t1.set$fillStyle(context, "#f00");
        t2 = $.$add$ns(position.x, 2);
        t3 = $.$add$ns(position.y, 1);
        t4 = $.game.zoom;
        if (typeof t4 !== "number")
          throw $.iae(t4);
        t1.fillRect$4(context, t2, t3, 44 * t4 / this.maxEnergy * this.energy, 3);
      }
      if (this.health < this.maxHealth) {
        t1 = $.getInterceptor$x(context);
        t1.set$fillStyle(context, "#0f0");
        t2 = $.$add$ns(position.x, 2);
        t3 = position.y;
        t4 = $.game;
        t5 = t4.tileSize;
        t4 = t4.zoom;
        if (typeof t4 !== "number")
          throw $.iae(t4);
        t4 = $.$sub$n($.$add$ns(t3, t5 * t4 * this.size), 3);
        t5 = $.game;
        t3 = t5.tileSize;
        t5 = t5.zoom;
        if (typeof t5 !== "number")
          throw $.iae(t5);
        t1.fillRect$4(context, t2, t4, (t3 * t5 * this.size - 8) / this.maxHealth * this.health, 3);
      }
      if (!this.active) {
        t1 = $.getInterceptor$x(context);
        t1.set$strokeStyle(context, "#F00");
        t1.set$lineWidth(context, 2);
        t1.beginPath$0(context);
        t1.arc$6(context, center.x, center.y, $.game.tileSize / 2 * this.size, 0, 6.283185307179586, true);
        t1.closePath$0(context);
        t1.stroke$0(context);
        t1.beginPath$0(context);
        t1.moveTo$2(context, position.x, $.$add$ns(position.y, $.game.tileSize * this.size));
        t1.lineTo$2(context, $.$add$ns(position.x, $.game.tileSize * this.size), position.y);
        t1.stroke$0(context);
      }
    }
    if (this.operating)
      if ($.$eq(this.imageID, "cannon")) {
        targetPosition = $.Helper_tiled2screen(this.weaponTargetPosition);
        t1 = $.getInterceptor$x(context);
        t1.set$strokeStyle(context, "#f00");
        t1.beginPath$0(context);
        t1.moveTo$2(context, center.x, center.y);
        t1.lineTo$2(context, targetPosition.x, targetPosition.y);
        t1.stroke$0(context);
      } else if ($.$eq(this.imageID, "analyzer")) {
        targetPosition = $.Helper_tiled2screen(this.weaponTargetPosition);
        t1 = $.getInterceptor$x(context);
        t1.set$strokeStyle(context, "#00f");
        t1.set$lineWidth(context, 4);
        t1.beginPath$0(context);
        t1.moveTo$2(context, center.x, center.y);
        t1.lineTo$2(context, targetPosition.x, targetPosition.y);
        t1.stroke$0(context);
        t1.set$strokeStyle(context, "#fff");
        t1.set$lineWidth(context, 2);
        t1.beginPath$0(context);
        t1.moveTo$2(context, center.x, center.y);
        t1.lineTo$2(context, targetPosition.x, targetPosition.y);
        t1.stroke$0(context);
      } else if ($.$eq(this.imageID, "beam")) {
        targetPosition = $.Helper_real2screen(this.weaponTargetPosition);
        t1 = $.getInterceptor$x(context);
        t1.set$strokeStyle(context, "#f00");
        t1.set$lineWidth(context, 4);
        t1.beginPath$0(context);
        t1.moveTo$2(context, center.x, center.y);
        t1.lineTo$2(context, targetPosition.x, targetPosition.y);
        t1.stroke$0(context);
        t1.set$strokeStyle(context, "#fff");
        t1.set$lineWidth(context, 2);
        t1.beginPath$0(context);
        t1.moveTo$2(context, center.x, center.y);
        t1.lineTo$2(context, targetPosition.x, targetPosition.y);
        t1.stroke$0(context);
      } else if ($.$eq(this.imageID, "shield")) {
        t1 = $.engine.images;
        t1 = t1.$index(t1, "forcefield");
        t2 = center.x;
        t3 = $.game.zoom;
        if (typeof t3 !== "number")
          throw $.iae(t3);
        t3 = $.$sub$n(t2, 168 * t3);
        t2 = center.y;
        t4 = $.game.zoom;
        if (typeof t4 !== "number")
          throw $.iae(t4);
        t4 = $.$sub$n(t2, 168 * t4);
        t2 = $.game.zoom;
        if (typeof t2 !== "number")
          throw $.iae(t2);
        $.drawImageScaled$5$x(context, t1, t3, t4, 336 * t2, 336 * t2);
      } else if ($.$eq(this.imageID, "terp")) {
        targetPosition = $.Helper_tiled2screen(this.weaponTargetPosition);
        t1 = $.getInterceptor$x(context);
        t1.set$strokeStyle(context, "#f00");
        t1.set$lineWidth(context, 4);
        t1.beginPath$0(context);
        t1.moveTo$2(context, center.x, center.y);
        t1.lineTo$2(context, $.$add$ns(targetPosition.x, 8), $.$add$ns(targetPosition.y, 8));
        t1.stroke$0(context);
        t1.set$strokeStyle(context, "#fff");
        t1.set$lineWidth(context, 2);
        t1.beginPath$0(context);
        t1.moveTo$2(context, center.x, center.y);
        t1.lineTo$2(context, $.$add$ns(targetPosition.x, 8), $.$add$ns(targetPosition.y, 8));
        t1.stroke$0(context);
      }
  }
},

Emitter: {"": "Object;position>,imageID<,strength,building@",
  getCenter$0: function() {
    return new $.Vector($.$add$ns($.$mul$n(this.position.x, $.game.tileSize), 24), $.$add$ns($.$mul$n(this.position.y, $.game.tileSize), 24));
  },
  spawn$0: function() {
    var t1, t2;
    if (this.building == null) {
      t1 = $.game.world.tiles;
      t2 = $.$add$ns(this.position.x, 1);
      if (t2 >>> 0 !== t2 || t2 >= t1.length)
        throw $.ioore(t2);
      t2 = $.$index$asx($.$index$asx(t1[t2], $.$add$ns(this.position.y, 1)), 0);
      t2.set$creep($.$add$ns(t2.get$creep(), this.strength));
    }
  },
  draw$0: function() {
    var position, t1, t2, t3, t4, t5;
    position = $.Helper_tiled2screen(this.position);
    t1 = $.engine;
    t2 = $.game.zoom;
    if (typeof t2 !== "number")
      throw $.iae(t2);
    if (t1.isVisible$2(position, new $.Vector(48 * t2, 48 * t2))) {
      t1 = $.engine.canvas;
      t1 = t1.$index(t1, "buffer").get$context();
      t2 = $.engine.images;
      t2 = t2.$index(t2, this.imageID);
      t3 = position.x;
      t4 = position.y;
      t5 = $.game.zoom;
      if (typeof t5 !== "number")
        throw $.iae(t5);
      $.drawImageScaled$5$x(t1, t2, t3, t4, 48 * t5, 48 * t5);
    }
  },
  Emitter$2: function(position, strength) {
    this.imageID = "emitter";
  }
},

Sporetower: {"": "Object;position>,imageID<,health@,sporeTimer",
  getCenter$0: function() {
    return new $.Vector($.$add$ns($.$mul$n(this.position.x, $.game.tileSize), 24), $.$add$ns($.$mul$n(this.position.y, $.game.tileSize), 24));
  },
  update$0: function() {
    this.sporeTimer = this.sporeTimer - 1;
    if (this.sporeTimer <= 0) {
      var max = 5001;
      this.sporeTimer = (Math.random() * max >>> 0) + 7500;
      this.spawn$0();
    }
  },
  spawn$0: function() {
    var t1, max, t2, target, spore;
    do {
      t1 = $.game.buildings;
      max = t1.length - 0 + 1;
      if (max > 4294967295)
        max = 4294967295;
      t2 = (Math.random() * max >>> 0) + 0;
      if (t2 < 0 || t2 >= t1.length)
        throw $.ioore(t2);
      target = t1[t2];
    } while (!target.get$built());
    spore = new $.Spore(new $.Vector($.$add$ns($.$mul$n(this.position.x, $.game.tileSize), 24), $.$add$ns($.$mul$n(this.position.y, $.game.tileSize), 24)), target.getCenter$0(), new $.Vector(0, 0), null, false, 0, 100, 0);
    spore.imageID = "spore";
    spore.init$0();
    $.game.spores.push(spore);
  },
  draw$0: function() {
    var position, t1, t2, t3, t4, t5;
    position = $.Helper_tiled2screen(this.position);
    t1 = $.engine;
    t2 = $.game.zoom;
    if (typeof t2 !== "number")
      throw $.iae(t2);
    if (t1.isVisible$2(position, new $.Vector(48 * t2, 48 * t2))) {
      t1 = $.engine.canvas;
      t1 = t1.$index(t1, "buffer").get$context();
      t2 = $.engine.images;
      t2 = t2.$index(t2, this.imageID);
      t3 = position.x;
      t4 = position.y;
      t5 = $.game.zoom;
      if (typeof t5 !== "number")
        throw $.iae(t5);
      $.drawImageScaled$5$x(t1, t2, t3, t4, 48 * t5, 48 * t5);
    }
  },
  Sporetower$1: function(position) {
    this.imageID = "sporetower";
  }
},

Smoke: {"": "Object;position>,frame@,imageID<",
  draw$0: function() {
    var position, t1, t2, t3, t4, t5, truncated, t6, t7;
    position = $.Helper_real2screen(this.position);
    t1 = $.engine;
    t2 = $.game.zoom;
    if (typeof t2 !== "number")
      throw $.iae(t2);
    if (t1.isVisible$2(position, new $.Vector(48 * t2, 48 * t2))) {
      t1 = $.engine.canvas;
      t1 = t1.$index(t1, "buffer").get$context();
      t2 = $.engine.images;
      t2 = t2.$index(t2, this.imageID);
      t3 = this.frame;
      t4 = $.getInterceptor$n(t3);
      t5 = t4.$mod(t3, 8);
      t3 = Math.floor(t4.$div(t3, 8));
      if (isNaN(t3))
        $.throwExpression(new $.UnsupportedError("NaN"));
      if (t3 == Infinity || t3 == -Infinity)
        $.throwExpression(new $.UnsupportedError("Infinity"));
      truncated = t3 < 0 ? Math.ceil(t3) : Math.floor(t3);
      t3 = truncated == -0.0 ? 0 : truncated;
      t4 = position.x;
      t6 = $.game.zoom;
      if (typeof t6 !== "number")
        throw $.iae(t6);
      t6 = $.$sub$n(t4, 24 * t6);
      t4 = position.y;
      t7 = $.game.zoom;
      if (typeof t7 !== "number")
        throw $.iae(t7);
      t7 = $.$sub$n(t4, 24 * t7);
      t4 = $.game.zoom;
      if (typeof t4 !== "number")
        throw $.iae(t4);
      $.drawImageScaledFromSource$9$x(t1, t2, t5 * 128, t3 * 128, 128, 128, t6, t7, 48 * t4, 48 * t4);
    }
  },
  Smoke$1: function(position) {
    this.position = new $.Vector(position.x, position.y);
    this.frame = 0;
    this.imageID = "smoke";
  }
},

Explosion: {"": "Object;position>,frame@,imageID<",
  draw$0: function() {
    var position, t1, t2, t3, t4, t5, truncated, t6, t7;
    position = $.Helper_real2screen(this.position);
    t1 = $.engine;
    t2 = $.game.zoom;
    if (typeof t2 !== "number")
      throw $.iae(t2);
    if (t1.isVisible$2(position, new $.Vector(64 * t2, 64 * t2))) {
      t1 = $.engine.canvas;
      t1 = t1.$index(t1, "buffer").get$context();
      t2 = $.engine.images;
      t2 = t2.$index(t2, this.imageID);
      t3 = this.frame;
      t4 = $.getInterceptor$n(t3);
      t5 = t4.$mod(t3, 8);
      t3 = Math.floor(t4.$div(t3, 8));
      if (isNaN(t3))
        $.throwExpression(new $.UnsupportedError("NaN"));
      if (t3 == Infinity || t3 == -Infinity)
        $.throwExpression(new $.UnsupportedError("Infinity"));
      truncated = t3 < 0 ? Math.ceil(t3) : Math.floor(t3);
      t3 = truncated == -0.0 ? 0 : truncated;
      t4 = position.x;
      t6 = $.game.zoom;
      if (typeof t6 !== "number")
        throw $.iae(t6);
      t6 = $.$sub$n(t4, 32 * t6);
      t4 = position.y;
      t7 = $.game.zoom;
      if (typeof t7 !== "number")
        throw $.iae(t7);
      t7 = $.$sub$n(t4, 32 * t7);
      t4 = $.game.zoom;
      if (typeof t4 !== "number")
        throw $.iae(t4);
      $.drawImageScaledFromSource$9$x(t1, t2, t5 * 64, t3 * 64, 64, 64, t6, t7, 64 * t4, 64 * t4);
    }
  },
  Explosion$1: function(position) {
    this.position = new $.Vector(position.x, position.y);
    this.frame = 0;
    this.imageID = "explosion";
  }
},

Tile: {"": "Object;index*,creep@,newcreep@,full@,collector@",
  Tile$0: function() {
    this.index = -1;
    this.full = false;
    this.creep = 0;
    this.newcreep = 0;
    this.collector = null;
  }
},

Vector: {"": "Object;x*,y*",
  $add: function(_, other) {
    var t1 = $.getInterceptor$x(other);
    return new $.Vector($.$add$ns(this.x, t1.get$x(other)), $.$add$ns(this.y, t1.get$y(other)));
  }
},

Vector3: {"": "Object;x*,y*,z>",
  $add: function(_, other) {
    var t1 = $.getInterceptor$x(other);
    return new $.Vector3($.$add$ns(this.x, t1.get$x(other)), $.$add$ns(this.y, t1.get$y(other)), $.$add$ns(this.z, t1.get$z(other)));
  }
},

Route: {"": "Object;distanceTravelled<,distanceRemaining<,nodes>,remove*",
  remove$0: function($receiver) {
    return this.remove.call$0();
  }
},

Canvas: {"": "Object;element<,context<,top*,left*,bottom*,right*",
  clear$0: function(_) {
    var t1, t2;
    t1 = this.element;
    t2 = $.getInterceptor$x(t1);
    $.clearRect$4$x(this.context, 0, 0, t2.get$width(t1), t2.get$height(t1));
  },
  updateRect$2: function(width, height) {
    var t1, t2, t3, t4, t5;
    t1 = this.element;
    t2 = $.getInterceptor$x(t1);
    t2.set$width(t1, width);
    t2.set$height(t1, height);
    t1.get$offset;
    this.top = new $.Rect(t1.offsetLeft, t1.offsetTop, t1.offsetWidth, t1.offsetHeight).top;
    t1.get$offset;
    this.left = new $.Rect(t1.offsetLeft, t1.offsetTop, t1.offsetWidth, t1.offsetHeight).left;
    t1.get$offset;
    t2 = t1.offsetLeft;
    t3 = t1.offsetTop;
    t4 = t1.offsetWidth;
    t5 = t1.offsetHeight;
    this.bottom = $.$add$ns(new $.Rect(t2, t3, t4, t5).top, new $.Rect(t2, t3, t4, t5).height);
    t1.get$offset;
    t5 = t1.offsetLeft;
    t4 = t1.offsetTop;
    t3 = t1.offsetWidth;
    t1 = t1.offsetHeight;
    this.right = $.$add$ns(new $.Rect(t5, t4, t3, t1).left, new $.Rect(t5, t4, t3, t1).width);
  },
  Canvas$3: function(element, width, height) {
    var t1, t2;
    this.updateRect$2(width, height);
    t1 = this.element;
    t2 = t1.style;
    t2.set$position;
    $.setProperty$3$x(t2, "position", "absolute", "");
    this.context = $.getContext$1$x(t1, "2d");
  }
},

Mouse: {"": "Object;x*,y*,active@,dragStart,dragEnd"},

Engine: {"": "Object;FPS,delta,fps_delta,fps_frames,fps_totalTime,fps_updateTime,fps_updateFrames,animationRequest,width*,height*,halfWidth,halfHeight,fps_lastTime,imageSrcs,mouse,mouseGUI,canvas,sounds,images,resizeTimer",
  init$0: function() {
    var width, height, t1, truncated, t2, t3, t4, i, t5, mainCanvas, guiCanvas;
    width = window.innerWidth;
    height = window.innerHeight;
    this.width = width;
    this.height = height;
    t1 = Math.floor($.$div$n(width, 2));
    if (isNaN(t1))
      $.throwExpression(new $.UnsupportedError("NaN"));
    if (t1 == Infinity || t1 == -Infinity)
      $.throwExpression(new $.UnsupportedError("Infinity"));
    truncated = t1 < 0 ? Math.ceil(t1) : Math.floor(t1);
    this.halfWidth = truncated == -0.0 ? 0 : truncated;
    t1 = Math.floor($.$div$n(height, 2));
    if (isNaN(t1))
      $.throwExpression(new $.UnsupportedError("NaN"));
    if (t1 == Infinity || t1 == -Infinity)
      $.throwExpression(new $.UnsupportedError("Infinity"));
    truncated = t1 < 0 ? Math.ceil(t1) : Math.floor(t1);
    this.halfHeight = truncated == -0.0 ? 0 : truncated;
    t1 = this.canvas;
    t2 = new $.Canvas($.CanvasElement_CanvasElement(null, null), null, null, null, null, null);
    t2.updateRect$2(width, height);
    t3 = t2.element;
    t4 = t3.style;
    t4.set$position;
    $.setProperty$3$x(t4, "position", "absolute", "");
    t2.context = $.getContext$1$x(t3, "2d");
    t1.$indexSet(t1, "main", t2);
    t2 = $.get$children$x(document.querySelector("#canvasContainer"));
    t1 = this.canvas;
    t2.add$1(t2, t1.$index(t1, "main").get$element());
    t1 = this.canvas;
    t1 = t1.$index(t1, "main");
    t2 = this.canvas;
    $.set$top$x(t1, t2.$index(t2, "main").get$element().offsetTop);
    t2 = this.canvas;
    t2 = t2.$index(t2, "main");
    t1 = this.canvas;
    $.set$left$x(t2, t1.$index(t1, "main").get$element().offsetLeft);
    t1 = this.canvas;
    t1 = t1.$index(t1, "main");
    t2 = this.canvas;
    t2 = t2.$index(t2, "main").get$element();
    t2.get$offset;
    t2 = new $.Rect(t2.offsetLeft, t2.offsetTop, t2.offsetWidth, t2.offsetHeight);
    $.set$right$x(t1, $.$add$ns(t2.left, t2.width));
    t2 = this.canvas;
    t2 = t2.$index(t2, "main");
    t1 = this.canvas;
    t1 = t1.$index(t1, "main").get$element();
    t1.get$offset;
    t1 = new $.Rect(t1.offsetLeft, t1.offsetTop, t1.offsetWidth, t1.offsetHeight);
    $.set$bottom$x(t2, $.$add$ns(t1.top, t1.height));
    t1 = this.canvas;
    t1 = t1.$index(t1, "main").get$element().style;
    t1.set$zIndex;
    $.setProperty$3$x(t1, "z-index", "1", "");
    t1 = this.canvas;
    t2 = new $.Canvas($.CanvasElement_CanvasElement(null, null), null, null, null, null, null);
    t2.updateRect$2(width, height);
    t3 = t2.element;
    t4 = t3.style;
    t4.set$position;
    $.setProperty$3$x(t4, "position", "absolute", "");
    t2.context = $.getContext$1$x(t3, "2d");
    t1.$indexSet(t1, "buffer", t2);
    t2 = this.canvas;
    t1 = new $.Canvas($.CanvasElement_CanvasElement(null, null), null, null, null, null, null);
    t1.updateRect$2(780, 110);
    t3 = t1.element;
    t4 = t3.style;
    t4.set$position;
    $.setProperty$3$x(t4, "position", "absolute", "");
    t1.context = $.getContext$1$x(t3, "2d");
    t2.$indexSet(t2, "gui", t1);
    t1 = $.get$children$x(document.querySelector("#gui"));
    t2 = this.canvas;
    t1.add$1(t1, t2.$index(t2, "gui").get$element());
    t2 = this.canvas;
    t2 = t2.$index(t2, "gui");
    t1 = this.canvas;
    $.set$top$x(t2, t1.$index(t1, "gui").get$element().offsetTop);
    t1 = this.canvas;
    t1 = t1.$index(t1, "gui");
    t2 = this.canvas;
    $.set$left$x(t1, t2.$index(t2, "gui").get$element().offsetLeft);
    for (i = 0; t1 = this.canvas, i < 10; ++i) {
      t2 = "level" + i;
      t3 = new $.Canvas($.CanvasElement_CanvasElement(null, null), null, null, null, null, null);
      t3.updateRect$2(2048, 2048);
      t4 = t3.element;
      t5 = t4.style;
      t5.set$position;
      $.setProperty$3$x(t5, "position", "absolute", "");
      t3.context = $.getContext$1$x(t4, "2d");
      t1.$indexSet(t1, t2, t3);
    }
    t2 = new $.Canvas($.CanvasElement_CanvasElement(null, null), null, null, null, null, null);
    t2.updateRect$2(2048, 2048);
    t3 = t2.element;
    t4 = t3.style;
    t4.set$position;
    $.setProperty$3$x(t4, "position", "absolute", "");
    t2.context = $.getContext$1$x(t3, "2d");
    t1.$indexSet(t1, "levelbuffer", t2);
    t2 = this.canvas;
    t1 = new $.Canvas($.CanvasElement_CanvasElement(null, null), null, null, null, null, null);
    t1.updateRect$2(width, height);
    t3 = t1.element;
    t4 = t3.style;
    t4.set$position;
    $.setProperty$3$x(t4, "position", "absolute", "");
    t1.context = $.getContext$1$x(t3, "2d");
    t2.$indexSet(t2, "levelfinal", t1);
    t1 = $.get$children$x(document.querySelector("#canvasContainer"));
    t2 = this.canvas;
    t1.add$1(t1, t2.$index(t2, "levelfinal").get$element());
    t2 = this.canvas;
    t1 = new $.Canvas($.CanvasElement_CanvasElement(null, null), null, null, null, null, null);
    t1.updateRect$2(width, height);
    t3 = t1.element;
    t4 = t3.style;
    t4.set$position;
    $.setProperty$3$x(t4, "position", "absolute", "");
    t1.context = $.getContext$1$x(t3, "2d");
    t2.$indexSet(t2, "collection", t1);
    t1 = $.get$children$x(document.querySelector("#canvasContainer"));
    t2 = this.canvas;
    t1.add$1(t1, t2.$index(t2, "collection").get$element());
    t2 = this.canvas;
    t1 = new $.Canvas($.CanvasElement_CanvasElement(null, null), null, null, null, null, null);
    t1.updateRect$2(width, height);
    t3 = t1.element;
    t4 = t3.style;
    t4.set$position;
    $.setProperty$3$x(t4, "position", "absolute", "");
    t1.context = $.getContext$1$x(t3, "2d");
    t2.$indexSet(t2, "creeper", t1);
    t1 = $.get$children$x(document.querySelector("#canvasContainer"));
    t2 = this.canvas;
    t1.add$1(t1, t2.$index(t2, "creeper").get$element());
    this.addSound$2("shot", "wav");
    this.addSound$2("click", "wav");
    this.addSound$2("explosion", "wav");
    this.addSound$2("failure", "wav");
    this.addSound$2("energy", "wav");
    this.addSound$2("laser", "wav");
    this.imageSrcs = ["analyzer", "numbers", "level0", "level1", "level2", "level3", "level4", "level5", "level6", "level7", "level8", "level9", "borders", "mask", "cannon", "cannongun", "base", "collector", "reactor", "storage", "terp", "packet_collection", "packet_energy", "packet_health", "relay", "emitter", "creep", "mortar", "shell", "beam", "spore", "bomber", "bombership", "smoke", "explosion", "targetcursor", "sporetower", "forcefield", "shield"];
    t2 = document.querySelector("#terraform");
    t2.get$onClick;
    t2 = $.EventStreamProvider_click.forTarget$1(t2);
    t2 = new $._EventStreamSubscription(0, t2._target, t2._eventType, new $.Engine_init_closure(), t2._useCapture);
    t1 = t2._onData;
    if (t1 != null && !t2.get$isPaused())
      $.$$dom_addEventListener$3$x(t2._target, t2._eventType, t1, t2._useCapture);
    t1 = document.querySelector("#restart");
    t1.get$onClick;
    t1 = $.EventStreamProvider_click.forTarget$1(t1);
    t1 = new $._EventStreamSubscription(0, t1._target, t1._eventType, new $.Engine_init_closure0(), t1._useCapture);
    t2 = t1._onData;
    if (t2 != null && !t1.get$isPaused())
      $.$$dom_addEventListener$3$x(t1._target, t1._eventType, t2, t1._useCapture);
    t1 = document.querySelector("#deactivate");
    t1.get$onClick;
    t1 = $.EventStreamProvider_click.forTarget$1(t1);
    t1 = new $._EventStreamSubscription(0, t1._target, t1._eventType, new $.Engine_init_closure1(), t1._useCapture);
    t2 = t1._onData;
    if (t2 != null && !t1.get$isPaused())
      $.$$dom_addEventListener$3$x(t1._target, t1._eventType, t2, t1._useCapture);
    t1 = document.querySelector("#activate");
    t1.get$onClick;
    t1 = $.EventStreamProvider_click.forTarget$1(t1);
    t1 = new $._EventStreamSubscription(0, t1._target, t1._eventType, new $.Engine_init_closure2(), t1._useCapture);
    t2 = t1._onData;
    if (t2 != null && !t1.get$isPaused())
      $.$$dom_addEventListener$3$x(t1._target, t1._eventType, t2, t1._useCapture);
    t1 = this.canvas;
    mainCanvas = t1.$index(t1, "main").get$element();
    t1 = this.canvas;
    guiCanvas = t1.$index(t1, "gui").get$element();
    mainCanvas.get$onMouseMove;
    t1 = $.EventStreamProvider_mousemove.forTarget$1(mainCanvas);
    t1 = new $._EventStreamSubscription(0, t1._target, t1._eventType, new $.Engine_init_closure3(), t1._useCapture);
    t2 = t1._onData;
    if (t2 != null && !t1.get$isPaused())
      $.$$dom_addEventListener$3$x(t1._target, t1._eventType, t2, t1._useCapture);
    mainCanvas.get$onDoubleClick;
    t1 = $.EventStreamProvider_dblclick.forTarget$1(mainCanvas);
    t1 = new $._EventStreamSubscription(0, t1._target, t1._eventType, new $.Engine_init_closure4(), t1._useCapture);
    t2 = t1._onData;
    if (t2 != null && !t1.get$isPaused())
      $.$$dom_addEventListener$3$x(t1._target, t1._eventType, t2, t1._useCapture);
    t1 = $.getInterceptor$x(mainCanvas);
    t2 = t1.get$onMouseDown(mainCanvas);
    t2 = new $._EventStreamSubscription(0, t2._target, t2._eventType, new $.Engine_init_closure5(), t2._useCapture);
    t3 = t2._onData;
    if (t3 != null && !t2.get$isPaused())
      $.$$dom_addEventListener$3$x(t2._target, t2._eventType, t3, t2._useCapture);
    t1 = t1.get$onMouseUp(mainCanvas);
    t1 = new $._EventStreamSubscription(0, t1._target, t1._eventType, new $.Engine_init_closure6(), t1._useCapture);
    t2 = t1._onData;
    if (t2 != null && !t1.get$isPaused())
      $.$$dom_addEventListener$3$x(t1._target, t1._eventType, t2, t1._useCapture);
    mainCanvas.get$onMouseWheel;
    t1 = $._CustomEventStreamProvider__determineMouseWheelEventType.forTarget$1(mainCanvas);
    t1 = new $._EventStreamSubscription(0, t1._target, t1._eventType, new $.Engine_init_closure7(), t1._useCapture);
    t2 = t1._onData;
    if (t2 != null && !t1.get$isPaused())
      $.$$dom_addEventListener$3$x(t1._target, t1._eventType, t2, t1._useCapture);
    guiCanvas.get$onMouseMove;
    t1 = $.EventStreamProvider_mousemove.forTarget$1(guiCanvas);
    t1 = new $._EventStreamSubscription(0, t1._target, t1._eventType, new $.Engine_init_closure8(), t1._useCapture);
    t2 = t1._onData;
    if (t2 != null && !t1.get$isPaused())
      $.$$dom_addEventListener$3$x(t1._target, t1._eventType, t2, t1._useCapture);
    guiCanvas.get$onClick;
    t1 = $.EventStreamProvider_click.forTarget$1(guiCanvas);
    t1 = new $._EventStreamSubscription(0, t1._target, t1._eventType, new $.Engine_init_closure9(), t1._useCapture);
    t2 = t1._onData;
    if (t2 != null && !t1.get$isPaused())
      $.$$dom_addEventListener$3$x(t1._target, t1._eventType, t2, t1._useCapture);
    t1 = document;
    t2 = $.HtmlDocument_methods.get$onKeyDown(t1);
    t2 = new $._EventStreamSubscription(0, t2._target, t2._eventType, new $.Engine_init_closure10(), t2._useCapture);
    t3 = t2._onData;
    if (t3 != null && !t2.get$isPaused())
      $.$$dom_addEventListener$3$x(t2._target, t2._eventType, t3, t2._useCapture);
    t1 = $.HtmlDocument_methods.get$onKeyUp(t1);
    t1 = new $._EventStreamSubscription(0, t1._target, t1._eventType, new $.Engine_init_closure11(), t1._useCapture);
    t2 = t1._onData;
    if (t2 != null && !t1.get$isPaused())
      $.$$dom_addEventListener$3$x(t1._target, t1._eventType, t2, t1._useCapture);
    t1 = $.EventStreamProvider_contextmenu.forTarget$1(document);
    t1 = new $._EventStreamSubscription(0, t1._target, t1._eventType, new $.Engine_init_closure12(), t1._useCapture);
    t2 = t1._onData;
    if (t2 != null && !t1.get$isPaused())
      $.$$dom_addEventListener$3$x(t1._target, t1._eventType, t2, t1._useCapture);
    t1 = $.Window_methods.get$onResize(window);
    t1 = new $._EventStreamSubscription(0, t1._target, t1._eventType, new $.Engine_init_closure13(), t1._useCapture);
    t2 = t1._onData;
    if (t2 != null && !t1.get$isPaused())
      $.$$dom_addEventListener$3$x(t1._target, t1._eventType, t2, t1._useCapture);
  },
  loadImages$1: function(callback) {
    var t1, numImages, i, t2, t3;
    t1 = {};
    t1.loadedImages_0 = 0;
    numImages = this.imageSrcs.length;
    for (i = 0; t2 = this.imageSrcs, i < t2.length; ++i) {
      t3 = this.images;
      t2 = t2[i];
      t3.$indexSet(t3, t2, $.ImageElement_ImageElement(null, $.JSString_methods.$add($.JSString_methods.$add("images/", t2), ".png"), null));
      t2 = this.images;
      t3 = this.imageSrcs;
      if (i >= t3.length)
        throw $.ioore(i);
      t3 = $.get$onLoad$x(t2.$index(t2, t3[i]));
      t3 = new $._EventStreamSubscription(0, t3._target, t3._eventType, new $.Engine_loadImages_closure(t1, callback, numImages), t3._useCapture);
      t2 = t3._onData;
      if (t2 != null && !t3.get$isPaused())
        $.$$dom_addEventListener$3$x(t3._target, t3._eventType, t2, t3._useCapture);
    }
  },
  addSound$2: function($name, type) {
    var t1, i;
    t1 = this.sounds;
    t1.$indexSet(t1, $name, $.List_List($));
    for (i = 0; i < 5; ++i) {
      t1 = this.sounds;
      $.add$1$ax(t1.$index(t1, $name), $.AudioElement_AudioElement($.JSString_methods.$add($.JSString_methods.$add($.JSString_methods.$add("sounds/", $name), "."), type)));
    }
  },
  playSound$2: function($name, position) {
    var t1, t2, t3, t4, truncated, t5, t6, screenCenter, distance, volume, i;
    t1 = $.getInterceptor(position);
    if (position != null) {
      t2 = this.halfWidth;
      t3 = $.game;
      t4 = t3.tileSize;
      t3 = t3.zoom;
      if (typeof t3 !== "number")
        throw $.iae(t3);
      if (typeof t2 !== "number")
        throw t2.$div();
      t3 = Math.floor(t2 / (t4 * t3));
      if (isNaN(t3))
        $.throwExpression(new $.UnsupportedError("NaN"));
      if (t3 == Infinity || t3 == -Infinity)
        $.throwExpression(new $.UnsupportedError("Infinity"));
      truncated = t3 < 0 ? Math.ceil(t3) : Math.floor(t3);
      t2 = truncated == -0.0 ? 0 : truncated;
      t3 = $.game;
      t4 = t3.scroll.x;
      if (typeof t4 !== "number")
        throw $.iae(t4);
      t5 = this.halfHeight;
      t6 = t3.tileSize;
      t3 = t3.zoom;
      if (typeof t3 !== "number")
        throw $.iae(t3);
      if (typeof t5 !== "number")
        throw t5.$div();
      t3 = Math.floor(t5 / (t6 * t3));
      if (isNaN(t3))
        $.throwExpression(new $.UnsupportedError("NaN"));
      if (t3 == Infinity || t3 == -Infinity)
        $.throwExpression(new $.UnsupportedError("Infinity"));
      truncated = t3 < 0 ? Math.ceil(t3) : Math.floor(t3);
      t3 = truncated == -0.0 ? 0 : truncated;
      t5 = $.game.scroll.y;
      if (typeof t5 !== "number")
        throw $.iae(t5);
      screenCenter = new $.Vector(t2 + t4, t3 + t5);
      t5 = screenCenter.x;
      if (typeof t5 !== "number")
        return this.playSound$2$bailout(1, $name, position, t5, screenCenter, t1);
      t3 = t1.get$x(position);
      if (typeof t3 !== "number")
        return this.playSound$2$bailout(2, $name, position, t5, screenCenter, t1, t3);
      t3 = t5 - t3;
      t2 = Math.pow(t3, 2);
      t3 = screenCenter.y;
      if (typeof t3 !== "number")
        return this.playSound$2$bailout(3, $name, position, 0, 0, t1, t3, t2);
      t1 = t1.get$y(position);
      if (typeof t1 !== "number")
        return this.playSound$2$bailout(4, $name, 0, 0, 0, t1, t3, t2);
      t1 = t3 - t1;
      t1 = t2 + Math.pow(t1, 2);
      distance = Math.sqrt(t1);
      t1 = $.game.zoom;
      if (typeof t1 !== "number")
        return this.playSound$2$bailout(5, $name, 0, 0, 0, t1, 0, 0, distance);
      t2 = distance / 20;
      volume = $.JSNumber_methods.clamp$2(t1 / Math.pow(t2, 2), 0, 1);
    } else
      volume = 1;
    for (i = 0; i < 5; ++i) {
      t1 = this.sounds;
      t1 = t1.$index(t1, $name);
      if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !$.isJsIndexable(t1, t1[$.dispatchPropertyName])))
        return this.playSound$2$bailout(6, $name, 0, 0, 0, t1, 0, 0, 0, i, volume);
      if (i >= t1.length)
        throw $.ioore(i);
      if ($.get$ended$x(t1[i]) !== true) {
        t1 = this.sounds;
        t1 = t1.$index(t1, $name);
        if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !$.isJsIndexable(t1, t1[$.dispatchPropertyName])))
          return this.playSound$2$bailout(7, $name, 0, 0, 0, t1, 0, 0, 0, i, volume);
        if (i >= t1.length)
          throw $.ioore(i);
        t1 = $.get$currentTime$x(t1[i]) === 0;
      } else
        t1 = true;
      if (t1) {
        t1 = this.sounds;
        t1 = t1.$index(t1, $name);
        if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !$.isJsIndexable(t1, t1[$.dispatchPropertyName])))
          return this.playSound$2$bailout(8, $name, 0, 0, 0, t1, 0, 0, 0, i, volume);
        if (i >= t1.length)
          throw $.ioore(i);
        $.set$volume$x(t1[i], volume);
        t1 = this.sounds;
        t1 = t1.$index(t1, $name);
        if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !$.isJsIndexable(t1, t1[$.dispatchPropertyName])))
          return this.playSound$2$bailout(9, $name, 0, 0, 0, t1, 0, 0, 0, i, volume);
        if (i >= t1.length)
          throw $.ioore(i);
        $.play$0$x(t1[i]);
        return;
      }
    }
  },
  playSound$2$bailout: function(state0, $name, position, t5, screenCenter, t1, t3, t2, distance, i, volume) {
    switch (state0) {
      case 0:
        t1 = $.getInterceptor(position);
      default:
        if (state0 === 5 || state0 === 4 || state0 === 3 || state0 === 2 || state0 === 1 || state0 === 0 && position != null)
          switch (state0) {
            case 0:
              t2 = this.halfWidth;
              t3 = $.game;
              t4 = t3.tileSize;
              t3 = t3.zoom;
              if (typeof t3 !== "number")
                throw $.iae(t3);
              if (typeof t2 !== "number")
                throw t2.$div();
              t3 = Math.floor($.$div$n(t2, t4 * t3));
              if (isNaN(t3))
                $.throwExpression(new $.UnsupportedError("NaN"));
              if (t3 == Infinity || t3 == -Infinity)
                $.throwExpression(new $.UnsupportedError("Infinity"));
              truncated = t3 < 0 ? Math.ceil(t3) : Math.floor(t3);
              t2 = truncated == -0.0 ? 0 : truncated;
              t3 = $.game;
              t4 = t3.scroll.x;
              if (typeof t4 !== "number")
                throw $.iae(t4);
              t5 = this.halfHeight;
              t6 = t3.tileSize;
              t3 = t3.zoom;
              if (typeof t3 !== "number")
                throw $.iae(t3);
              if (typeof t5 !== "number")
                throw t5.$div();
              t3 = Math.floor($.$div$n(t5, t6 * t3));
              if (isNaN(t3))
                $.throwExpression(new $.UnsupportedError("NaN"));
              if (t3 == Infinity || t3 == -Infinity)
                $.throwExpression(new $.UnsupportedError("Infinity"));
              truncated = t3 < 0 ? Math.ceil(t3) : Math.floor(t3);
              t3 = truncated == -0.0 ? 0 : truncated;
              t5 = $.game.scroll.y;
              if (typeof t5 !== "number")
                throw $.iae(t5);
              screenCenter = new $.Vector(t2 + t4, t3 + t5);
              t5 = screenCenter.x;
            case 1:
              state0 = 0;
              t3 = t1.get$x(position);
            case 2:
              state0 = 0;
              t3 = $.$sub$n(t5, t3);
              if (typeof t3 !== "number")
                $.throwExpression(new $.ArgumentError(t3));
              t2 = Math.pow(t3, 2);
              t3 = screenCenter.y;
            case 3:
              state0 = 0;
              t1 = t1.get$y(position);
            case 4:
              state0 = 0;
              t1 = $.$sub$n(t3, t1);
              if (typeof t1 !== "number")
                $.throwExpression(new $.ArgumentError(t1));
              t1 = t2 + Math.pow(t1, 2);
              distance = Math.sqrt(t1);
              t1 = $.game.zoom;
            case 5:
              state0 = 0;
              t2 = distance / 20;
              volume = $.JSNumber_methods.clamp$2($.$div$n(t1, Math.pow(t2, 2)), 0, 1);
          }
        else
          volume = 1;
        i = 0;
      case 6:
      case 7:
      case 8:
      case 9:
        var t4, truncated, t6;
        L0:
          while (true)
            switch (state0) {
              case 0:
                if (!(i < 5))
                  break L0;
                t1 = this.sounds;
                t1 = t1.$index(t1, $name);
              case 6:
                state0 = 0;
              case 7:
                if (state0 === 7 || state0 === 0 && $.get$ended$x($.$index$asx(t1, i)) !== true)
                  switch (state0) {
                    case 0:
                      t1 = this.sounds;
                      t1 = t1.$index(t1, $name);
                    case 7:
                      state0 = 0;
                      t1 = $.get$currentTime$x($.$index$asx(t1, i)) === 0;
                  }
                else
                  t1 = true;
              default:
                if (state0 === 9 || state0 === 8 || state0 === 0 && t1)
                  switch (state0) {
                    case 0:
                      t1 = this.sounds;
                      t1 = t1.$index(t1, $name);
                    case 8:
                      state0 = 0;
                      $.set$volume$x($.$index$asx(t1, i), volume);
                      t1 = this.sounds;
                      t1 = t1.$index(t1, $name);
                    case 9:
                      state0 = 0;
                      $.play$0$x($.$index$asx(t1, i));
                      return;
                  }
                ++i;
            }
    }
  },
  playSound$1: function(name) {
    return this.playSound$2(name, null);
  },
  updateMouse$1: function(evt) {
    var t1, t2, t3, t4, position;
    t1 = this.mouse;
    t2 = $.getInterceptor$x(evt);
    t3 = t2.get$client(evt);
    t3 = t3.get$x(t3);
    t4 = this.canvas;
    t1.x = $.toInt$0$nx($.$sub$n(t3, $.get$left$x(t4.$index(t4, "main").get$element().getBoundingClientRect())));
    t2 = t2.get$client(evt);
    t2 = t2.get$y(t2);
    t4 = this.canvas;
    t1.y = $.toInt$0$nx($.$sub$n(t2, $.get$left$x(t4.$index(t4, "main").get$element().getBoundingClientRect())));
    t2 = $.game;
    if (t2 != null) {
      position = t2.getHoveredTilePosition$0();
      t1.dragEnd = new $.Vector(position.x, position.y);
    }
  },
  updateMouseGUI$1: function(evt) {
    var t1, t2, t3, t4;
    t1 = this.mouseGUI;
    t2 = $.getInterceptor$x(evt);
    t3 = t2.get$client(evt);
    t3 = t3.get$x(t3);
    t4 = this.canvas;
    t1.x = $.toInt$0$nx($.$sub$n(t3, $.get$left$x(t4.$index(t4, "gui").get$element().getBoundingClientRect())));
    t2 = t2.get$client(evt);
    t2 = t2.get$y(t2);
    t4 = this.canvas;
    t1.y = $.toInt$0$nx($.$sub$n(t2, $.get$top$x(t4.$index(t4, "gui").get$element().getBoundingClientRect())));
  },
  update$0: function() {
    var now, t1, t2;
    now = new $.DateTime(Date.now(), false);
    if (now.date === void 0)
      now.date = new Date(now.millisecondsSinceEpoch);
    now.date;
    if (now.isUtc === true) {
      if (now.date === void 0)
        now.date = new Date(now.millisecondsSinceEpoch);
      t1 = now.date.getUTCMilliseconds() + 0;
    } else {
      if (now.date === void 0)
        now.date = new Date(now.millisecondsSinceEpoch);
      t1 = now.date.getMilliseconds() + 0;
    }
    t2 = this.fps_lastTime;
    if (typeof t2 !== "number")
      throw $.iae(t2);
    this.fps_delta = t1 - t2;
    this.fps_lastTime = now;
    this.fps_totalTime = $.$add$ns(this.fps_totalTime, this.fps_delta);
    this.fps_frames = $.$add$ns(this.fps_frames, 1);
    this.fps_updateTime = $.$add$ns(this.fps_updateTime, this.fps_delta);
    this.fps_updateFrames = $.$add$ns(this.fps_updateFrames, 1);
    t1 = this.fps_updateTime;
    t2 = $.getInterceptor$n(t1);
    if (t2.$gt(t1, 1000)) {
      this.fps_updateTime = t2.$sub(t1, 1000);
      this.fps_updateFrames = 0;
    }
  },
  isVisible$2: function(position, size) {
    var r1_left, r1_top, r1_right, r1_bottom, t1, r2_left, r2_top, r2_right, r2_bottom;
    r1_left = position.x;
    r1_top = position.y;
    r1_right = $.$add$ns(r1_left, size.x);
    r1_bottom = $.$add$ns(position.y, size.y);
    t1 = this.canvas;
    r2_left = $.get$left$x(t1.$index(t1, "main"));
    t1 = this.canvas;
    r2_top = $.get$top$x(t1.$index(t1, "main"));
    t1 = this.canvas;
    r2_right = $.get$right$x(t1.$index(t1, "main"));
    t1 = this.canvas;
    r2_bottom = $.get$bottom$x(t1.$index(t1, "main"));
    return !($.$gt$n(r2_left, r1_right) || $.$lt$n(r2_right, r1_left) || $.$gt$n(r2_top, r1_bottom) || $.$lt$n(r2_bottom, r1_top));
  },
  Engine$0: function() {
    this.canvas = new $.HashMap(0, null, null, null, null);
    this.sounds = new $.HashMap(0, null, null, null, null);
    this.images = new $.HashMap(0, null, null, null, null);
    this.init$0();
  }
},

Engine_init_closure: {"": "Closure;",
  call$1: function($event) {
    return $.game.toggleTerraform$0();
  }
},

Engine_init_closure0: {"": "Closure;",
  call$1: function($event) {
    var t1 = $.game;
    t1.restart$0;
    t1.running.cancel$0();
    t1.reset$0(t1);
    t1.run$0();
    return;
  }
},

Engine_init_closure1: {"": "Closure;",
  call$1: function($event) {
    return $.game.deactivateBuilding$0();
  }
},

Engine_init_closure2: {"": "Closure;",
  call$1: function($event) {
    return $.game.activateBuilding$0();
  }
},

Engine_init_closure3: {"": "Closure;",
  call$1: function($event) {
    return $.onMouseMove($event);
  }
},

Engine_init_closure4: {"": "Closure;",
  call$1: function($event) {
    return $.onDoubleClick($event);
  }
},

Engine_init_closure5: {"": "Closure;",
  call$1: function($event) {
    return $.onMouseDown($event);
  }
},

Engine_init_closure6: {"": "Closure;",
  call$1: function($event) {
    return $.onMouseUp($event);
  }
},

Engine_init_closure7: {"": "Closure;",
  call$1: function($event) {
    var t1, t2, t3;
    t1 = $.getInterceptor$x($event);
    t2 = t1.get$deltaY($event);
    t3 = $.game;
    if (t2 > 0)
      t3.zoomOut$0();
    else
      t3.zoomIn$0();
    t1.preventDefault$0($event);
    return;
  }
},

Engine_init_closure8: {"": "Closure;",
  call$1: function($event) {
    return $.onMouseMoveGUI($event);
  }
},

Engine_init_closure9: {"": "Closure;",
  call$1: function($event) {
    return $.onClickGUI($event);
  }
},

Engine_init_closure10: {"": "Closure;",
  call$1: function($event) {
    return $.onKeyDown($event);
  }
},

Engine_init_closure11: {"": "Closure;",
  call$1: function($event) {
    return $.onKeyUp($event);
  }
},

Engine_init_closure12: {"": "Closure;",
  call$1: function($event) {
    return $.preventDefault$0$x($event);
  }
},

Engine_init_closure13: {"": "Closure;",
  call$1: function($event) {
    var t1, milliseconds;
    t1 = $.engine.resizeTimer;
    if (t1 != null)
      t1.cancel$0();
    t1 = $.engine;
    milliseconds = $.JSNumber_methods.$tdiv($.Duration$(0, 0, 0, 250, 0, 0)._duration, 1000);
    t1.resizeTimer = $.TimerImpl$(milliseconds < 0 ? 0 : milliseconds, $.doneResizing$closure);
    return;
  }
},

Engine_loadImages_closure: {"": "Closure;box_0,callback_1,numImages_2",
  call$1: function($event) {
    var t1, loadedImages;
    t1 = this.box_0;
    loadedImages = $.$add$ns(t1.loadedImages_0, 1);
    t1.loadedImages_0 = loadedImages;
    if ($.$eq(loadedImages, this.numImages_2))
      this.callback_1.call$0();
  }
},

World: {"": "Object;tiles,size>,terraform",
  World$1: function(seed) {
    var max, t1;
    max = 64;
    t1 = Math.random() * max >>> 0;
    max = 64;
    this.size = new $.Vector(t1 + 64, (Math.random() * max >>> 0) + 64);
  }
},

Game: {"": "Object;seed>,tileSize,currentEnergy,maxEnergy<,collection,activeSymbol,terraformingHeight,speed,zoom,creeperTimer,energyTimer@,spawnTimer,damageTimer,smokeTimer,explosionTimer,shieldTimer,packetSpeed,shellSpeed,sporeSpeed,buildingSpeed,shipSpeed,running,mode,paused,scrollingUp,scrollingDown,scrollingLeft,scrollingRight,ghosts,packetQueue,sporetowers,emitters,symbols,explosions,smokes,spores,buildings,packets,shells,ships,world,scroll,base,keyMap,stopwatch",
  init$0: function() {
    var music, t1, t2;
    this.buildings = [];
    this.packets = [];
    this.shells = [];
    this.spores = [];
    this.ships = [];
    this.smokes = [];
    this.explosions = [];
    this.symbols = [];
    this.emitters = [];
    this.sporetowers = [];
    this.packetQueue = [];
    this.reset$0(this);
    this.setupUI$0();
    music = $.AudioElement_AudioElement("sounds/music.ogg");
    t1 = $.getInterceptor$x(music);
    t1.set$loop(music, true);
    t1.set$volume(music, 0.25);
    t1 = $.EventStreamProvider_canplay.forTarget$1(music);
    t1 = new $._EventStreamSubscription(0, t1._target, t1._eventType, new $.Game_init_closure(music), t1._useCapture);
    t2 = t1._onData;
    if (t2 != null && !t1.get$isPaused())
      $.$$dom_addEventListener$3$x(t1._target, t1._eventType, t2, t1._useCapture);
  },
  reset$0: function(_) {
    var t1, oneSecond, milliseconds;
    t1 = this.stopwatch;
    t1.reset$0(t1);
    t1.start$0(t1);
    oneSecond = $.Duration$(0, 0, 0, 0, 0, 1);
    t1 = this.get$updateTime();
    milliseconds = $.JSNumber_methods.$tdiv(oneSecond._duration, 1000);
    $.TimerImpl$periodic(milliseconds < 0 ? 0 : milliseconds, t1);
    t1 = document.querySelector("#lose").style;
    t1.set$display;
    $.setProperty$3$x(t1, "display", "none", "");
    t1 = document.querySelector("#win").style;
    t1.set$display;
    $.setProperty$3$x(t1, "display", "none", "");
    this.mode = "DEFAULT";
    $.JSArray_methods.set$length(this.buildings, 0);
    $.JSArray_methods.set$length(this.packets, 0);
    $.JSArray_methods.set$length(this.shells, 0);
    $.JSArray_methods.set$length(this.spores, 0);
    $.JSArray_methods.set$length(this.ships, 0);
    $.JSArray_methods.set$length(this.smokes, 0);
    $.JSArray_methods.set$length(this.explosions, 0);
    $.JSArray_methods.set$length(this.emitters, 0);
    $.JSArray_methods.set$length(this.sporetowers, 0);
    $.JSArray_methods.set$length(this.packetQueue, 0);
    this.maxEnergy = 20;
    this.currentEnergy = 20;
    this.collection = 0;
    this.creeperTimer = 0;
    this.energyTimer = 0;
    this.spawnTimer = 0;
    this.damageTimer = 0;
    this.smokeTimer = 0;
    this.explosionTimer = 0;
    this.shieldTimer = 0;
    this.packetSpeed = 3;
    this.shellSpeed = 1;
    this.sporeSpeed = 1;
    this.buildingSpeed = 0.5;
    this.shipSpeed = 1;
    this.speed = 1;
    this.activeSymbol = -1;
    $.set$innerHtml$x(document.querySelector("#energy"), "Energy: " + $.JSNumber_methods.toString$0(this.currentEnergy) + "/" + $.JSNumber_methods.toString$0(this.maxEnergy));
    $.set$innerHtml$x(document.querySelector("#speed"), "Speed: " + $.JSNumber_methods.toString$0(this.speed) + "x");
    $.set$innerHtml$x(document.querySelector("#speed"), "Zoom: " + $.S($.toString$0(this.zoom)) + "x");
    this.clearSymbols$0();
    this.createWorld$0();
  },
  updateTime$1: function(_) {
    var s, m, minute, second;
    s = $.JSNumber_methods.$tdiv($.JSNumber_methods.$tdiv($.game.stopwatch.get$elapsedTicks() * 1000, 1000000), 1000);
    if (s >= 60) {
      m = $.JSNumber_methods.$tdiv(s, 60);
      s = $.JSNumber_methods.$mod(s, 60);
    } else
      m = 0;
    minute = m <= 9 ? "0" + $.S(m) : $.S(m);
    second = s <= 9 ? "0" + $.S(s) : $.S(s);
    $.set$innerHtml$x(document.querySelector("#time"), "Time: " + minute + ":" + second);
  },
  get$updateTime: function() {
    return new $.BoundClosure$1(this, "updateTime$1");
  },
  withinWorld$2: function(x, y) {
    var t1, t2;
    if (typeof x !== "number")
      return this.withinWorld$2$bailout(1, x, y);
    if (typeof y !== "number")
      return this.withinWorld$2$bailout(1, x, y);
    if (x > -1) {
      t1 = this.world.size;
      t2 = t1.x;
      if (typeof t2 !== "number")
        return this.withinWorld$2$bailout(2, x, y, t1, t2, $.JSNumber_methods);
      if (x < t2)
        if (y > -1) {
          t1 = t1.y;
          if (typeof t1 !== "number")
            return this.withinWorld$2$bailout(3, 0, y, t1, 0, $.JSNumber_methods);
          t1 = y < t1;
        } else
          t1 = false;
      else
        t1 = false;
    } else
      t1 = false;
    return t1;
  },
  withinWorld$2$bailout: function(state0, x, y, t2, t3, t1) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = $.getInterceptor$n(x);
      default:
        if (state0 === 3 || state0 === 2 || state0 === 0 && t1.$gt(x, -1))
          switch (state0) {
            case 0:
              t2 = this.world.size;
              t3 = t2.x;
            case 2:
              state0 = 0;
            case 3:
              if (state0 === 3 || state0 === 0 && t1.$lt(x, t3))
                switch (state0) {
                  case 0:
                    t1 = $.getInterceptor$n(y);
                  case 3:
                    if (state0 === 3 || state0 === 0 && t1.$gt(y, -1))
                      switch (state0) {
                        case 0:
                          t2 = t2.y;
                        case 3:
                          state0 = 0;
                          t2 = t1.$lt(y, t2);
                          t1 = t2;
                      }
                    else
                      t1 = false;
                }
              else
                t1 = false;
          }
        else
          t1 = false;
        return t1;
    }
  },
  getHoveredTilePosition$0: function() {
    var t1, t2, t3, truncated, t4, t5, t6;
    t1 = $.engine;
    t1 = $.$sub$n(t1.mouse.x, t1.halfWidth);
    t2 = this.tileSize;
    t3 = this.zoom;
    if (typeof t3 !== "number")
      throw $.iae(t3);
    t3 = Math.floor($.$div$n(t1, t2 * t3));
    if (isNaN(t3))
      $.throwExpression(new $.UnsupportedError("NaN"));
    if (t3 == Infinity || t3 == -Infinity)
      $.throwExpression(new $.UnsupportedError("Infinity"));
    truncated = t3 < 0 ? Math.ceil(t3) : Math.floor(t3);
    t1 = truncated == -0.0 ? 0 : truncated;
    t3 = this.scroll;
    t4 = t3.x;
    if (typeof t4 !== "number")
      throw $.iae(t4);
    t5 = $.engine;
    t5 = $.$sub$n(t5.mouse.y, t5.halfHeight);
    t6 = this.zoom;
    if (typeof t6 !== "number")
      throw $.iae(t6);
    t6 = Math.floor($.$div$n(t5, t2 * t6));
    if (isNaN(t6))
      $.throwExpression(new $.UnsupportedError("NaN"));
    if (t6 == Infinity || t6 == -Infinity)
      $.throwExpression(new $.UnsupportedError("Infinity"));
    truncated = t6 < 0 ? Math.ceil(t6) : Math.floor(t6);
    t2 = truncated == -0.0 ? 0 : truncated;
    t3 = t3.y;
    if (typeof t3 !== "number")
      throw $.iae(t3);
    return new $.Vector(t1 + t4, t2 + t3);
  },
  getHighestTerrain$1: function(pVector) {
    var t1, t2, i, height, t3, t4;
    for (t1 = $.getInterceptor$x(pVector), t2 = this.world, i = 9; height = -1, i > -1; --i) {
      t3 = t2.tiles;
      t4 = t1.get$x(pVector);
      if (t4 >>> 0 !== t4 || t4 >= t3.length)
        throw $.ioore(t4);
      t4 = t3[t4];
      if (typeof t4 !== "string" && (typeof t4 !== "object" || t4 === null || t4.constructor !== Array && !$.isJsIndexable(t4, t4[$.dispatchPropertyName])))
        return this.getHighestTerrain$1$bailout(1, pVector, i, t1, t4);
      t3 = t1.get$y(pVector);
      if (t3 >>> 0 !== t3 || t3 >= t4.length)
        throw $.ioore(t3);
      t3 = t4[t3];
      if (typeof t3 !== "string" && (typeof t3 !== "object" || t3 === null || t3.constructor !== Array && !$.isJsIndexable(t3, t3[$.dispatchPropertyName])))
        return this.getHighestTerrain$1$bailout(2, pVector, i, t1, t3);
      if (i >= t3.length)
        throw $.ioore(i);
      if (t3[i].get$full() === true) {
        height = i;
        break;
      }
    }
    return height;
  },
  getHighestTerrain$1$bailout: function(state0, pVector, i, t1, t3) {
    switch (state0) {
      case 0:
        t1 = $.getInterceptor$x(pVector);
        i = 9;
      default:
        var height, t2;
        L0:
          while (true)
            switch (state0) {
              case 0:
                height = -1;
                if (!(i > -1))
                  break L0;
                t2 = this.world.tiles;
                t3 = t1.get$x(pVector);
                if (t3 >>> 0 !== t3 || t3 >= t2.length)
                  throw $.ioore(t3);
                t3 = t2[t3];
              case 1:
                state0 = 0;
                t3 = $.$index$asx(t3, t1.get$y(pVector));
              case 2:
                state0 = 0;
                if ($.$index$asx(t3, i).get$full() === true) {
                  height = i;
                  break L0;
                }
                --i;
            }
        return height;
    }
  },
  run$0: function() {
    var t1, truncated, milliseconds, t2, t3;
    t1 = Math.floor(1000 / this.speed / $.engine.FPS);
    if (isNaN(t1))
      $.throwExpression(new $.UnsupportedError("NaN"));
    if (t1 == Infinity || t1 == -Infinity)
      $.throwExpression(new $.UnsupportedError("Infinity"));
    truncated = t1 < 0 ? Math.ceil(t1) : Math.floor(t1);
    milliseconds = $.JSNumber_methods.$tdiv($.Duration$(0, 0, 0, truncated == -0.0 ? 0 : truncated, 0, 0)._duration, 1000);
    if (milliseconds < 0)
      milliseconds = 0;
    this.running = $.TimerImpl$periodic(milliseconds, new $.Game_run_closure(this));
    t1 = $.engine;
    t2 = window;
    t3 = this.get$draw();
    $.Window_methods._ensureRequestAnimationFrame$0(t2);
    t1.animationRequest = $.Window_methods._requestAnimationFrame$1(t2, t3);
  },
  toggleTerraform$0: function() {
    if (this.mode === "TERRAFORM") {
      this.mode = "DEFAULT";
      var t1 = document.querySelector("#terraform");
      t1.get$attributes;
      new $._ElementAttributeMap(t1)._element.setAttribute("value", "Terraform Off");
    } else {
      this.mode = "TERRAFORM";
      t1 = document.querySelector("#terraform");
      t1.get$attributes;
      new $._ElementAttributeMap(t1)._element.setAttribute("value", "Terraform On");
    }
  },
  faster$0: function() {
    var t1 = document.querySelector("#slower").style;
    t1.set$display;
    $.setProperty$3$x(t1, "display", "inline", "");
    t1 = document.querySelector("#faster").style;
    t1.set$display;
    $.setProperty$3$x(t1, "display", "none", "");
    t1 = this.speed;
    if (t1 < 2) {
      this.speed = t1 * 2;
      this.running.cancel$0();
      this.run$0();
      $.set$innerHtml$x(document.querySelector("#speed"), "Speed: " + $.JSNumber_methods.toString$0(this.speed) + "x");
    }
  },
  slower$0: function() {
    var t1 = document.querySelector("#slower").style;
    t1.set$display;
    $.setProperty$3$x(t1, "display", "none", "");
    t1 = document.querySelector("#faster").style;
    t1.set$display;
    $.setProperty$3$x(t1, "display", "inline", "");
    t1 = this.speed;
    if (t1 > 1) {
      this.speed = t1 / 2;
      this.running.cancel$0();
      this.run$0();
      $.set$innerHtml$x(document.querySelector("#speed"), "Speed: " + $.JSNumber_methods.toString$0(this.speed) + "x");
    }
  },
  zoomIn$0: function() {
    var t1 = this.zoom;
    if ($.$lt$n(t1, 1.6)) {
      this.zoom = $.$add$ns(t1, 0.2);
      this.zoom = $.Primitives_parseDouble($.toStringAsFixed$1$n(this.zoom, 2), null);
      this.copyTerrain$0();
      this.drawCollection$0();
      this.drawCreeper$0();
      $.set$innerHtml$x(document.querySelector("#speed"), "Zoom: " + $.S($.toString$0(this.zoom)) + "x");
    }
  },
  zoomOut$0: function() {
    var t1, t2;
    t1 = this.zoom;
    t2 = $.getInterceptor$n(t1);
    if (t2.$gt(t1, 0.4)) {
      this.zoom = t2.$sub(t1, 0.2);
      this.zoom = $.Primitives_parseDouble($.toStringAsFixed$1$n(this.zoom, 2), null);
      this.copyTerrain$0();
      this.drawCollection$0();
      this.drawCreeper$0();
      $.set$innerHtml$x(document.querySelector("#speed"), "Zoom: " + $.S($.toString$0(this.zoom)) + "x");
    }
  },
  createWorld$0: function() {
    var t1, i, t2, j, k, heightmap, truncated, height, max, randomPosition, building, emitter, sporetower;
    t1 = this.world;
    t1.tiles = $.List_List(t1.size.x);
    t1 = this.world;
    t1.terraform = $.List_List(t1.size.x);
    for (i = 0; t1 = this.world, t2 = t1.size, $.JSNumber_methods.$lt(i, t2.x); ++i) {
      t1 = t1.tiles;
      t2 = $.List_List(t2.y);
      if (i >= t1.length)
        throw $.ioore(i);
      t1[i] = t2;
      t2 = this.world;
      t1 = t2.terraform;
      t2 = $.List_List(t2.size.y);
      if (i >= t1.length)
        throw $.ioore(i);
      t1[i] = t2;
      for (j = 0; t1 = this.world, $.JSNumber_methods.$lt(j, t1.size.y); ++j) {
        t1 = t1.tiles;
        if (i >= t1.length)
          throw $.ioore(i);
        $.$indexSet$ax(t1[i], j, []);
        for (k = 0; t1 = this.world, k < 10; ++k) {
          t1 = t1.tiles;
          if (i >= t1.length)
            throw $.ioore(i);
          t1 = $.$index$asx(t1[i], j);
          t2 = new $.Tile(null, null, null, null, null);
          t2.index = -1;
          t2.full = false;
          t2.creep = 0;
          t2.newcreep = 0;
          t2.collector = null;
          $.add$1$ax(t1, t2);
        }
        t1 = t1.terraform;
        if (i >= t1.length)
          throw $.ioore(i);
        $.$indexSet$ax(t1[i], j, $.makeLiteralMap(["target", -1, "progress", 0]));
      }
    }
    heightmap = $.HeightMap$(this.seed, 129, 0, 90);
    heightmap.run$0();
    for (i = 0; t1 = this.world.size.x, $.JSNumber_methods.$lt(i, t1); ++i)
      for (j = 0; $.JSNumber_methods.$lt(j, this.world.size.y); ++j) {
        t1 = heightmap.map;
        if (i >= t1.length)
          throw $.ioore(i);
        t1 = $.JSNumber_methods.roundToDouble$0($.$div$n($.$index$asx(t1[i], j), 10));
        if (isNaN(t1))
          $.throwExpression(new $.UnsupportedError("NaN"));
        if (t1 == Infinity || t1 == -Infinity)
          $.throwExpression(new $.UnsupportedError("Infinity"));
        truncated = t1 < 0 ? Math.ceil(t1) : Math.floor(t1);
        height = truncated == -0.0 ? 0 : truncated;
        for (k = 0; k < (height > 10 ? 10 : height); ++k) {
          t1 = this.world.tiles;
          if (i >= t1.length)
            throw $.ioore(i);
          $.$index$asx($.$index$asx(t1[i], j), k).set$full(true);
        }
      }
    t1 = $.$sub$n(t1, 9);
    $.$add$ns(this.seed, 1);
    max = $.$add$ns($.$sub$n(t1, 0), 1);
    t1 = $.getInterceptor$n(max);
    if (t1.$lt(max, 0))
      $.throwExpression(new $.ArgumentError("negative max: " + $.S(max)));
    if (t1.$gt(max, 4294967295))
      max = 4294967295;
    t1 = Math.random() * max >>> 0;
    t2 = $.$sub$n(this.world.size.y, 9);
    $.$add$ns(this.seed, 1);
    max = $.$add$ns($.$sub$n(t2, 0), 1);
    t2 = $.getInterceptor$n(max);
    if (t2.$lt(max, 0))
      $.throwExpression(new $.ArgumentError("negative max: " + $.S(max)));
    if (t2.$gt(max, 4294967295))
      max = 4294967295;
    randomPosition = new $.Vector(t1 + 0, (Math.random() * max >>> 0) + 0);
    t1 = this.scroll;
    t1.x = $.$add$ns(randomPosition.x, 4);
    t1.y = $.$add$ns(randomPosition.y, 4);
    building = new $.Building(randomPosition, null, null, new $.Vector(0, 0), "base", "IDLE", false, false, false, false, true, false, false, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, null);
    building.health = 40;
    building.maxHealth = 40;
    building.built = true;
    building.size = 9;
    this.buildings.push(building);
    this.base = building;
    height = this.getHighestTerrain$1(new $.Vector($.$add$ns($.get$x$x(building.position), 4), $.$add$ns($.get$y$x(building.position), 4)));
    if (height < 0)
      height = 0;
    for (i = 0; i < 9; ++i)
      for (j = 0; j < 9; ++j)
        for (k = 0; k <= height; ++k) {
          t1 = this.world.tiles;
          t2 = $.$add$ns($.get$x$x(building.position), i);
          if (t2 >>> 0 !== t2 || t2 >= t1.length)
            throw $.ioore(t2);
          $.$index$asx($.$index$asx(t1[t2], $.$add$ns($.get$y$x(building.position), j)), k).set$full(true);
        }
    this.calculateCollection$0();
    t1 = $.$sub$n(this.world.size.x, 3);
    $.$add$ns(this.seed, 2);
    max = $.$add$ns($.$sub$n(t1, 0), 1);
    t1 = $.getInterceptor$n(max);
    if (t1.$lt(max, 0))
      $.throwExpression(new $.ArgumentError("negative max: " + $.S(max)));
    if (t1.$gt(max, 4294967295))
      max = 4294967295;
    t1 = Math.random() * max >>> 0;
    t2 = $.$sub$n(this.world.size.y, 3);
    $.$add$ns(this.seed, 2);
    max = $.$add$ns($.$sub$n(t2, 0), 1);
    t2 = $.getInterceptor$n(max);
    if (t2.$lt(max, 0))
      $.throwExpression(new $.ArgumentError("negative max: " + $.S(max)));
    if (t2.$gt(max, 4294967295))
      max = 4294967295;
    emitter = new $.Emitter(new $.Vector(t1 + 0, (Math.random() * max >>> 0) + 0), null, 5, null);
    emitter.imageID = "emitter";
    this.emitters.push(emitter);
    height = this.getHighestTerrain$1(new $.Vector($.$add$ns(emitter.position.x, 1), $.$add$ns(emitter.position.y, 1)));
    if (height < 0)
      height = 0;
    for (i = 0; i < 3; ++i)
      for (j = 0; j < 3; ++j)
        for (k = 0; k < height; ++k) {
          t1 = this.world.tiles;
          t2 = $.$add$ns(emitter.position.x, i);
          if (t2 >>> 0 !== t2 || t2 >= t1.length)
            throw $.ioore(t2);
          $.$index$asx($.$index$asx(t1[t2], $.$add$ns(emitter.position.y, j)), k).set$full(true);
        }
    t1 = $.$sub$n(this.world.size.x, 3);
    $.$add$ns(this.seed, 3);
    max = $.$add$ns($.$sub$n(t1, 0), 1);
    t1 = $.getInterceptor$n(max);
    if (t1.$lt(max, 0))
      $.throwExpression(new $.ArgumentError("negative max: " + $.S(max)));
    if (t1.$gt(max, 4294967295))
      max = 4294967295;
    t1 = Math.random() * max >>> 0;
    t2 = $.$sub$n(this.world.size.y, 3);
    $.$add$ns(this.seed, 3);
    max = $.$add$ns($.$sub$n(t2, 0), 1);
    t2 = $.getInterceptor$n(max);
    if (t2.$lt(max, 0))
      $.throwExpression(new $.ArgumentError("negative max: " + $.S(max)));
    if (t2.$gt(max, 4294967295))
      max = 4294967295;
    sporetower = new $.Sporetower(new $.Vector(t1 + 0, (Math.random() * max >>> 0) + 0), null, 100, 0);
    sporetower.imageID = "sporetower";
    max = 5001;
    sporetower.sporeTimer = (Math.random() * max >>> 0) + 7500;
    this.sporetowers.push(sporetower);
    height = this.getHighestTerrain$1(new $.Vector($.$add$ns(sporetower.position.x, 1), $.$add$ns(sporetower.position.y, 1)));
    if (height < 0)
      height = 0;
    for (i = 0; i < 3; ++i)
      for (j = 0; j < 3; ++j)
        for (k = 0; k < height; ++k) {
          t1 = this.world.tiles;
          t2 = $.$add$ns(sporetower.position.x, i);
          if (t2 >>> 0 !== t2 || t2 >= t1.length)
            throw $.ioore(t2);
          $.$index$asx($.$index$asx(t1[t2], $.$add$ns(sporetower.position.y, j)), k).set$full(true);
        }
  },
  addBuilding$2: function(position, type) {
    var building, t1;
    building = new $.Building(position, null, null, new $.Vector(0, 0), type, "IDLE", false, false, false, false, true, false, false, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, null);
    building.health = 0;
    t1 = building.imageID;
    if (typeof t1 !== "string")
      return this.addBuilding$2$bailout(1, building, t1);
    if (t1 === "analyzer") {
      building.maxHealth = 80;
      building.maxEnergy = 20;
      building.energy = 0;
      building.size = 3;
      building.canMove = true;
      building.needsEnergy = true;
      building.weaponRadius = 10;
    }
    t1 = building.imageID;
    if (typeof t1 !== "string")
      return this.addBuilding$2$bailout(2, building, t1);
    if (t1 === "terp") {
      building.maxHealth = 60;
      building.maxEnergy = 20;
      building.energy = 0;
      building.size = 3;
      building.canMove = true;
      building.needsEnergy = true;
      building.weaponRadius = 12;
    }
    t1 = building.imageID;
    if (typeof t1 !== "string")
      return this.addBuilding$2$bailout(3, building, t1);
    if (t1 === "shield") {
      building.maxHealth = 75;
      building.maxEnergy = 20;
      building.energy = 0;
      building.size = 3;
      building.canMove = true;
      building.needsEnergy = true;
    }
    t1 = building.imageID;
    if (typeof t1 !== "string")
      return this.addBuilding$2$bailout(4, building, t1);
    if (t1 === "bomber") {
      building.maxHealth = 75;
      building.maxEnergy = 15;
      building.energy = 0;
      building.size = 3;
      building.needsEnergy = true;
    }
    t1 = building.imageID;
    if (typeof t1 !== "string")
      return this.addBuilding$2$bailout(5, building, t1);
    if (t1 === "storage") {
      building.maxHealth = 8;
      building.size = 3;
    }
    t1 = building.imageID;
    if (typeof t1 !== "string")
      return this.addBuilding$2$bailout(6, building, t1);
    if (t1 === "reactor") {
      building.maxHealth = 50;
      building.size = 3;
    }
    t1 = building.imageID;
    if (typeof t1 !== "string")
      return this.addBuilding$2$bailout(7, building, t1);
    if (t1 === "collector") {
      building.maxHealth = 5;
      building.size = 3;
    }
    t1 = building.imageID;
    if (typeof t1 !== "string")
      return this.addBuilding$2$bailout(8, building, t1);
    if (t1 === "relay") {
      building.maxHealth = 10;
      building.size = 3;
    }
    t1 = building.imageID;
    if (typeof t1 !== "string")
      return this.addBuilding$2$bailout(9, building, t1);
    if (t1 === "cannon") {
      building.maxHealth = 25;
      building.maxEnergy = 40;
      building.energy = 0;
      building.weaponRadius = 8;
      building.canMove = true;
      building.needsEnergy = true;
      building.size = 3;
    }
    t1 = building.imageID;
    if (typeof t1 !== "string")
      return this.addBuilding$2$bailout(10, building, t1);
    if (t1 === "mortar") {
      building.maxHealth = 40;
      building.maxEnergy = 20;
      building.energy = 0;
      building.weaponRadius = 12;
      building.canMove = true;
      building.needsEnergy = true;
      building.size = 3;
    }
    t1 = building.imageID;
    if (typeof t1 !== "string")
      return this.addBuilding$2$bailout(11, building, t1);
    if (t1 === "beam") {
      building.maxHealth = 20;
      building.maxEnergy = 10;
      building.energy = 0;
      building.weaponRadius = 12;
      building.canMove = true;
      building.needsEnergy = true;
      building.size = 3;
    }
    this.buildings.push(building);
  },
  addBuilding$2$bailout: function(state0, building, t1) {
    switch (state0) {
      case 0:
        building = new $.Building(position, null, null, new $.Vector(0, 0), type, "IDLE", false, false, false, false, true, false, false, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, null);
        building.health = 0;
        t1 = building.imageID;
      case 1:
        state0 = 0;
        if ($.$eq(t1, "analyzer")) {
          building.maxHealth = 80;
          building.maxEnergy = 20;
          building.energy = 0;
          building.size = 3;
          building.canMove = true;
          building.needsEnergy = true;
          building.weaponRadius = 10;
        }
        t1 = building.imageID;
      case 2:
        state0 = 0;
        if ($.$eq(t1, "terp")) {
          building.maxHealth = 60;
          building.maxEnergy = 20;
          building.energy = 0;
          building.size = 3;
          building.canMove = true;
          building.needsEnergy = true;
          building.weaponRadius = 12;
        }
        t1 = building.imageID;
      case 3:
        state0 = 0;
        if ($.$eq(t1, "shield")) {
          building.maxHealth = 75;
          building.maxEnergy = 20;
          building.energy = 0;
          building.size = 3;
          building.canMove = true;
          building.needsEnergy = true;
        }
        t1 = building.imageID;
      case 4:
        state0 = 0;
        if ($.$eq(t1, "bomber")) {
          building.maxHealth = 75;
          building.maxEnergy = 15;
          building.energy = 0;
          building.size = 3;
          building.needsEnergy = true;
        }
        t1 = building.imageID;
      case 5:
        state0 = 0;
        if ($.$eq(t1, "storage")) {
          building.maxHealth = 8;
          building.size = 3;
        }
        t1 = building.imageID;
      case 6:
        state0 = 0;
        if ($.$eq(t1, "reactor")) {
          building.maxHealth = 50;
          building.size = 3;
        }
        t1 = building.imageID;
      case 7:
        state0 = 0;
        if ($.$eq(t1, "collector")) {
          building.maxHealth = 5;
          building.size = 3;
        }
        t1 = building.imageID;
      case 8:
        state0 = 0;
        if ($.$eq(t1, "relay")) {
          building.maxHealth = 10;
          building.size = 3;
        }
        t1 = building.imageID;
      case 9:
        state0 = 0;
        if ($.$eq(t1, "cannon")) {
          building.maxHealth = 25;
          building.maxEnergy = 40;
          building.energy = 0;
          building.weaponRadius = 8;
          building.canMove = true;
          building.needsEnergy = true;
          building.size = 3;
        }
        t1 = building.imageID;
      case 10:
        state0 = 0;
        if ($.$eq(t1, "mortar")) {
          building.maxHealth = 40;
          building.maxEnergy = 20;
          building.energy = 0;
          building.weaponRadius = 12;
          building.canMove = true;
          building.needsEnergy = true;
          building.size = 3;
        }
        t1 = building.imageID;
      case 11:
        state0 = 0;
        if ($.$eq(t1, "beam")) {
          building.maxHealth = 20;
          building.maxEnergy = 10;
          building.energy = 0;
          building.weaponRadius = 12;
          building.canMove = true;
          building.needsEnergy = true;
          building.size = 3;
        }
        this.buildings.push(building);
    }
  },
  removeBuilding$1: function(building) {
    var t1, t2, t3, i, index;
    if (building.get$built()) {
      t1 = this.explosions;
      t2 = building.getCenter$0();
      t3 = new $.Explosion(null, null, null);
      t3.position = new $.Vector(t2.x, t2.y);
      t3.frame = 0;
      t3.imageID = "explosion";
      t1.push(t3);
      $.engine.playSound$2("explosion", $.get$position$x(building));
    }
    t1 = building.get$imageID();
    if (typeof t1 !== "string")
      return this.removeBuilding$1$bailout(1, building, t1);
    if (t1 === "base") {
      t1 = document.querySelector("#lose").style;
      t1.set$display;
      $.setProperty$3$x(t1, "display", "block", "");
      t1 = this.stopwatch;
      t1.stop$0(t1);
      this.running.cancel$0();
    }
    t1 = building.get$imageID();
    if (typeof t1 !== "string")
      return this.removeBuilding$1$bailout(2, building, t1);
    if (t1 === "collector")
      if (building.get$built())
        this.updateCollection$2(building, "remove");
    t1 = building.get$imageID();
    if (typeof t1 !== "string")
      return this.removeBuilding$1$bailout(3, building, t1);
    if (t1 === "storage") {
      this.maxEnergy = this.maxEnergy - 10;
      $.set$innerHtml$x(document.querySelector("#energy"), "Energy: " + $.JSNumber_methods.toString$0(this.currentEnergy) + "/" + $.JSNumber_methods.toString$0(this.maxEnergy));
    }
    t1 = building.get$imageID();
    if (typeof t1 !== "string")
      return this.removeBuilding$1$bailout(4, building, t1);
    if (t1 === "speed")
      this.packetSpeed = this.packetSpeed / 1.01;
    for (i = this.packets.length - 1; i >= 0; --i) {
      t1 = this.packets;
      if (i >= t1.length)
        throw $.ioore(i);
      if (!$.$eq($.get$currentTarget$x(t1[i]), building)) {
        t1 = this.packets;
        if (i >= t1.length)
          throw $.ioore(i);
        t1 = $.$eq($.get$target$x(t1[i]), building);
      } else
        t1 = true;
      if (t1)
        $.JSArray_methods.removeAt$1(this.packets, i);
    }
    for (i = this.packetQueue.length - 1; i >= 0; --i) {
      t1 = this.packetQueue;
      if (i >= t1.length)
        throw $.ioore(i);
      if (!$.$eq($.get$currentTarget$x(t1[i]), building)) {
        t1 = this.packetQueue;
        if (i >= t1.length)
          throw $.ioore(i);
        t1 = $.$eq($.get$target$x(t1[i]), building);
      } else
        t1 = true;
      if (t1)
        $.JSArray_methods.removeAt$1(this.packetQueue, i);
    }
    t1 = this.buildings;
    index = $.Arrays_indexOf(t1, building, 0, t1.length);
    $.JSArray_methods.removeAt$1(this.buildings, index);
  },
  removeBuilding$1$bailout: function(state0, building, t1) {
    switch (state0) {
      case 0:
        if (building.get$built()) {
          t1 = this.explosions;
          t2 = building.getCenter$0();
          t3 = new $.Explosion(null, null, null);
          t3.position = new $.Vector(t2.x, t2.y);
          t3.frame = 0;
          t3.imageID = "explosion";
          t1.push(t3);
          $.engine.playSound$2("explosion", $.get$position$x(building));
        }
        t1 = building.get$imageID();
      case 1:
        state0 = 0;
        if ($.$eq(t1, "base")) {
          t1 = document.querySelector("#lose").style;
          t1.set$display;
          $.setProperty$3$x(t1, "display", "block", "");
          t1 = this.stopwatch;
          t1.stop$0(t1);
          this.running.cancel$0();
        }
        t1 = building.get$imageID();
      case 2:
        state0 = 0;
        if ($.$eq(t1, "collector"))
          if (building.get$built())
            this.updateCollection$2(building, "remove");
        t1 = building.get$imageID();
      case 3:
        state0 = 0;
        if ($.$eq(t1, "storage")) {
          this.maxEnergy = this.maxEnergy - 10;
          $.set$innerHtml$x(document.querySelector("#energy"), "Energy: " + $.JSNumber_methods.toString$0(this.currentEnergy) + "/" + $.JSNumber_methods.toString$0(this.maxEnergy));
        }
        t1 = building.get$imageID();
      case 4:
        var t2, t3, i, index;
        state0 = 0;
        if ($.$eq(t1, "speed"))
          this.packetSpeed = this.packetSpeed / 1.01;
        for (i = this.packets.length - 1; i >= 0; --i) {
          t1 = this.packets;
          if (i >= t1.length)
            throw $.ioore(i);
          if (!$.$eq($.get$currentTarget$x(t1[i]), building)) {
            t1 = this.packets;
            if (i >= t1.length)
              throw $.ioore(i);
            t1 = $.$eq($.get$target$x(t1[i]), building);
          } else
            t1 = true;
          if (t1)
            $.JSArray_methods.removeAt$1(this.packets, i);
        }
        for (i = this.packetQueue.length - 1; i >= 0; --i) {
          t1 = this.packetQueue;
          if (i >= t1.length)
            throw $.ioore(i);
          if (!$.$eq($.get$currentTarget$x(t1[i]), building)) {
            t1 = this.packetQueue;
            if (i >= t1.length)
              throw $.ioore(i);
            t1 = $.$eq($.get$target$x(t1[i]), building);
          } else
            t1 = true;
          if (t1)
            $.JSArray_methods.removeAt$1(this.packetQueue, i);
        }
        t1 = this.buildings;
        index = $.Arrays_indexOf(t1, building, 0, t1.length);
        $.JSArray_methods.removeAt$1(this.buildings, index);
    }
  },
  activateBuilding$0: function() {
    var i, t1;
    for (i = 0; t1 = this.buildings, i < t1.length; ++i) {
      t1 = t1[i];
      if ($.get$selected$x(t1) === true)
        t1.set$active(true);
    }
  },
  deactivateBuilding$0: function() {
    var i, t1;
    for (i = 0; t1 = this.buildings, i < t1.length; ++i) {
      t1 = t1[i];
      if ($.get$selected$x(t1) === true)
        t1.set$active(false);
    }
  },
  clearSymbols$0: function() {
    var i, t1;
    this.activeSymbol = -1;
    for (i = 0; t1 = this.symbols, i < t1.length; ++i)
      t1[i].set$active(false);
    t1 = $.engine.canvas;
    t1 = t1.$index(t1, "main").get$element().style;
    t1.set$cursor;
    $.setProperty$3$x(t1, "cursor", "default", "");
  },
  setupUI$0: function() {
    this.symbols.push(new $.UISymbol(new $.Vector(0, 0), "cannon", "Q", 80, 55, 3, 25, 8, false, false));
    this.symbols.push(new $.UISymbol(new $.Vector(81, 0), "collector", "W", 80, 55, 3, 5, 6, false, false));
    this.symbols.push(new $.UISymbol(new $.Vector(162, 0), "reactor", "E", 80, 55, 3, 50, 0, false, false));
    this.symbols.push(new $.UISymbol(new $.Vector(243, 0), "storage", "R", 80, 55, 3, 8, 0, false, false));
    this.symbols.push(new $.UISymbol(new $.Vector(324, 0), "shield", "T", 80, 55, 3, 75, 10, false, false));
    this.symbols.push(new $.UISymbol(new $.Vector(405, 0), "analyzer", "Z", 80, 55, 3, 80, 10, false, false));
    this.symbols.push(new $.UISymbol(new $.Vector(0, 56), "relay", "A", 80, 55, 3, 10, 8, false, false));
    this.symbols.push(new $.UISymbol(new $.Vector(81, 56), "mortar", "S", 80, 55, 3, 40, 12, false, false));
    this.symbols.push(new $.UISymbol(new $.Vector(162, 56), "beam", "D", 80, 55, 3, 20, 12, false, false));
    this.symbols.push(new $.UISymbol(new $.Vector(243, 56), "bomber", "F", 80, 55, 3, 75, 0, false, false));
    this.symbols.push(new $.UISymbol(new $.Vector(324, 56), "terp", "G", 80, 55, 3, 60, 12, false, false));
  },
  drawTerrain$0: function() {
    var i, t1, t2, t3, i0, t4, t5, t6, j, j0, t7, t8, t9, k, t10, up, down, left, right, index, t11, pattern;
    for (i = 0; i < 10; ++i) {
      t1 = $.engine.canvas;
      $.clear$0$ax(t1.$index(t1, "level" + i));
    }
    for (t1 = this.tileSize, t2 = t1 + 6, t3 = t2 + 3, i = 0; $.JSNumber_methods.$lt(i, this.world.size.x); i = i0)
      for (i0 = i + 1, t4 = i - 1, t5 = t4 < 0, t6 = i * t1, j = 0; $.JSNumber_methods.$lt(j, this.world.size.y); j = j0)
        for (j0 = j + 1, t7 = j - 1, t8 = t7 < 0, t9 = j * t1, k = 9; k > -1; --k) {
          t10 = this.world.tiles;
          if (i >= t10.length)
            throw $.ioore(i);
          if ($.$index$asx($.$index$asx(t10[i], j), k).get$full() === true) {
            if (t8)
              up = 0;
            else {
              t10 = this.world.tiles;
              if (i >= t10.length)
                throw $.ioore(i);
              up = $.$index$asx($.$index$asx(t10[i], t7), k).get$full() === true ? 1 : 0;
            }
            if ($.JSNumber_methods.$gt(j0, $.$sub$n(this.world.size.y, 1)))
              down = 0;
            else {
              t10 = this.world.tiles;
              if (i >= t10.length)
                throw $.ioore(i);
              down = $.$index$asx($.$index$asx(t10[i], j0), k).get$full() === true ? 1 : 0;
            }
            if (t5)
              left = 0;
            else {
              t10 = this.world.tiles;
              if (t4 >= t10.length)
                throw $.ioore(t4);
              left = $.$index$asx($.$index$asx(t10[t4], j), k).get$full() === true ? 1 : 0;
            }
            if ($.JSNumber_methods.$gt(i0, $.$sub$n(this.world.size.x, 1)))
              right = 0;
            else {
              t10 = this.world.tiles;
              if (i0 >= t10.length)
                throw $.ioore(i0);
              right = $.$index$asx($.$index$asx(t10[i0], j), k).get$full() === true ? 1 : 0;
            }
            t10 = this.world.tiles;
            if (i >= t10.length)
              throw $.ioore(i);
            $.set$index$x($.$index$asx($.$index$asx(t10[i], j), k), 8 * down + 4 * left + 2 * up + right);
            t10 = this.world.tiles;
            if (i >= t10.length)
              throw $.ioore(i);
            index = $.get$index$x($.$index$asx($.$index$asx(t10[i], j), k));
            t10 = k + 1;
            if (t10 < 10) {
              t11 = this.world.tiles;
              if (i >= t11.length)
                throw $.ioore(i);
              t10 = $.get$index$x($.$index$asx($.$index$asx(t11[i], j), t10));
              t10 = index == null ? t10 == null : index === t10;
            } else
              t10 = false;
            if (t10)
              continue;
            t10 = $.engine.canvas;
            t10 = t10.$index(t10, "level" + k).get$context();
            t11 = $.engine.images;
            $.drawImageScaledFromSource$9$x(t10, t11.$index(t11, "mask"), $.$mul$n(index, t2) + 3, t3, t1, t1, t6, t9, t1, t1);
          }
        }
    for (i = 0; i < 10; ++i) {
      t3 = $.engine.canvas;
      t3 = t3.$index(t3, "level" + i).get$context();
      t4 = $.engine.images;
      pattern = $.createPattern$2$x(t3, t4.$index(t4, "level" + i), "repeat");
      t4 = $.engine.canvas;
      $.set$globalCompositeOperation$x(t4.$index(t4, "level" + i).get$context(), "source-in");
      t4 = $.engine.canvas;
      $.set$fillStyle$x(t4.$index(t4, "level" + i).get$context(), pattern);
      t4 = $.engine.canvas;
      t4 = t4.$index(t4, "level" + i).get$context();
      t3 = $.engine.canvas;
      t3 = $.get$width$x(t3.$index(t3, "level" + i).get$element());
      t5 = $.engine.canvas;
      $.fillRect$4$x(t4, 0, 0, t3, $.get$height$x(t5.$index(t5, "level" + i).get$element()));
      t5 = $.engine.canvas;
      $.set$globalCompositeOperation$x(t5.$index(t5, "level" + i).get$context(), "source-over");
    }
    for (t3 = t1 + 2, i = 0; $.JSNumber_methods.$lt(i, this.world.size.x); ++i)
      for (t4 = i * t1, j = 0; $.JSNumber_methods.$lt(j, this.world.size.y); ++j)
        for (t5 = j * t1, k = 9; k > -1; --k) {
          t6 = this.world.tiles;
          if (i >= t6.length)
            throw $.ioore(i);
          if ($.$index$asx($.$index$asx(t6[i], j), k).get$full() === true) {
            t6 = this.world.tiles;
            if (i >= t6.length)
              throw $.ioore(i);
            index = $.get$index$x($.$index$asx($.$index$asx(t6[i], j), k));
            t6 = k + 1;
            if (t6 < 10) {
              t7 = this.world.tiles;
              if (i >= t7.length)
                throw $.ioore(i);
              t6 = $.get$index$x($.$index$asx($.$index$asx(t7[i], j), t6));
              t6 = index == null ? t6 == null : index === t6;
            } else
              t6 = false;
            if (t6)
              continue;
            t6 = $.engine.canvas;
            t6 = t6.$index(t6, "level" + k).get$context();
            t7 = $.engine.images;
            $.drawImageScaledFromSource$9$x(t6, t7.$index(t7, "borders"), $.$mul$n(index, t2) + 2, 2, t3, t3, t4, t5, t3, t3);
            if (index === 5 || index === 7 || index === 10 || index === 11 || index === 13 || index === 14 || index === 15)
              break;
          }
        }
    t1 = $.engine.canvas;
    $.clear$0$ax(t1.$index(t1, "levelbuffer"));
    for (k = 0; k < 10; ++k) {
      t1 = $.engine.canvas;
      t1 = t1.$index(t1, "levelbuffer").get$context();
      t2 = $.engine.canvas;
      $.drawImage$3$x(t1, t2.$index(t2, "level" + k).get$element(), 0, 0);
    }
    t1 = document.querySelector("#loading").style;
    t1.set$display;
    $.setProperty$3$x(t1, "display", "none", "");
  },
  copyTerrain$0: function() {
    var t1, delta, t2, t3, t4, t5, left, $top, delta2, width, height;
    t1 = $.engine.canvas;
    $.clear$0$ax(t1.$index(t1, "levelfinal"));
    delta = new $.Vector(0, 0);
    t1 = this.scroll;
    t2 = this.tileSize;
    t3 = $.$mul$n(t1.x, t2);
    t4 = $.$div$n($.engine.width, 2);
    t5 = this.zoom;
    if (typeof t5 !== "number")
      throw $.iae(t5);
    left = $.$sub$n(t3, t4 * (1 / t5));
    t1 = $.$mul$n(t1.y, t2);
    t5 = $.$div$n($.engine.height, 2);
    t4 = this.zoom;
    if (typeof t4 !== "number")
      throw $.iae(t4);
    $top = $.$sub$n(t1, t5 * (1 / t4));
    t1 = $.getInterceptor$n(left);
    if (t1.$lt(left, 0)) {
      t1 = t1.$negate(left);
      t3 = this.zoom;
      if (typeof t3 !== "number")
        throw $.iae(t3);
      delta.x = t1 * t3;
      left = 0;
    }
    t1 = $.getInterceptor$n($top);
    if (t1.$lt($top, 0)) {
      t1 = t1.$negate($top);
      t3 = this.zoom;
      if (typeof t3 !== "number")
        throw $.iae(t3);
      delta.y = t1 * t3;
      $top = 0;
    }
    delta2 = new $.Vector(0, 0);
    t1 = $.engine;
    t3 = t1.width;
    t4 = this.zoom;
    if (typeof t4 !== "number")
      throw $.iae(t4);
    width = $.$mul$n(t3, 1 / t4);
    height = $.$mul$n(t1.height, 1 / t4);
    t1 = $.getInterceptor$ns(left);
    if ($.$gt$n(t1.$add(left, width), $.$mul$n(this.world.size.x, t2))) {
      delta2.x = $.$mul$n($.$sub$n(t1.$add(left, width), $.$mul$n(this.world.size.x, t2)), this.zoom);
      width = $.$sub$n($.$mul$n(this.world.size.x, t2), left);
    }
    t1 = $.getInterceptor$ns($top);
    if ($.$gt$n(t1.$add($top, height), $.$mul$n(this.world.size.y, t2))) {
      delta2.y = $.$mul$n($.$sub$n(t1.$add($top, height), $.$mul$n(this.world.size.y, t2)), this.zoom);
      height = $.$sub$n($.$mul$n(this.world.size.y, t2), $top);
    }
    t1 = $.engine.canvas;
    t1 = t1.$index(t1, "levelfinal").get$context();
    t2 = $.engine.canvas;
    t2 = t2.$index(t2, "levelbuffer").get$element();
    t3 = delta.x;
    t4 = delta.y;
    t5 = $.engine;
    $.drawImageScaledFromSource$9$x(t1, t2, left, $top, width, height, t3, t4, $.$sub$n(t5.width, delta2.x), $.$sub$n(t5.height, delta2.y));
  },
  redrawTile$1: function(tilesToRedraw) {
    var tempCanvas, tempContext, t1, t, t2, t3, t4, i, t5, t6, iS, jS, k, t7, t8, t9, up, t10, down, left, right, index, pattern, translation;
    tempCanvas = [];
    tempContext = [];
    for (t1 = this.tileSize, t = 0; t < 10; ++t) {
      tempCanvas.push($.CanvasElement_CanvasElement(null, null));
      if (t >= tempCanvas.length)
        throw $.ioore(t);
      $.set$width$x(tempCanvas[t], t1);
      if (t >= tempCanvas.length)
        throw $.ioore(t);
      $.set$height$x(tempCanvas[t], t1);
      if (t >= tempCanvas.length)
        throw $.ioore(t);
      tempContext.push($.getContext$1$x(tempCanvas[t], "2d"));
    }
    for (t2 = t1 + 6, t3 = t1 + 2, t4 = t2 + 3, i = 0; i < tilesToRedraw.length; ++i) {
      t5 = tilesToRedraw[i];
      t6 = $.getInterceptor$x(t5);
      iS = t6.get$x(t5);
      jS = t6.get$y(t5);
      if (typeof jS !== "number")
        return this.redrawTile$1$bailout(1, tilesToRedraw, i, tempCanvas, tempContext, t5, t2, t3, t4, iS, t1, jS);
      k = $.get$z$x(t5);
      t5 = this.world;
      t6 = t5.tiles;
      t7 = t6.length;
      if (iS >>> 0 !== iS || iS >= t7)
        throw $.ioore(iS);
      t8 = t6[iS];
      if (typeof t8 !== "string" && (typeof t8 !== "object" || t8 === null || t8.constructor !== Array && !$.isJsIndexable(t8, t8[$.dispatchPropertyName])))
        return this.redrawTile$1$bailout(2, tilesToRedraw, i, tempCanvas, tempContext, t8, t2, t3, t4, iS, t1, jS, k);
      if (jS >>> 0 !== jS || jS >= t8.length)
        throw $.ioore(jS);
      t9 = t8[jS];
      if (typeof t9 !== "string" && (typeof t9 !== "object" || t9 === null || t9.constructor !== Array && !$.isJsIndexable(t9, t9[$.dispatchPropertyName])))
        return this.redrawTile$1$bailout(3, tilesToRedraw, i, tempCanvas, tempContext, t9, t2, t3, t4, iS, t1, jS, k);
      if (k >>> 0 !== k || k >= t9.length)
        throw $.ioore(k);
      if (t9[k].get$full() === true) {
        t9 = jS - 1;
        if (t9 < 0)
          up = 0;
        else {
          if (t9 >= t8.length)
            throw $.ioore(t9);
          t9 = t8[t9];
          if (typeof t9 !== "string" && (typeof t9 !== "object" || t9 === null || t9.constructor !== Array && !$.isJsIndexable(t9, t9[$.dispatchPropertyName])))
            return this.redrawTile$1$bailout(5, tilesToRedraw, i, tempCanvas, tempContext, $.JSNumber_methods, t2, t3, t4, iS, t1, jS, k, t9);
          if (k >= t9.length)
            throw $.ioore(k);
          up = t9[k].get$full() === true ? 1 : 0;
        }
        t9 = jS + 1;
        t5 = t5.size;
        t10 = t5.y;
        if (typeof t10 !== "number")
          return this.redrawTile$1$bailout(6, tilesToRedraw, i, tempCanvas, tempContext, $.JSNumber_methods, t2, t3, t4, iS, t1, jS, k, t9, t10, up);
        if (t9 > t10 - 1)
          down = 0;
        else {
          if (t9 >= t8.length)
            throw $.ioore(t9);
          t9 = t8[t9];
          if (typeof t9 !== "string" && (typeof t9 !== "object" || t9 === null || t9.constructor !== Array && !$.isJsIndexable(t9, t9[$.dispatchPropertyName])))
            return this.redrawTile$1$bailout(8, tilesToRedraw, i, tempCanvas, tempContext, t9, t2, t3, t4, iS, t1, jS, k, 0, 0, up);
          if (k >= t9.length)
            throw $.ioore(k);
          down = t9[k].get$full() === true ? 1 : 0;
        }
        t9 = iS - 1;
        if (t9 < 0)
          left = 0;
        else {
          t9 = t6[t9];
          if (typeof t9 !== "string" && (typeof t9 !== "object" || t9 === null || t9.constructor !== Array && !$.isJsIndexable(t9, t9[$.dispatchPropertyName])))
            return this.redrawTile$1$bailout(9, tilesToRedraw, i, tempCanvas, tempContext, t9, t2, t3, t4, iS, t1, jS, k, 0, 0, up, down);
          if (jS >= t9.length)
            throw $.ioore(jS);
          t9 = t9[jS];
          if (typeof t9 !== "string" && (typeof t9 !== "object" || t9 === null || t9.constructor !== Array && !$.isJsIndexable(t9, t9[$.dispatchPropertyName])))
            return this.redrawTile$1$bailout(10, tilesToRedraw, i, tempCanvas, tempContext, t9, t2, t3, t4, iS, t1, jS, k, 0, 0, up, down);
          if (k >= t9.length)
            throw $.ioore(k);
          left = t9[k].get$full() === true ? 1 : 0;
        }
        t9 = iS + 1;
        t5 = t5.x;
        if (typeof t5 !== "number")
          return this.redrawTile$1$bailout(11, tilesToRedraw, i, tempCanvas, tempContext, t9, t2, t3, t4, iS, t1, jS, k, t5, 0, up, down, left);
        if (t9 > t5 - 1)
          right = 0;
        else {
          if (t9 >= t7)
            throw $.ioore(t9);
          t5 = t6[t9];
          if (typeof t5 !== "string" && (typeof t5 !== "object" || t5 === null || t5.constructor !== Array && !$.isJsIndexable(t5, t5[$.dispatchPropertyName])))
            return this.redrawTile$1$bailout(12, tilesToRedraw, i, tempCanvas, tempContext, t5, t2, t3, t4, iS, t1, jS, k, 0, 0, up, down, left);
          if (jS >= t5.length)
            throw $.ioore(jS);
          t5 = t5[jS];
          if (typeof t5 !== "string" && (typeof t5 !== "object" || t5 === null || t5.constructor !== Array && !$.isJsIndexable(t5, t5[$.dispatchPropertyName])))
            return this.redrawTile$1$bailout(13, tilesToRedraw, i, tempCanvas, tempContext, t5, t2, t3, t4, iS, t1, jS, k, 0, 0, up, down, left);
          if (k >= t5.length)
            throw $.ioore(k);
          right = t5[k].get$full() === true ? 1 : 0;
        }
        if (jS >= t8.length)
          throw $.ioore(jS);
        t5 = t8[jS];
        if (typeof t5 !== "string" && (typeof t5 !== "object" || t5 === null || t5.constructor !== Array && !$.isJsIndexable(t5, t5[$.dispatchPropertyName])))
          return this.redrawTile$1$bailout(15, tilesToRedraw, i, tempCanvas, tempContext, t5, t2, t3, t4, iS, t1, jS, k, 0, 0, up, down, left, right);
        if (k >= t5.length)
          throw $.ioore(k);
        $.set$index$x(t5[k], 8 * down + 4 * left + 2 * up + right);
      } else {
        if (jS >= t8.length)
          throw $.ioore(jS);
        t5 = t8[jS];
        if (typeof t5 !== "string" && (typeof t5 !== "object" || t5 === null || t5.constructor !== Array && !$.isJsIndexable(t5, t5[$.dispatchPropertyName])))
          return this.redrawTile$1$bailout(17, tilesToRedraw, i, tempCanvas, tempContext, t5, t2, t3, t4, iS, t1, jS, k);
        if (k >= t5.length)
          throw $.ioore(k);
        $.set$index$x(t5[k], -1);
      }
      for (t = 9; t > -1; --t) {
        if (t >= tempContext.length)
          throw $.ioore(t);
        $.clearRect$4$x(tempContext[t], 0, 0, t1, t1);
        t5 = this.world.tiles;
        if (iS < 0 || iS >= t5.length)
          throw $.ioore(iS);
        t5 = t5[iS];
        if (typeof t5 !== "string" && (typeof t5 !== "object" || t5 === null || t5.constructor !== Array && !$.isJsIndexable(t5, t5[$.dispatchPropertyName])))
          return this.redrawTile$1$bailout(18, tilesToRedraw, i, tempCanvas, tempContext, t5, t2, t3, t4, iS, t1, jS, 0, 0, 0, 0, 0, 0, 0, t);
        if (jS >= t5.length)
          throw $.ioore(jS);
        t6 = t5[jS];
        if (typeof t6 !== "string" && (typeof t6 !== "object" || t6 === null || t6.constructor !== Array && !$.isJsIndexable(t6, t6[$.dispatchPropertyName])))
          return this.redrawTile$1$bailout(19, tilesToRedraw, i, tempCanvas, tempContext, t6, t2, t3, t4, iS, t1, jS, 0, 0, 0, 0, 0, 0, 0, t);
        if (t >= t6.length)
          throw $.ioore(t);
        if (t6[t].get$full() === true) {
          if (jS >= t5.length)
            throw $.ioore(jS);
          t5 = t5[jS];
          if (typeof t5 !== "string" && (typeof t5 !== "object" || t5 === null || t5.constructor !== Array && !$.isJsIndexable(t5, t5[$.dispatchPropertyName])))
            return this.redrawTile$1$bailout(21, tilesToRedraw, i, tempCanvas, tempContext, t5, t2, t3, t4, iS, t1, jS, 0, 0, 0, 0, 0, 0, 0, t);
          if (t >= t5.length)
            throw $.ioore(t);
          index = $.get$index$x(t5[t]);
          if (typeof index !== "number")
            return this.redrawTile$1$bailout(22, tilesToRedraw, i, tempCanvas, tempContext, 0, t2, t3, t4, iS, t1, jS, 0, 0, 0, 0, 0, 0, 0, t, index);
          t5 = t + 1;
          if (t5 < 10) {
            t6 = this.world.tiles;
            if (iS >= t6.length)
              throw $.ioore(iS);
            t6 = t6[iS];
            if (typeof t6 !== "string" && (typeof t6 !== "object" || t6 === null || t6.constructor !== Array && !$.isJsIndexable(t6, t6[$.dispatchPropertyName])))
              return this.redrawTile$1$bailout(23, tilesToRedraw, i, tempCanvas, tempContext, t5, t2, t3, t4, iS, t1, jS, 0, t6, 0, 0, 0, 0, 0, t, index);
            if (jS >= t6.length)
              throw $.ioore(jS);
            t6 = t6[jS];
            if (typeof t6 !== "string" && (typeof t6 !== "object" || t6 === null || t6.constructor !== Array && !$.isJsIndexable(t6, t6[$.dispatchPropertyName])))
              return this.redrawTile$1$bailout(24, tilesToRedraw, i, tempCanvas, tempContext, t5, t2, t3, t4, iS, t1, jS, 0, t6, 0, 0, 0, 0, 0, t, index);
            if (t5 >= t6.length)
              throw $.ioore(t5);
            t5 = index === $.get$index$x(t6[t5]);
          } else
            t5 = false;
          if (t5)
            continue;
          if (t >= tempContext.length)
            throw $.ioore(t);
          t5 = tempContext[t];
          t6 = $.engine.images;
          $.drawImageScaledFromSource$9$x(t5, t6.$index(t6, "mask"), index * t2 + 3, t4, t1, t1, 0, 0, t1, t1);
          if (index === 5 || index === 7 || index === 10 || index === 11 || index === 13 || index === 14 || index === 15)
            break;
        }
      }
      for (t5 = jS * t1, t = 9; t > -1; --t) {
        t6 = this.world.tiles;
        if (iS < 0 || iS >= t6.length)
          throw $.ioore(iS);
        t6 = t6[iS];
        if (typeof t6 !== "string" && (typeof t6 !== "object" || t6 === null || t6.constructor !== Array && !$.isJsIndexable(t6, t6[$.dispatchPropertyName])))
          return this.redrawTile$1$bailout(25, tilesToRedraw, i, tempCanvas, tempContext, $.JSNumber_methods, t2, t3, t4, iS, t1, jS, 0, t6, 0, 0, 0, 0, 0, t);
        if (jS >= t6.length)
          throw $.ioore(jS);
        t6 = t6[jS];
        if (typeof t6 !== "string" && (typeof t6 !== "object" || t6 === null || t6.constructor !== Array && !$.isJsIndexable(t6, t6[$.dispatchPropertyName])))
          return this.redrawTile$1$bailout(26, tilesToRedraw, i, tempCanvas, tempContext, $.JSNumber_methods, t2, t3, t4, iS, t1, jS, 0, t6, 0, 0, 0, 0, 0, t);
        if (t >= t6.length)
          throw $.ioore(t);
        if (t6[t].get$full() === true) {
          if (t >= tempContext.length)
            throw $.ioore(t);
          t6 = tempContext[t];
          t7 = $.engine.images;
          pattern = $.createPattern$2$x(t6, t7.$index(t7, "level" + t), "repeat");
          if (t >= tempContext.length)
            throw $.ioore(t);
          $.set$globalCompositeOperation$x(tempContext[t], "source-in");
          if (t >= tempContext.length)
            throw $.ioore(t);
          $.set$fillStyle$x(tempContext[t], pattern);
          if (t >= tempContext.length)
            throw $.ioore(t);
          $.save$0$x(tempContext[t]);
          translation = new $.Vector($.JSInt_methods.floor$0(iS * t1), $.JSNumber_methods.floor$0(t5));
          if (t >= tempContext.length)
            throw $.ioore(t);
          t7 = tempContext[t];
          t6 = translation.x;
          if (typeof t6 !== "number")
            throw t6.$negate();
          t8 = translation.y;
          if (typeof t8 !== "number")
            throw t8.$negate();
          $.translate$2$x(t7, -t6, -t8);
          if (t >= tempContext.length)
            throw $.ioore(t);
          $.fillRect$4$x(tempContext[t], translation.x, translation.y, t1, t1);
          if (t >= tempContext.length)
            throw $.ioore(t);
          $.restore$0$x(tempContext[t]);
          if (t >= tempContext.length)
            throw $.ioore(t);
          $.set$globalCompositeOperation$x(tempContext[t], "source-over");
        }
      }
      for (t = 9; t > -1; --t) {
        t6 = this.world.tiles;
        if (iS < 0 || iS >= t6.length)
          throw $.ioore(iS);
        t6 = t6[iS];
        if (typeof t6 !== "string" && (typeof t6 !== "object" || t6 === null || t6.constructor !== Array && !$.isJsIndexable(t6, t6[$.dispatchPropertyName])))
          return this.redrawTile$1$bailout(27, tilesToRedraw, i, tempCanvas, tempContext, $.JSNumber_methods, t2, t3, t4, iS, t1, jS, 0, t6, 0, 0, 0, 0, 0, t);
        if (jS >= t6.length)
          throw $.ioore(jS);
        t7 = t6[jS];
        if (typeof t7 !== "string" && (typeof t7 !== "object" || t7 === null || t7.constructor !== Array && !$.isJsIndexable(t7, t7[$.dispatchPropertyName])))
          return this.redrawTile$1$bailout(28, tilesToRedraw, i, tempCanvas, tempContext, $.JSNumber_methods, t2, t3, t4, iS, t1, jS, 0, t7, 0, 0, 0, 0, 0, t);
        if (t >= t7.length)
          throw $.ioore(t);
        if (t7[t].get$full() === true) {
          if (jS >= t6.length)
            throw $.ioore(jS);
          t6 = t6[jS];
          if (typeof t6 !== "string" && (typeof t6 !== "object" || t6 === null || t6.constructor !== Array && !$.isJsIndexable(t6, t6[$.dispatchPropertyName])))
            return this.redrawTile$1$bailout(30, tilesToRedraw, i, tempCanvas, tempContext, $.JSNumber_methods, t2, t3, t4, iS, t1, jS, 0, t6, 0, 0, 0, 0, 0, t);
          if (t >= t6.length)
            throw $.ioore(t);
          index = $.get$index$x(t6[t]);
          if (typeof index !== "number")
            return this.redrawTile$1$bailout(31, tilesToRedraw, i, tempCanvas, tempContext, $.JSNumber_methods, t2, t3, t4, iS, t1, jS, 0, 0, 0, 0, 0, 0, 0, t, index);
          if (!(index < 0)) {
            t6 = t + 1;
            if (t6 < 10) {
              t7 = this.world.tiles;
              if (iS >= t7.length)
                throw $.ioore(iS);
              t7 = t7[iS];
              if (typeof t7 !== "string" && (typeof t7 !== "object" || t7 === null || t7.constructor !== Array && !$.isJsIndexable(t7, t7[$.dispatchPropertyName])))
                return this.redrawTile$1$bailout(32, tilesToRedraw, i, tempCanvas, tempContext, $.JSNumber_methods, t2, t3, t4, iS, t1, jS, 0, $.JSNumber_methods, t6, 0, 0, 0, 0, t, index, t7);
              if (jS >= t7.length)
                throw $.ioore(jS);
              t7 = t7[jS];
              if (typeof t7 !== "string" && (typeof t7 !== "object" || t7 === null || t7.constructor !== Array && !$.isJsIndexable(t7, t7[$.dispatchPropertyName])))
                return this.redrawTile$1$bailout(33, tilesToRedraw, i, tempCanvas, tempContext, $.JSNumber_methods, t2, t3, t4, iS, t1, jS, 0, $.JSNumber_methods, t6, 0, 0, 0, 0, t, index, t7);
              if (t6 >= t7.length)
                throw $.ioore(t6);
              t6 = index === $.get$index$x(t7[t6]);
            } else
              t6 = false;
          } else
            t6 = true;
          if (t6)
            continue;
          if (t >= tempContext.length)
            throw $.ioore(t);
          t6 = tempContext[t];
          t7 = $.engine.images;
          $.drawImageScaledFromSource$9$x(t6, t7.$index(t7, "borders"), index * t2 + 2, 2, t3, t3, 0, 0, t3, t3);
          if (index === 5 || index === 7 || index === 10 || index === 11 || index === 13 || index === 14 || index === 15)
            break;
        }
      }
      t6 = $.engine.canvas;
      t7 = iS * t1;
      $.clearRect$4$x(t6.$index(t6, "levelbuffer").get$context(), t7, t5, t1, t1);
      for (t = 0; t < 10; ++t) {
        t6 = $.engine.canvas;
        t6 = t6.$index(t6, "levelbuffer").get$context();
        if (t >= tempCanvas.length)
          throw $.ioore(t);
        $.drawImageScaledFromSource$9$x(t6, tempCanvas[t], 0, 0, t1, t1, t7, t5, t1, t1);
      }
    }
    this.copyTerrain$0();
  },
  redrawTile$1$bailout: function(state0, tilesToRedraw, i, tempCanvas, tempContext, t5, t2, t3, t4, iS, t1, jS, k, t6, t7, up, down, left, right, t, index, t8) {
    switch (state0) {
      case 0:
        tempCanvas = [];
        tempContext = [];
        for (t1 = this.tileSize, t = 0; t < 10; ++t) {
          tempCanvas.push($.CanvasElement_CanvasElement(null, null));
          if (t >= tempCanvas.length)
            throw $.ioore(t);
          $.set$width$x(tempCanvas[t], t1);
          if (t >= tempCanvas.length)
            throw $.ioore(t);
          $.set$height$x(tempCanvas[t], t1);
          if (t >= tempCanvas.length)
            throw $.ioore(t);
          tempContext.push($.getContext$1$x(tempCanvas[t], "2d"));
        }
        t2 = t1 + 6;
        t3 = t1 + 2;
        t4 = t2 + 3;
        i = 0;
      default:
        var pattern, translation;
        L0:
          while (true)
            switch (state0) {
              case 0:
                if (!(i < tilesToRedraw.length))
                  break L0;
                t5 = tilesToRedraw[i];
                t6 = $.getInterceptor$x(t5);
                iS = t6.get$x(t5);
                jS = t6.get$y(t5);
              case 1:
                state0 = 0;
                k = $.get$z$x(t5);
                t5 = this.world.tiles;
                if (iS >>> 0 !== iS || iS >= t5.length)
                  throw $.ioore(iS);
                t5 = t5[iS];
              case 2:
                state0 = 0;
                t5 = $.$index$asx(t5, jS);
              case 3:
                state0 = 0;
              default:
                if (state0 === 15 || state0 === 14 || state0 === 13 || state0 === 12 || state0 === 11 || state0 === 10 || state0 === 9 || state0 === 8 || state0 === 7 || state0 === 6 || state0 === 5 || state0 === 4 || state0 === 0 && $.$index$asx(t5, k).get$full() === true)
                  switch (state0) {
                    case 0:
                      t5 = $.getInterceptor$n(jS);
                    default:
                      if (state0 === 0 && $.$lt$n(t5.$sub(jS, 1), 0))
                        up = 0;
                      else
                        switch (state0) {
                          case 0:
                            t6 = this.world.tiles;
                            if (iS >= t6.length)
                              throw $.ioore(iS);
                            t6 = t6[iS];
                          case 4:
                            state0 = 0;
                            t6 = $.$index$asx(t6, t5.$sub(jS, 1));
                          case 5:
                            state0 = 0;
                            up = $.$index$asx(t6, k).get$full() === true ? 1 : 0;
                        }
                      t6 = t5.$add(jS, 1);
                      t7 = this.world.size.y;
                    case 6:
                      state0 = 0;
                    case 7:
                    case 8:
                      if (state0 === 0 && $.$gt$n(t6, $.$sub$n(t7, 1)))
                        down = 0;
                      else
                        switch (state0) {
                          case 0:
                            t6 = this.world.tiles;
                            if (iS >= t6.length)
                              throw $.ioore(iS);
                            t6 = t6[iS];
                          case 7:
                            state0 = 0;
                            t5 = $.$index$asx(t6, t5.$add(jS, 1));
                          case 8:
                            state0 = 0;
                            down = $.$index$asx(t5, k).get$full() === true ? 1 : 0;
                        }
                      t5 = iS - 1;
                    case 9:
                    case 10:
                      if (state0 === 0 && t5 < 0)
                        left = 0;
                      else
                        switch (state0) {
                          case 0:
                            t6 = this.world.tiles;
                            if (t5 < 0 || t5 >= t6.length)
                              throw $.ioore(t5);
                            t5 = t6[t5];
                          case 9:
                            state0 = 0;
                            t5 = $.$index$asx(t5, jS);
                          case 10:
                            state0 = 0;
                            left = $.$index$asx(t5, k).get$full() === true ? 1 : 0;
                        }
                      t5 = iS + 1;
                      t6 = this.world.size.x;
                    case 11:
                      state0 = 0;
                    case 12:
                    case 13:
                      if (state0 === 0 && $.JSInt_methods.$gt(t5, $.$sub$n(t6, 1)))
                        right = 0;
                      else
                        switch (state0) {
                          case 0:
                            t6 = this.world.tiles;
                            if (t5 >= t6.length)
                              throw $.ioore(t5);
                            t5 = t6[t5];
                          case 12:
                            state0 = 0;
                            t5 = $.$index$asx(t5, jS);
                          case 13:
                            state0 = 0;
                            right = $.$index$asx(t5, k).get$full() === true ? 1 : 0;
                        }
                      t5 = this.world.tiles;
                      if (iS >= t5.length)
                        throw $.ioore(iS);
                      t5 = t5[iS];
                    case 14:
                      state0 = 0;
                      t5 = $.$index$asx(t5, jS);
                    case 15:
                      state0 = 0;
                      $.set$index$x($.$index$asx(t5, k), 8 * down + 4 * left + 2 * up + right);
                  }
                else
                  switch (state0) {
                    case 0:
                      t5 = this.world.tiles;
                      if (iS >= t5.length)
                        throw $.ioore(iS);
                      t5 = t5[iS];
                    case 16:
                      state0 = 0;
                      t5 = $.$index$asx(t5, jS);
                    case 17:
                      state0 = 0;
                      $.set$index$x($.$index$asx(t5, k), -1);
                  }
                t = 9;
              case 18:
              case 19:
              case 20:
              case 21:
              case 22:
              case 23:
              case 24:
                L1:
                  while (true)
                    switch (state0) {
                      case 0:
                        if (!(t > -1))
                          break L1;
                      default:
                        c$1: {
                          switch (state0) {
                            case 0:
                              if (t >= tempContext.length)
                                throw $.ioore(t);
                              $.clearRect$4$x(tempContext[t], 0, 0, t1, t1);
                              t5 = this.world.tiles;
                              if (iS < 0 || iS >= t5.length)
                                throw $.ioore(iS);
                              t5 = t5[iS];
                            case 18:
                              state0 = 0;
                              t5 = $.$index$asx(t5, jS);
                            case 19:
                              state0 = 0;
                            default:
                              if (state0 === 24 || state0 === 23 || state0 === 22 || state0 === 21 || state0 === 20 || state0 === 0 && $.$index$asx(t5, t).get$full() === true)
                                switch (state0) {
                                  case 0:
                                    t5 = this.world.tiles;
                                    if (iS >= t5.length)
                                      throw $.ioore(iS);
                                    t5 = t5[iS];
                                  case 20:
                                    state0 = 0;
                                    t5 = $.$index$asx(t5, jS);
                                  case 21:
                                    state0 = 0;
                                    index = $.get$index$x($.$index$asx(t5, t));
                                  case 22:
                                    state0 = 0;
                                    t5 = t + 1;
                                  default:
                                    if (state0 === 24 || state0 === 23 || state0 === 0 && t5 < 10)
                                      switch (state0) {
                                        case 0:
                                          t6 = this.world.tiles;
                                          if (iS >= t6.length)
                                            throw $.ioore(iS);
                                          t6 = t6[iS];
                                        case 23:
                                          state0 = 0;
                                          t6 = $.$index$asx(t6, jS);
                                        case 24:
                                          state0 = 0;
                                          t5 = $.get$index$x($.$index$asx(t6, t5));
                                          t5 = index == null ? t5 == null : index === t5;
                                      }
                                    else
                                      t5 = false;
                                    if (t5)
                                      break c$1;
                                    if (t >= tempContext.length)
                                      throw $.ioore(t);
                                    t5 = tempContext[t];
                                    t6 = $.engine.images;
                                    $.drawImageScaledFromSource$9$x(t5, t6.$index(t6, "mask"), $.$mul$n(index, t2) + 3, t4, t1, t1, 0, 0, t1, t1);
                                    if (index === 5 || index === 7 || index === 10 || index === 11 || index === 13 || index === 14 || index === 15)
                                      break L1;
                                }
                          }
                        }
                        --t;
                    }
                t5 = $.getInterceptor$n(jS);
                t = 9;
              case 25:
              case 26:
                L2:
                  while (true)
                    switch (state0) {
                      case 0:
                        if (!(t > -1))
                          break L2;
                        t6 = this.world.tiles;
                        if (iS < 0 || iS >= t6.length)
                          throw $.ioore(iS);
                        t6 = t6[iS];
                      case 25:
                        state0 = 0;
                        t6 = $.$index$asx(t6, jS);
                      case 26:
                        state0 = 0;
                        if ($.$index$asx(t6, t).get$full() === true) {
                          if (t >= tempContext.length)
                            throw $.ioore(t);
                          t6 = tempContext[t];
                          t7 = $.engine.images;
                          pattern = $.createPattern$2$x(t6, t7.$index(t7, "level" + t), "repeat");
                          if (t >= tempContext.length)
                            throw $.ioore(t);
                          $.set$globalCompositeOperation$x(tempContext[t], "source-in");
                          if (t >= tempContext.length)
                            throw $.ioore(t);
                          $.set$fillStyle$x(tempContext[t], pattern);
                          if (t >= tempContext.length)
                            throw $.ioore(t);
                          $.save$0$x(tempContext[t]);
                          translation = new $.Vector($.JSInt_methods.floor$0(iS * t1), $.floor$0$nx(t5.$mul(jS, t1)));
                          if (t >= tempContext.length)
                            throw $.ioore(t);
                          t7 = tempContext[t];
                          t6 = translation.x;
                          if (typeof t6 !== "number")
                            throw t6.$negate();
                          t6 = $.$negate$n(t6);
                          t8 = translation.y;
                          if (typeof t8 !== "number")
                            throw t8.$negate();
                          $.translate$2$x(t7, t6, $.$negate$n(t8));
                          if (t >= tempContext.length)
                            throw $.ioore(t);
                          $.fillRect$4$x(tempContext[t], translation.x, translation.y, t1, t1);
                          if (t >= tempContext.length)
                            throw $.ioore(t);
                          $.restore$0$x(tempContext[t]);
                          if (t >= tempContext.length)
                            throw $.ioore(t);
                          $.set$globalCompositeOperation$x(tempContext[t], "source-over");
                        }
                        --t;
                    }
                t = 9;
              case 27:
              case 28:
              case 29:
              case 30:
              case 31:
              case 32:
              case 33:
                L3:
                  while (true)
                    switch (state0) {
                      case 0:
                        if (!(t > -1))
                          break L3;
                      default:
                        c$1: {
                          switch (state0) {
                            case 0:
                              t6 = this.world.tiles;
                              if (iS < 0 || iS >= t6.length)
                                throw $.ioore(iS);
                              t6 = t6[iS];
                            case 27:
                              state0 = 0;
                              t6 = $.$index$asx(t6, jS);
                            case 28:
                              state0 = 0;
                            default:
                              if (state0 === 33 || state0 === 32 || state0 === 31 || state0 === 30 || state0 === 29 || state0 === 0 && $.$index$asx(t6, t).get$full() === true)
                                switch (state0) {
                                  case 0:
                                    t6 = this.world.tiles;
                                    if (iS >= t6.length)
                                      throw $.ioore(iS);
                                    t6 = t6[iS];
                                  case 29:
                                    state0 = 0;
                                    t6 = $.$index$asx(t6, jS);
                                  case 30:
                                    state0 = 0;
                                    index = $.get$index$x($.$index$asx(t6, t));
                                  case 31:
                                    state0 = 0;
                                    t6 = $.getInterceptor$n(index);
                                  default:
                                    if (state0 === 33 || state0 === 32 || state0 === 0 && !t6.$lt(index, 0))
                                      switch (state0) {
                                        case 0:
                                          t7 = t + 1;
                                        default:
                                          if (state0 === 33 || state0 === 32 || state0 === 0 && t7 < 10)
                                            switch (state0) {
                                              case 0:
                                                t8 = this.world.tiles;
                                                if (iS >= t8.length)
                                                  throw $.ioore(iS);
                                                t8 = t8[iS];
                                              case 32:
                                                state0 = 0;
                                                t8 = $.$index$asx(t8, jS);
                                              case 33:
                                                state0 = 0;
                                                t7 = $.get$index$x($.$index$asx(t8, t7));
                                                t7 = index == null ? t7 == null : index === t7;
                                            }
                                          else
                                            t7 = false;
                                      }
                                    else
                                      t7 = true;
                                    if (t7)
                                      break c$1;
                                    if (t >= tempContext.length)
                                      throw $.ioore(t);
                                    t7 = tempContext[t];
                                    t8 = $.engine.images;
                                    $.drawImageScaledFromSource$9$x(t7, t8.$index(t8, "borders"), t6.$mul(index, t2) + 2, 2, t3, t3, 0, 0, t3, t3);
                                    if (index === 5 || index === 7 || index === 10 || index === 11 || index === 13 || index === 14 || index === 15)
                                      break L3;
                                }
                          }
                        }
                        --t;
                    }
                t6 = $.engine.canvas;
                $.clearRect$4$x(t6.$index(t6, "levelbuffer").get$context(), iS * t1, t5.$mul(jS, t1), t1, t1);
                for (t = 0; t < 10; ++t) {
                  t6 = $.engine.canvas;
                  t6 = t6.$index(t6, "levelbuffer").get$context();
                  if (t >= tempCanvas.length)
                    throw $.ioore(t);
                  $.drawImageScaledFromSource$9$x(t6, tempCanvas[t], 0, 0, t1, t1, iS * t1, t5.$mul(jS, t1), t1, t1);
                }
                ++i;
            }
        this.copyTerrain$0();
    }
  },
  checkOperating$0: function() {
    var t1, t2, t, t3, position, center, i, emitterCenter, t4, t5, target, lowestTile, j, t6, tileHeight, t7, terraformElement, height, tilesToRedraw, t8, r, targets, radius, dx, dy, highestCreep, shell, sporeCenter, truncated;
    for (t1 = this.tileSize, t2 = t1 / 2, t = 0; t3 = this.buildings, t < t3.length; ++t) {
      t3[t].set$operating(false);
      t3 = this.buildings;
      if (t >= t3.length)
        throw $.ioore(t);
      t3 = t3[t];
      if (t3.get$needsEnergy() && t3.get$active() && $.get$status$x(t3) === "IDLE") {
        t3.set$energyTimer(t3.get$energyTimer() + 1);
        t3 = this.buildings;
        if (t >= t3.length)
          throw $.ioore(t);
        position = $.get$position$x(t3[t]);
        t3 = this.buildings;
        if (t >= t3.length)
          throw $.ioore(t);
        center = t3[t].getCenter$0();
        t3 = this.buildings;
        if (t >= t3.length)
          throw $.ioore(t);
        if ($.$eq(t3[t].get$imageID(), "analyzer")) {
          t3 = this.buildings;
          if (t >= t3.length)
            throw $.ioore(t);
          t3 = t3[t].get$energy() > 0;
        } else
          t3 = false;
        if (t3) {
          t3 = this.buildings;
          if (t >= t3.length)
            throw $.ioore(t);
          t3 = t3[t];
          if (t3.get$weaponTargetPosition() == null)
            for (i = 0; t3 = this.emitters, i < t3.length; ++i) {
              emitterCenter = t3[i].getCenter$0();
              t3 = $.$sub$n(emitterCenter.x, center.x);
              if (typeof t3 !== "number")
                $.throwExpression(new $.ArgumentError(t3));
              t3 = Math.pow(t3, 2);
              t4 = $.$sub$n(emitterCenter.y, center.y);
              if (typeof t4 !== "number")
                $.throwExpression(new $.ArgumentError(t4));
              t4 = Math.pow(t4, 2);
              t5 = this.buildings;
              if (t >= t5.length)
                throw $.ioore(t);
              t5 = t5[t].get$weaponRadius() * t1;
              if (t3 + t4 <= Math.pow(t5, 2)) {
                t3 = this.emitters;
                if (i >= t3.length)
                  throw $.ioore(i);
                t3 = t3[i];
                if (t3.get$building() == null) {
                  t4 = this.buildings;
                  if (t >= t4.length)
                    throw $.ioore(t);
                  t3.set$building(t4[t]);
                  t4 = this.buildings;
                  if (t >= t4.length)
                    throw $.ioore(t);
                  t4 = t4[t];
                  t3 = this.emitters;
                  if (i >= t3.length)
                    throw $.ioore(i);
                  t4.set$weaponTargetPosition($.get$position$x(t3[i]));
                  break;
                }
              }
            }
          else {
            if (t3.get$energyTimer() > 20) {
              t3.set$energyTimer(0);
              t3 = this.buildings;
              if (t >= t3.length)
                throw $.ioore(t);
              t3 = t3[t];
              t3.set$energy(t3.get$energy() - 1);
            }
            t3 = this.buildings;
            if (t >= t3.length)
              throw $.ioore(t);
            t3[t].set$operating(true);
          }
        }
        t3 = this.buildings;
        if (t >= t3.length)
          throw $.ioore(t);
        if ($.$eq(t3[t].get$imageID(), "terp")) {
          t3 = this.buildings;
          if (t >= t3.length)
            throw $.ioore(t);
          t3 = t3[t].get$energy() > 0;
        } else
          t3 = false;
        if (t3) {
          t3 = this.buildings;
          if (t >= t3.length)
            throw $.ioore(t);
          t3 = t3[t];
          if (t3.get$weaponTargetPosition() == null) {
            t4 = $.getInterceptor$x(position);
            i = $.$sub$n(t4.get$x(position), t3.get$weaponRadius());
            if (i !== (i | 0))
              return this.checkOperating$0$bailout(1, t, center, position, t2, t4, t1, i);
            target = null;
            lowestTile = 10;
            while (true) {
              t3 = t4.get$x(position);
              t5 = this.buildings;
              if (t >= t5.length)
                throw $.ioore(t);
              if (!$.JSNumber_methods.$le(i, $.$add$ns(t3, t5[t].get$weaponRadius())))
                break;
              t3 = t4.get$y(position);
              t5 = this.buildings;
              if (t >= t5.length)
                throw $.ioore(t);
              j = $.$sub$n(t3, t5[t].get$weaponRadius());
              if (typeof j !== "number")
                return this.checkOperating$0$bailout(2, t, center, position, t2, t4, t1, i, $.JSNumber_methods, target, lowestTile, j);
              t5 = i * t1 + t2;
              while (true) {
                t3 = t4.get$y(position);
                t6 = this.buildings;
                if (t >= t6.length)
                  throw $.ioore(t);
                if (!$.JSNumber_methods.$le(j, $.$add$ns(t3, t6[t].get$weaponRadius())))
                  break;
                if (this.withinWorld$2(i, j)) {
                  t3 = center.x;
                  if (typeof t3 !== "number")
                    throw $.iae(t3);
                  t3 = t5 - t3;
                  t3 = Math.pow(t3, 2);
                  t6 = center.y;
                  if (typeof t6 !== "number")
                    throw $.iae(t6);
                  t6 = j * t1 + t2 - t6;
                  t6 = Math.pow(t6, 2);
                  tileHeight = this.getHighestTerrain$1(new $.Vector(i, j));
                  t7 = this.buildings;
                  if (t >= t7.length)
                    throw $.ioore(t);
                  t7 = t7[t].get$weaponRadius() * t1;
                  if (t3 + t6 <= Math.pow(t7, 2)) {
                    t3 = this.world.terraform;
                    if (i < 0 || i >= t3.length)
                      throw $.ioore(i);
                    t3 = t3[i];
                    if (typeof t3 !== "string" && (typeof t3 !== "object" || t3 === null || t3.constructor !== Array && !$.isJsIndexable(t3, t3[$.dispatchPropertyName])))
                      return this.checkOperating$0$bailout(3, t, center, position, t2, t4, t1, i, $.JSNumber_methods, target, lowestTile, j, t3, $.JSNumber_methods, tileHeight);
                    if (j >>> 0 !== j || j >= t3.length)
                      throw $.ioore(j);
                    t3 = $.$gt$n($.$index$asx(t3[j], "target"), -1) && tileHeight <= lowestTile;
                  } else
                    t3 = false;
                  if (t3) {
                    target = new $.Vector(i, j);
                    lowestTile = tileHeight;
                  }
                }
                ++j;
              }
              ++i;
            }
            if (target != null) {
              t3 = this.buildings;
              if (t >= t3.length)
                throw $.ioore(t);
              t3[t].set$weaponTargetPosition(target);
            }
          } else {
            if (t3.get$energyTimer() > 20) {
              t3.set$energyTimer(0);
              t3 = this.buildings;
              if (t >= t3.length)
                throw $.ioore(t);
              t3 = t3[t];
              t3.set$energy(t3.get$energy() - 1);
            }
            t3 = this.buildings;
            if (t >= t3.length)
              throw $.ioore(t);
            t3[t].set$operating(true);
            t3 = this.world.terraform;
            t4 = this.buildings;
            if (t >= t4.length)
              throw $.ioore(t);
            t4 = t4[t].get$weaponTargetPosition();
            t5 = $.getInterceptor$x(t4);
            t6 = t5.get$x(t4);
            if (t6 >>> 0 !== t6 || t6 >= t3.length)
              throw $.ioore(t6);
            terraformElement = $.$index$asx(t3[t6], t5.get$y(t4));
            t4 = $.getInterceptor$asx(terraformElement);
            t4.$indexSet(terraformElement, "progress", $.$add$ns(t4.$index(terraformElement, "progress"), 1));
            if ($.$eq(t4.$index(terraformElement, "progress"), 100)) {
              t4.$indexSet(terraformElement, "progress", 0);
              t3 = this.buildings;
              if (t >= t3.length)
                throw $.ioore(t);
              height = this.getHighestTerrain$1(t3[t].get$weaponTargetPosition());
              tilesToRedraw = $.List_List($);
              t3 = $.JSNumber_methods.$lt(height, t4.$index(terraformElement, "target"));
              t5 = this.world;
              t6 = this.buildings;
              t5 = t5.tiles;
              t7 = t6.length;
              t6 = t6[t];
              if (t3) {
                if (t >= t7)
                  throw $.ioore(t);
                t3 = t6.get$weaponTargetPosition();
                t6 = $.getInterceptor$x(t3);
                t7 = t6.get$x(t3);
                if (t7 >>> 0 !== t7 || t7 >= t5.length)
                  throw $.ioore(t7);
                t8 = height + 1;
                $.$index$asx($.$index$asx(t5[t7], t6.get$y(t3)), t8).set$full(true);
                t3 = this.buildings;
                if (t >= t3.length)
                  throw $.ioore(t);
                t3 = t3[t].get$weaponTargetPosition();
                t6 = $.getInterceptor$x(t3);
                tilesToRedraw.push(new $.Vector3(t6.get$x(t3), t6.get$y(t3), t8));
                t3 = this.buildings;
                if (t >= t3.length)
                  throw $.ioore(t);
                t3 = $.$sub$n($.get$x$x(t3[t].get$weaponTargetPosition()), 1);
                t6 = this.buildings;
                if (t >= t6.length)
                  throw $.ioore(t);
                tilesToRedraw.push(new $.Vector3(t3, $.get$y$x(t6[t].get$weaponTargetPosition()), t8));
                t6 = this.buildings;
                if (t >= t6.length)
                  throw $.ioore(t);
                t6 = t6[t].get$weaponTargetPosition();
                t3 = $.getInterceptor$x(t6);
                tilesToRedraw.push(new $.Vector3(t3.get$x(t6), $.$sub$n(t3.get$y(t6), 1), t8));
                t6 = this.buildings;
                if (t >= t6.length)
                  throw $.ioore(t);
                t6 = $.$add$ns($.get$x$x(t6[t].get$weaponTargetPosition()), 1);
                t3 = this.buildings;
                if (t >= t3.length)
                  throw $.ioore(t);
                tilesToRedraw.push(new $.Vector3(t6, $.get$y$x(t3[t].get$weaponTargetPosition()), t8));
                t3 = this.buildings;
                if (t >= t3.length)
                  throw $.ioore(t);
                t3 = t3[t].get$weaponTargetPosition();
                t6 = $.getInterceptor$x(t3);
                tilesToRedraw.push(new $.Vector3(t6.get$x(t3), $.$add$ns(t6.get$y(t3), 1), t8));
              } else {
                if (t >= t7)
                  throw $.ioore(t);
                t3 = t6.get$weaponTargetPosition();
                t6 = $.getInterceptor$x(t3);
                t7 = t6.get$x(t3);
                if (t7 >>> 0 !== t7 || t7 >= t5.length)
                  throw $.ioore(t7);
                $.$index$asx($.$index$asx(t5[t7], t6.get$y(t3)), height).set$full(false);
                t3 = this.buildings;
                if (t >= t3.length)
                  throw $.ioore(t);
                t3 = t3[t].get$weaponTargetPosition();
                t6 = $.getInterceptor$x(t3);
                tilesToRedraw.push(new $.Vector3(t6.get$x(t3), t6.get$y(t3), height));
                t3 = this.buildings;
                if (t >= t3.length)
                  throw $.ioore(t);
                t3 = $.$sub$n($.get$x$x(t3[t].get$weaponTargetPosition()), 1);
                t6 = this.buildings;
                if (t >= t6.length)
                  throw $.ioore(t);
                tilesToRedraw.push(new $.Vector3(t3, $.get$y$x(t6[t].get$weaponTargetPosition()), height));
                t6 = this.buildings;
                if (t >= t6.length)
                  throw $.ioore(t);
                t6 = t6[t].get$weaponTargetPosition();
                t3 = $.getInterceptor$x(t6);
                tilesToRedraw.push(new $.Vector3(t3.get$x(t6), $.$sub$n(t3.get$y(t6), 1), height));
                t6 = this.buildings;
                if (t >= t6.length)
                  throw $.ioore(t);
                t6 = $.$add$ns($.get$x$x(t6[t].get$weaponTargetPosition()), 1);
                t3 = this.buildings;
                if (t >= t3.length)
                  throw $.ioore(t);
                tilesToRedraw.push(new $.Vector3(t6, $.get$y$x(t3[t].get$weaponTargetPosition()), height));
                t3 = this.buildings;
                if (t >= t3.length)
                  throw $.ioore(t);
                t3 = t3[t].get$weaponTargetPosition();
                t6 = $.getInterceptor$x(t3);
                tilesToRedraw.push(new $.Vector3(t6.get$x(t3), $.$add$ns(t6.get$y(t3), 1), height));
              }
              this.redrawTile$1(tilesToRedraw);
              t3 = this.buildings;
              if (t >= t3.length)
                throw $.ioore(t);
              if (this.getHighestTerrain$1(t3[t].get$weaponTargetPosition()) === t4.$index(terraformElement, "target")) {
                t3 = this.world.terraform;
                t4 = this.buildings;
                if (t >= t4.length)
                  throw $.ioore(t);
                t4 = t4[t].get$weaponTargetPosition();
                t5 = $.getInterceptor$x(t4);
                t6 = t5.get$x(t4);
                if (t6 >>> 0 !== t6 || t6 >= t3.length)
                  throw $.ioore(t6);
                $.$indexSet$ax($.$index$asx(t3[t6], t5.get$y(t4)), "progress", 0);
                t4 = this.world.terraform;
                t5 = this.buildings;
                if (t >= t5.length)
                  throw $.ioore(t);
                t5 = t5[t].get$weaponTargetPosition();
                t6 = $.getInterceptor$x(t5);
                t3 = t6.get$x(t5);
                if (t3 >>> 0 !== t3 || t3 >= t4.length)
                  throw $.ioore(t3);
                $.$indexSet$ax($.$index$asx(t4[t3], t6.get$y(t5)), "target", -1);
              }
              t3 = this.buildings;
              if (t >= t3.length)
                throw $.ioore(t);
              t3[t].set$weaponTargetPosition(null);
              t3 = this.buildings;
              if (t >= t3.length)
                throw $.ioore(t);
              t3[t].set$operating(false);
            }
          }
        } else {
          t3 = this.buildings;
          if (t >= t3.length)
            throw $.ioore(t);
          if ($.$eq(t3[t].get$imageID(), "shield")) {
            t3 = this.buildings;
            if (t >= t3.length)
              throw $.ioore(t);
            t3 = t3[t].get$energy() > 0;
          } else
            t3 = false;
          if (t3) {
            t3 = this.buildings;
            if (t >= t3.length)
              throw $.ioore(t);
            t3 = t3[t];
            if (t3.get$energyTimer() > 20) {
              t3.set$energyTimer(0);
              t3 = this.buildings;
              if (t >= t3.length)
                throw $.ioore(t);
              t3 = t3[t];
              t3.set$energy(t3.get$energy() - 1);
            }
            t3 = this.buildings;
            if (t >= t3.length)
              throw $.ioore(t);
            t3[t].set$operating(true);
          } else {
            t3 = this.buildings;
            if (t >= t3.length)
              throw $.ioore(t);
            if ($.$eq(t3[t].get$imageID(), "cannon")) {
              t3 = this.buildings;
              if (t >= t3.length)
                throw $.ioore(t);
              t3 = t3[t];
              t3 = t3.get$energy() > 0 && t3.get$energyTimer() > 10;
            } else
              t3 = false;
            if (t3) {
              t3 = this.buildings;
              if (t >= t3.length)
                throw $.ioore(t);
              t3[t].set$energyTimer(0);
              t3 = this.buildings;
              if (t >= t3.length)
                throw $.ioore(t);
              height = this.getHighestTerrain$1($.get$position$x(t3[t]));
              t3 = $.getInterceptor$x(position);
              r = 0;
              while (true) {
                t4 = this.buildings;
                if (t >= t4.length)
                  throw $.ioore(t);
                if (!(r < t4[t].get$weaponRadius() + 1))
                  break;
                targets = $.List_List($);
                radius = r * t1;
                t4 = t3.get$x(position);
                t5 = this.buildings;
                if (t >= t5.length)
                  throw $.ioore(t);
                i = $.$sub$n(t4, t5[t].get$weaponRadius());
                if (i !== (i | 0))
                  return this.checkOperating$0$bailout(4, t, center, position, t2, 0, t1, i, 0, 0, 0, 0, t3, 0, 0, radius, targets, height, r);
                while (true) {
                  t4 = t3.get$x(position);
                  t5 = this.buildings;
                  if (t >= t5.length)
                    throw $.ioore(t);
                  if (!$.JSNumber_methods.$le(i, $.$add$ns(t4, t5[t].get$weaponRadius())))
                    break;
                  t4 = t3.get$y(position);
                  t5 = this.buildings;
                  if (t >= t5.length)
                    throw $.ioore(t);
                  j = $.$sub$n(t4, t5[t].get$weaponRadius());
                  if (typeof j !== "number")
                    return this.checkOperating$0$bailout(5, t, center, position, t2, 0, t1, i, $.JSNumber_methods, 0, 0, j, t3, 0, 0, radius, targets, height, r);
                  t5 = i * t1 + t2;
                  while (true) {
                    t4 = t3.get$y(position);
                    t6 = this.buildings;
                    if (t >= t6.length)
                      throw $.ioore(t);
                    if (!$.JSNumber_methods.$le(j, $.$add$ns(t4, t6[t].get$weaponRadius())))
                      break;
                    if (this.withinWorld$2(i, j))
                      if (this.getHighestTerrain$1(new $.Vector(i, j)) <= height) {
                        t4 = center.x;
                        if (typeof t4 !== "number")
                          throw $.iae(t4);
                        t4 = t5 - t4;
                        t4 = Math.pow(t4, 2);
                        t6 = center.y;
                        if (typeof t6 !== "number")
                          throw $.iae(t6);
                        t6 = j * t1 + t2 - t6;
                        t6 = Math.pow(t6, 2);
                        if (t4 + t6 <= Math.pow(radius, 2)) {
                          t4 = this.world.tiles;
                          if (i < 0 || i >= t4.length)
                            throw $.ioore(i);
                          t4 = t4[i];
                          if (typeof t4 !== "string" && (typeof t4 !== "object" || t4 === null || t4.constructor !== Array && !$.isJsIndexable(t4, t4[$.dispatchPropertyName])))
                            return this.checkOperating$0$bailout(6, t, center, position, t2, t4, t1, i, $.JSNumber_methods, 0, 0, j, t3, $.JSNumber_methods, 0, radius, targets, height, r);
                          if (j >>> 0 !== j || j >= t4.length)
                            throw $.ioore(j);
                          t4 = $.$gt$n($.$index$asx(t4[j], 0).get$creep(), 0);
                        } else
                          t4 = false;
                        if (t4)
                          targets.push(new $.Vector(i, j));
                      }
                    ++j;
                  }
                  ++i;
                }
                if (targets.length > 0) {
                  $.Helper_shuffle(targets);
                  t3 = this.world.tiles;
                  if (0 >= targets.length)
                    throw $.ioore(0);
                  t4 = targets[0];
                  t5 = $.getInterceptor$x(t4);
                  t6 = t5.get$x(t4);
                  if (t6 >>> 0 !== t6 || t6 >= t3.length)
                    throw $.ioore(t6);
                  t4 = $.$index$asx($.$index$asx(t3[t6], t5.get$y(t4)), 0);
                  t4.set$creep($.$sub$n(t4.get$creep(), 10));
                  t3 = this.world.tiles;
                  if (0 >= targets.length)
                    throw $.ioore(0);
                  t4 = targets[0];
                  t5 = $.getInterceptor$x(t4);
                  t6 = t5.get$x(t4);
                  if (t6 >>> 0 !== t6 || t6 >= t3.length)
                    throw $.ioore(t6);
                  if ($.$lt$n($.$index$asx($.$index$asx(t3[t6], t5.get$y(t4)), 0).get$creep(), 0)) {
                    t3 = this.world.tiles;
                    if (0 >= targets.length)
                      throw $.ioore(0);
                    t4 = targets[0];
                    t5 = $.getInterceptor$x(t4);
                    t6 = t5.get$x(t4);
                    if (t6 >>> 0 !== t6 || t6 >= t3.length)
                      throw $.ioore(t6);
                    $.$index$asx($.$index$asx(t3[t6], t5.get$y(t4)), 0).set$creep(0);
                  }
                  if (0 >= targets.length)
                    throw $.ioore(0);
                  dx = $.$sub$n($.$add$ns($.$mul$n($.get$x$x(targets[0]), t1), t2), center.x);
                  if (0 >= targets.length)
                    throw $.ioore(0);
                  dy = $.$sub$n($.$add$ns($.$mul$n($.get$y$x(targets[0]), t1), t2), center.y);
                  t3 = this.buildings;
                  if (t >= t3.length)
                    throw $.ioore(t);
                  t3 = t3[t];
                  if (typeof dy !== "number")
                    $.throwExpression(new $.ArgumentError(dy));
                  if (typeof dx !== "number")
                    $.throwExpression(new $.ArgumentError(dx));
                  t3.set$targetAngle(Math.atan2(dy, dx) + 1.5707963267948966);
                  t3 = this.buildings;
                  if (t >= t3.length)
                    throw $.ioore(t);
                  t3 = t3[t];
                  if (0 >= targets.length)
                    throw $.ioore(0);
                  t4 = targets[0];
                  t5 = $.getInterceptor$x(t4);
                  t3.set$weaponTargetPosition(new $.Vector(t5.get$x(t4), t5.get$y(t4)));
                  t4 = this.buildings;
                  if (t >= t4.length)
                    throw $.ioore(t);
                  t4 = t4[t];
                  t4.set$energy(t4.get$energy() - 1);
                  t4 = this.buildings;
                  if (t >= t4.length)
                    throw $.ioore(t);
                  t4[t].set$operating(true);
                  t4 = this.smokes;
                  if (0 >= targets.length)
                    throw $.ioore(0);
                  t5 = $.$add$ns($.$mul$n($.get$x$x(targets[0]), t1), t2);
                  if (0 >= targets.length)
                    throw $.ioore(0);
                  t5 = new $.Vector(t5, $.$add$ns($.$mul$n($.get$y$x(targets[0]), t1), t2));
                  t3 = new $.Smoke(null, null, null);
                  t3.position = new $.Vector(t5.x, t5.y);
                  t3.frame = 0;
                  t3.imageID = "smoke";
                  t4.push(t3);
                  $.engine.playSound$2("laser", position);
                  break;
                }
                ++r;
              }
            } else {
              t3 = this.buildings;
              if (t >= t3.length)
                throw $.ioore(t);
              if ($.$eq(t3[t].get$imageID(), "mortar")) {
                t3 = this.buildings;
                if (t >= t3.length)
                  throw $.ioore(t);
                t3 = t3[t];
                t3 = t3.get$energy() > 0 && t3.get$energyTimer() > 200;
              } else
                t3 = false;
              if (t3) {
                t3 = this.buildings;
                if (t >= t3.length)
                  throw $.ioore(t);
                t3[t].set$energyTimer(0);
                t3 = $.getInterceptor$x(position);
                t4 = t3.get$x(position);
                t5 = this.buildings;
                if (t >= t5.length)
                  throw $.ioore(t);
                i = $.$sub$n(t4, t5[t].get$weaponRadius());
                if (i !== (i | 0))
                  return this.checkOperating$0$bailout(7, t, center, position, t2, 0, t1, i, 0, 0, 0, 0, t3);
                target = null;
                highestCreep = 0;
                while (true) {
                  t4 = t3.get$x(position);
                  t5 = this.buildings;
                  if (t >= t5.length)
                    throw $.ioore(t);
                  if (!$.JSNumber_methods.$le(i, $.$add$ns(t4, t5[t].get$weaponRadius())))
                    break;
                  t4 = t3.get$y(position);
                  t5 = this.buildings;
                  if (t >= t5.length)
                    throw $.ioore(t);
                  j = $.$sub$n(t4, t5[t].get$weaponRadius());
                  if (typeof j !== "number")
                    return this.checkOperating$0$bailout(8, t, center, position, t2, 0, t1, i, $.JSNumber_methods, target, 0, j, t3, 0, 0, 0, 0, 0, 0, highestCreep);
                  t5 = i * t1 + t2;
                  while (true) {
                    t4 = t3.get$y(position);
                    t6 = this.buildings;
                    if (t >= t6.length)
                      throw $.ioore(t);
                    if (!$.JSNumber_methods.$le(j, $.$add$ns(t4, t6[t].get$weaponRadius())))
                      break;
                    if (this.withinWorld$2(i, j)) {
                      t4 = center.x;
                      if (typeof t4 !== "number")
                        throw $.iae(t4);
                      t4 = t5 - t4;
                      t4 = Math.pow(t4, 2);
                      t6 = center.y;
                      if (typeof t6 !== "number")
                        throw $.iae(t6);
                      t6 = j * t1 + t2 - t6;
                      t6 = Math.pow(t6, 2);
                      t7 = this.buildings;
                      if (t >= t7.length)
                        throw $.ioore(t);
                      t7 = t7[t].get$weaponRadius() * t1;
                      if (t4 + t6 <= Math.pow(t7, 2)) {
                        t4 = this.world.tiles;
                        if (i < 0 || i >= t4.length)
                          throw $.ioore(i);
                        t4 = t4[i];
                        if (typeof t4 !== "string" && (typeof t4 !== "object" || t4 === null || t4.constructor !== Array && !$.isJsIndexable(t4, t4[$.dispatchPropertyName])))
                          return this.checkOperating$0$bailout(9, t, center, position, t2, t4, t1, i, $.JSNumber_methods, target, 0, j, t3, $.JSNumber_methods, 0, 0, 0, 0, 0, highestCreep);
                        if (j >>> 0 !== j || j >= t4.length)
                          throw $.ioore(j);
                        if ($.$gt$n($.$index$asx(t4[j], 0).get$creep(), 0)) {
                          t4 = this.world.tiles;
                          if (i >= t4.length)
                            throw $.ioore(i);
                          t4 = t4[i];
                          if (typeof t4 !== "string" && (typeof t4 !== "object" || t4 === null || t4.constructor !== Array && !$.isJsIndexable(t4, t4[$.dispatchPropertyName])))
                            return this.checkOperating$0$bailout(10, t, center, position, t2, t4, t1, i, $.JSNumber_methods, target, 0, j, t3, $.JSNumber_methods, 0, 0, 0, 0, 0, highestCreep);
                          if (j >= t4.length)
                            throw $.ioore(j);
                          t4 = $.$ge$n($.$index$asx(t4[j], 0).get$creep(), highestCreep);
                        } else
                          t4 = false;
                      } else
                        t4 = false;
                      if (t4) {
                        t4 = this.world.tiles;
                        if (i < 0 || i >= t4.length)
                          throw $.ioore(i);
                        t4 = t4[i];
                        if (typeof t4 !== "string" && (typeof t4 !== "object" || t4 === null || t4.constructor !== Array && !$.isJsIndexable(t4, t4[$.dispatchPropertyName])))
                          return this.checkOperating$0$bailout(11, t, center, position, t2, t4, t1, i, $.JSNumber_methods, 0, 0, j, t3, $.JSNumber_methods);
                        if (j >>> 0 !== j || j >= t4.length)
                          throw $.ioore(j);
                        highestCreep = $.$index$asx(t4[j], 0).get$creep();
                        target = new $.Vector(i, j);
                      }
                    }
                    ++j;
                  }
                  ++i;
                }
                if (target != null) {
                  $.engine.playSound$2("shot", position);
                  shell = new $.Shell(center, new $.Vector($.$add$ns($.$mul$n(target.x, t1), t2), $.$add$ns($.$mul$n(target.y, t1), t2)), new $.Vector(0, 0), "shell", false, 0, 0);
                  shell.init$0();
                  this.shells.push(shell);
                  t3 = this.buildings;
                  if (t >= t3.length)
                    throw $.ioore(t);
                  t3 = t3[t];
                  t3.set$energy(t3.get$energy() - 1);
                }
              } else {
                t3 = this.buildings;
                if (t >= t3.length)
                  throw $.ioore(t);
                if ($.$eq(t3[t].get$imageID(), "beam")) {
                  t3 = this.buildings;
                  if (t >= t3.length)
                    throw $.ioore(t);
                  t3 = t3[t];
                  t3 = t3.get$energy() > 0 && t3.get$energyTimer() > 0;
                } else
                  t3 = false;
                if (t3) {
                  t3 = this.buildings;
                  if (t >= t3.length)
                    throw $.ioore(t);
                  t3[t].set$energyTimer(0);
                  for (i = 0; t3 = this.spores, i < t3.length; ++i) {
                    sporeCenter = t3[i].getCenter$0();
                    t3 = $.$sub$n(sporeCenter.x, center.x);
                    if (typeof t3 !== "number")
                      $.throwExpression(new $.ArgumentError(t3));
                    t3 = Math.pow(t3, 2);
                    t4 = $.$sub$n(sporeCenter.y, center.y);
                    if (typeof t4 !== "number")
                      $.throwExpression(new $.ArgumentError(t4));
                    t4 = Math.pow(t4, 2);
                    t5 = this.buildings;
                    if (t >= t5.length)
                      throw $.ioore(t);
                    t5 = t5[t].get$weaponRadius() * t1;
                    if (t3 + t4 <= Math.pow(t5, 2)) {
                      t3 = this.buildings;
                      if (t >= t3.length)
                        throw $.ioore(t);
                      t3[t].set$weaponTargetPosition(sporeCenter);
                      t3 = this.buildings;
                      if (t >= t3.length)
                        throw $.ioore(t);
                      t3 = t3[t];
                      t3.set$energy(t3.get$energy() - 0.1);
                      t3 = this.buildings;
                      if (t >= t3.length)
                        throw $.ioore(t);
                      t3[t].set$operating(true);
                      t3 = this.spores;
                      if (i >= t3.length)
                        throw $.ioore(i);
                      t3 = t3[i];
                      t3.set$health(t3.get$health() - 2);
                      t3 = this.spores;
                      if (i >= t3.length)
                        throw $.ioore(i);
                      t3 = t3[i];
                      if (t3.get$health() <= 0) {
                        $.set$remove$ax(t3, true);
                        t3 = $.engine;
                        t4 = this.spores;
                        if (i >= t4.length)
                          throw $.ioore(i);
                        t4 = $.get$position$x(t4[i]);
                        t5 = $.getInterceptor$x(t4);
                        t6 = Math.floor($.$div$n(t5.get$x(t4), $.game.tileSize));
                        if (isNaN(t6))
                          $.throwExpression(new $.UnsupportedError("NaN"));
                        if (t6 == Infinity || t6 == -Infinity)
                          $.throwExpression(new $.UnsupportedError("Infinity"));
                        truncated = t6 < 0 ? $.JSNumber_methods.ceilToDouble$0(t6) : $.JSNumber_methods.floorToDouble$0(t6);
                        t6 = truncated == -0.0 ? 0 : truncated;
                        t4 = Math.floor($.$div$n(t5.get$y(t4), $.game.tileSize));
                        if (isNaN(t4))
                          $.throwExpression(new $.UnsupportedError("NaN"));
                        if (t4 == Infinity || t4 == -Infinity)
                          $.throwExpression(new $.UnsupportedError("Infinity"));
                        truncated = t4 < 0 ? $.JSNumber_methods.ceilToDouble$0(t4) : $.JSNumber_methods.floorToDouble$0(t4);
                        t4 = truncated == -0.0 ? 0 : truncated;
                        t3.playSound$2("explosion", new $.Vector(t6, t4));
                        t4 = this.explosions;
                        t6 = new $.Explosion(null, null, null);
                        t6.position = new $.Vector(sporeCenter.x, sporeCenter.y);
                        t6.frame = 0;
                        t6.imageID = "explosion";
                        t4.push(t6);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  checkOperating$0$bailout: function(state0, t, center, position, t2, t4, t1, i, t6, target, lowestTile, j, t3, t7, tileHeight, radius, targets, height, r, highestCreep) {
    switch (state0) {
      case 0:
        t1 = this.tileSize;
        t2 = t1 / 2;
        t = 0;
      default:
        var emitterCenter, t5, t8, terraformElement, tilesToRedraw, dx, dy, shell, sporeCenter, truncated;
        L0:
          while (true)
            switch (state0) {
              case 0:
                t3 = this.buildings;
                if (!(t < t3.length))
                  break L0;
                t3[t].set$operating(false);
                t3 = this.buildings;
                if (t >= t3.length)
                  throw $.ioore(t);
                t3 = t3[t];
              default:
                if (state0 === 11 || state0 === 10 || state0 === 9 || state0 === 8 || state0 === 7 || state0 === 6 || state0 === 5 || state0 === 4 || state0 === 3 || state0 === 2 || state0 === 1 || state0 === 0 && t3.get$needsEnergy() && t3.get$active() && $.get$status$x(t3) === "IDLE")
                  switch (state0) {
                    case 0:
                      t3.set$energyTimer(t3.get$energyTimer() + 1);
                      t3 = this.buildings;
                      if (t >= t3.length)
                        throw $.ioore(t);
                      position = $.get$position$x(t3[t]);
                      t3 = this.buildings;
                      if (t >= t3.length)
                        throw $.ioore(t);
                      center = t3[t].getCenter$0();
                      t3 = this.buildings;
                      if (t >= t3.length)
                        throw $.ioore(t);
                      if ($.$eq(t3[t].get$imageID(), "analyzer")) {
                        t3 = this.buildings;
                        if (t >= t3.length)
                          throw $.ioore(t);
                        t3 = t3[t].get$energy() > 0;
                      } else
                        t3 = false;
                      if (t3) {
                        t3 = this.buildings;
                        if (t >= t3.length)
                          throw $.ioore(t);
                        t3 = t3[t];
                        if (t3.get$weaponTargetPosition() == null)
                          for (i = 0; t3 = this.emitters, i < t3.length; ++i) {
                            emitterCenter = t3[i].getCenter$0();
                            t3 = $.$sub$n(emitterCenter.x, center.x);
                            if (typeof t3 !== "number")
                              $.throwExpression(new $.ArgumentError(t3));
                            t3 = Math.pow(t3, 2);
                            t4 = $.$sub$n(emitterCenter.y, center.y);
                            if (typeof t4 !== "number")
                              $.throwExpression(new $.ArgumentError(t4));
                            t4 = Math.pow(t4, 2);
                            t5 = this.buildings;
                            if (t >= t5.length)
                              throw $.ioore(t);
                            t5 = t5[t].get$weaponRadius() * t1;
                            if (t3 + t4 <= Math.pow(t5, 2)) {
                              t3 = this.emitters;
                              if (i >= t3.length)
                                throw $.ioore(i);
                              t3 = t3[i];
                              if (t3.get$building() == null) {
                                t4 = this.buildings;
                                if (t >= t4.length)
                                  throw $.ioore(t);
                                t3.set$building(t4[t]);
                                t4 = this.buildings;
                                if (t >= t4.length)
                                  throw $.ioore(t);
                                t4 = t4[t];
                                t3 = this.emitters;
                                if (i >= t3.length)
                                  throw $.ioore(i);
                                t4.set$weaponTargetPosition($.get$position$x(t3[i]));
                                break;
                              }
                            }
                          }
                        else {
                          if (t3.get$energyTimer() > 20) {
                            t3.set$energyTimer(0);
                            t3 = this.buildings;
                            if (t >= t3.length)
                              throw $.ioore(t);
                            t3 = t3[t];
                            t3.set$energy(t3.get$energy() - 1);
                          }
                          t3 = this.buildings;
                          if (t >= t3.length)
                            throw $.ioore(t);
                          t3[t].set$operating(true);
                        }
                      }
                      t3 = this.buildings;
                      if (t >= t3.length)
                        throw $.ioore(t);
                      if ($.$eq(t3[t].get$imageID(), "terp")) {
                        t3 = this.buildings;
                        if (t >= t3.length)
                          throw $.ioore(t);
                        t3 = t3[t].get$energy() > 0;
                      } else
                        t3 = false;
                    default:
                      if (state0 === 3 || state0 === 2 || state0 === 1 || state0 === 0 && t3)
                        switch (state0) {
                          case 0:
                            t3 = this.buildings;
                            if (t >= t3.length)
                              throw $.ioore(t);
                            t3 = t3[t];
                          default:
                            if (state0 === 3 || state0 === 2 || state0 === 1 || state0 === 0 && t3.get$weaponTargetPosition() == null)
                              switch (state0) {
                                case 0:
                                  t4 = $.getInterceptor$x(position);
                                  i = $.$sub$n(t4.get$x(position), t3.get$weaponRadius());
                                case 1:
                                  state0 = 0;
                                  target = null;
                                  lowestTile = 10;
                                default:
                                  L1:
                                    while (true)
                                      switch (state0) {
                                        case 0:
                                          t3 = t4.get$x(position);
                                          t5 = this.buildings;
                                          if (t >= t5.length)
                                            throw $.ioore(t);
                                          t6 = $.getInterceptor$n(i);
                                          if (!t6.$le(i, $.$add$ns(t3, t5[t].get$weaponRadius())))
                                            break L1;
                                          t3 = t4.get$y(position);
                                          t5 = this.buildings;
                                          if (t >= t5.length)
                                            throw $.ioore(t);
                                          j = $.$sub$n(t3, t5[t].get$weaponRadius());
                                        case 2:
                                          state0 = 0;
                                        case 3:
                                          L2:
                                            while (true)
                                              switch (state0) {
                                                case 0:
                                                  t3 = t4.get$y(position);
                                                  t5 = this.buildings;
                                                  if (t >= t5.length)
                                                    throw $.ioore(t);
                                                  t7 = $.getInterceptor$n(j);
                                                  if (!t7.$le(j, $.$add$ns(t3, t5[t].get$weaponRadius())))
                                                    break L2;
                                                case 3:
                                                  if (state0 === 3 || state0 === 0 && this.withinWorld$2(i, j))
                                                    switch (state0) {
                                                      case 0:
                                                        t3 = $.$sub$n($.$add$ns(t6.$mul(i, t1), t2), center.x);
                                                        if (typeof t3 !== "number")
                                                          $.throwExpression(new $.ArgumentError(t3));
                                                        t3 = Math.pow(t3, 2);
                                                        t5 = $.$sub$n($.$add$ns(t7.$mul(j, t1), t2), center.y);
                                                        if (typeof t5 !== "number")
                                                          $.throwExpression(new $.ArgumentError(t5));
                                                        t5 = Math.pow(t5, 2);
                                                        tileHeight = this.getHighestTerrain$1(new $.Vector(i, j));
                                                        t8 = this.buildings;
                                                        if (t >= t8.length)
                                                          throw $.ioore(t);
                                                        t8 = t8[t].get$weaponRadius() * t1;
                                                      case 3:
                                                        if (state0 === 3 || state0 === 0 && t3 + t5 <= Math.pow(t8, 2))
                                                          switch (state0) {
                                                            case 0:
                                                              t3 = this.world.terraform;
                                                              if (i >>> 0 !== i || i >= t3.length)
                                                                throw $.ioore(i);
                                                              t3 = t3[i];
                                                            case 3:
                                                              state0 = 0;
                                                              t3 = $.$gt$n($.$index$asx($.$index$asx(t3, j), "target"), -1) && tileHeight <= lowestTile;
                                                          }
                                                        else
                                                          t3 = false;
                                                        if (t3) {
                                                          target = new $.Vector(i, j);
                                                          lowestTile = tileHeight;
                                                        }
                                                    }
                                                  j = t7.$add(j, 1);
                                              }
                                          i = t6.$add(i, 1);
                                      }
                                  if (target != null) {
                                    t3 = this.buildings;
                                    if (t >= t3.length)
                                      throw $.ioore(t);
                                    t3[t].set$weaponTargetPosition(target);
                                  }
                              }
                            else {
                              if (t3.get$energyTimer() > 20) {
                                t3.set$energyTimer(0);
                                t3 = this.buildings;
                                if (t >= t3.length)
                                  throw $.ioore(t);
                                t3 = t3[t];
                                t3.set$energy(t3.get$energy() - 1);
                              }
                              t3 = this.buildings;
                              if (t >= t3.length)
                                throw $.ioore(t);
                              t3[t].set$operating(true);
                              t3 = this.world.terraform;
                              t4 = this.buildings;
                              if (t >= t4.length)
                                throw $.ioore(t);
                              t4 = t4[t].get$weaponTargetPosition();
                              t5 = $.getInterceptor$x(t4);
                              t6 = t5.get$x(t4);
                              if (t6 >>> 0 !== t6 || t6 >= t3.length)
                                throw $.ioore(t6);
                              terraformElement = $.$index$asx(t3[t6], t5.get$y(t4));
                              t4 = $.getInterceptor$asx(terraformElement);
                              t4.$indexSet(terraformElement, "progress", $.$add$ns(t4.$index(terraformElement, "progress"), 1));
                              if ($.$eq(t4.$index(terraformElement, "progress"), 100)) {
                                t4.$indexSet(terraformElement, "progress", 0);
                                t3 = this.buildings;
                                if (t >= t3.length)
                                  throw $.ioore(t);
                                height = this.getHighestTerrain$1(t3[t].get$weaponTargetPosition());
                                tilesToRedraw = $.List_List($);
                                t3 = $.JSNumber_methods.$lt(height, t4.$index(terraformElement, "target"));
                                t5 = this.world;
                                t6 = this.buildings;
                                if (t3) {
                                  t3 = t5.tiles;
                                  if (t >= t6.length)
                                    throw $.ioore(t);
                                  t6 = t6[t].get$weaponTargetPosition();
                                  t5 = $.getInterceptor$x(t6);
                                  t7 = t5.get$x(t6);
                                  if (t7 >>> 0 !== t7 || t7 >= t3.length)
                                    throw $.ioore(t7);
                                  t8 = height + 1;
                                  $.$index$asx($.$index$asx(t3[t7], t5.get$y(t6)), t8).set$full(true);
                                  t6 = this.buildings;
                                  if (t >= t6.length)
                                    throw $.ioore(t);
                                  t6 = t6[t].get$weaponTargetPosition();
                                  t5 = $.getInterceptor$x(t6);
                                  tilesToRedraw.push(new $.Vector3(t5.get$x(t6), t5.get$y(t6), t8));
                                  t6 = this.buildings;
                                  if (t >= t6.length)
                                    throw $.ioore(t);
                                  t6 = $.$sub$n($.get$x$x(t6[t].get$weaponTargetPosition()), 1);
                                  t5 = this.buildings;
                                  if (t >= t5.length)
                                    throw $.ioore(t);
                                  tilesToRedraw.push(new $.Vector3(t6, $.get$y$x(t5[t].get$weaponTargetPosition()), t8));
                                  t5 = this.buildings;
                                  if (t >= t5.length)
                                    throw $.ioore(t);
                                  t5 = t5[t].get$weaponTargetPosition();
                                  t6 = $.getInterceptor$x(t5);
                                  tilesToRedraw.push(new $.Vector3(t6.get$x(t5), $.$sub$n(t6.get$y(t5), 1), t8));
                                  t5 = this.buildings;
                                  if (t >= t5.length)
                                    throw $.ioore(t);
                                  t5 = $.$add$ns($.get$x$x(t5[t].get$weaponTargetPosition()), 1);
                                  t6 = this.buildings;
                                  if (t >= t6.length)
                                    throw $.ioore(t);
                                  tilesToRedraw.push(new $.Vector3(t5, $.get$y$x(t6[t].get$weaponTargetPosition()), t8));
                                  t6 = this.buildings;
                                  if (t >= t6.length)
                                    throw $.ioore(t);
                                  t6 = t6[t].get$weaponTargetPosition();
                                  t5 = $.getInterceptor$x(t6);
                                  tilesToRedraw.push(new $.Vector3(t5.get$x(t6), $.$add$ns(t5.get$y(t6), 1), t8));
                                } else {
                                  t3 = t5.tiles;
                                  if (t >= t6.length)
                                    throw $.ioore(t);
                                  t6 = t6[t].get$weaponTargetPosition();
                                  t5 = $.getInterceptor$x(t6);
                                  t7 = t5.get$x(t6);
                                  if (t7 >>> 0 !== t7 || t7 >= t3.length)
                                    throw $.ioore(t7);
                                  $.$index$asx($.$index$asx(t3[t7], t5.get$y(t6)), height).set$full(false);
                                  t6 = this.buildings;
                                  if (t >= t6.length)
                                    throw $.ioore(t);
                                  t6 = t6[t].get$weaponTargetPosition();
                                  t5 = $.getInterceptor$x(t6);
                                  tilesToRedraw.push(new $.Vector3(t5.get$x(t6), t5.get$y(t6), height));
                                  t6 = this.buildings;
                                  if (t >= t6.length)
                                    throw $.ioore(t);
                                  t6 = $.$sub$n($.get$x$x(t6[t].get$weaponTargetPosition()), 1);
                                  t5 = this.buildings;
                                  if (t >= t5.length)
                                    throw $.ioore(t);
                                  tilesToRedraw.push(new $.Vector3(t6, $.get$y$x(t5[t].get$weaponTargetPosition()), height));
                                  t5 = this.buildings;
                                  if (t >= t5.length)
                                    throw $.ioore(t);
                                  t5 = t5[t].get$weaponTargetPosition();
                                  t6 = $.getInterceptor$x(t5);
                                  tilesToRedraw.push(new $.Vector3(t6.get$x(t5), $.$sub$n(t6.get$y(t5), 1), height));
                                  t5 = this.buildings;
                                  if (t >= t5.length)
                                    throw $.ioore(t);
                                  t5 = $.$add$ns($.get$x$x(t5[t].get$weaponTargetPosition()), 1);
                                  t6 = this.buildings;
                                  if (t >= t6.length)
                                    throw $.ioore(t);
                                  tilesToRedraw.push(new $.Vector3(t5, $.get$y$x(t6[t].get$weaponTargetPosition()), height));
                                  t6 = this.buildings;
                                  if (t >= t6.length)
                                    throw $.ioore(t);
                                  t6 = t6[t].get$weaponTargetPosition();
                                  t5 = $.getInterceptor$x(t6);
                                  tilesToRedraw.push(new $.Vector3(t5.get$x(t6), $.$add$ns(t5.get$y(t6), 1), height));
                                }
                                this.redrawTile$1(tilesToRedraw);
                                t3 = this.buildings;
                                if (t >= t3.length)
                                  throw $.ioore(t);
                                if (this.getHighestTerrain$1(t3[t].get$weaponTargetPosition()) === t4.$index(terraformElement, "target")) {
                                  t3 = this.world.terraform;
                                  t4 = this.buildings;
                                  if (t >= t4.length)
                                    throw $.ioore(t);
                                  t4 = t4[t].get$weaponTargetPosition();
                                  t5 = $.getInterceptor$x(t4);
                                  t6 = t5.get$x(t4);
                                  if (t6 >>> 0 !== t6 || t6 >= t3.length)
                                    throw $.ioore(t6);
                                  $.$indexSet$ax($.$index$asx(t3[t6], t5.get$y(t4)), "progress", 0);
                                  t4 = this.world.terraform;
                                  t5 = this.buildings;
                                  if (t >= t5.length)
                                    throw $.ioore(t);
                                  t5 = t5[t].get$weaponTargetPosition();
                                  t6 = $.getInterceptor$x(t5);
                                  t3 = t6.get$x(t5);
                                  if (t3 >>> 0 !== t3 || t3 >= t4.length)
                                    throw $.ioore(t3);
                                  $.$indexSet$ax($.$index$asx(t4[t3], t6.get$y(t5)), "target", -1);
                                }
                                t3 = this.buildings;
                                if (t >= t3.length)
                                  throw $.ioore(t);
                                t3[t].set$weaponTargetPosition(null);
                                t3 = this.buildings;
                                if (t >= t3.length)
                                  throw $.ioore(t);
                                t3[t].set$operating(false);
                              }
                            }
                        }
                      else
                        switch (state0) {
                          case 0:
                            t3 = this.buildings;
                            if (t >= t3.length)
                              throw $.ioore(t);
                            if ($.$eq(t3[t].get$imageID(), "shield")) {
                              t3 = this.buildings;
                              if (t >= t3.length)
                                throw $.ioore(t);
                              t3 = t3[t].get$energy() > 0;
                            } else
                              t3 = false;
                          default:
                            if (state0 === 0 && t3) {
                              t3 = this.buildings;
                              if (t >= t3.length)
                                throw $.ioore(t);
                              t3 = t3[t];
                              if (t3.get$energyTimer() > 20) {
                                t3.set$energyTimer(0);
                                t3 = this.buildings;
                                if (t >= t3.length)
                                  throw $.ioore(t);
                                t3 = t3[t];
                                t3.set$energy(t3.get$energy() - 1);
                              }
                              t3 = this.buildings;
                              if (t >= t3.length)
                                throw $.ioore(t);
                              t3[t].set$operating(true);
                            } else
                              switch (state0) {
                                case 0:
                                  t3 = this.buildings;
                                  if (t >= t3.length)
                                    throw $.ioore(t);
                                  if ($.$eq(t3[t].get$imageID(), "cannon")) {
                                    t3 = this.buildings;
                                    if (t >= t3.length)
                                      throw $.ioore(t);
                                    t3 = t3[t];
                                    t3 = t3.get$energy() > 0 && t3.get$energyTimer() > 10;
                                  } else
                                    t3 = false;
                                default:
                                  if (state0 === 6 || state0 === 5 || state0 === 4 || state0 === 0 && t3)
                                    switch (state0) {
                                      case 0:
                                        t3 = this.buildings;
                                        if (t >= t3.length)
                                          throw $.ioore(t);
                                        t3[t].set$energyTimer(0);
                                        t3 = this.buildings;
                                        if (t >= t3.length)
                                          throw $.ioore(t);
                                        height = this.getHighestTerrain$1($.get$position$x(t3[t]));
                                        t3 = $.getInterceptor$x(position);
                                        r = 0;
                                      default:
                                        L3:
                                          while (true)
                                            switch (state0) {
                                              case 0:
                                                t4 = this.buildings;
                                                if (t >= t4.length)
                                                  throw $.ioore(t);
                                                if (!(r < t4[t].get$weaponRadius() + 1))
                                                  break L3;
                                                targets = $.List_List($);
                                                radius = r * t1;
                                                t4 = t3.get$x(position);
                                                t5 = this.buildings;
                                                if (t >= t5.length)
                                                  throw $.ioore(t);
                                                i = $.$sub$n(t4, t5[t].get$weaponRadius());
                                              case 4:
                                                state0 = 0;
                                              default:
                                                L4:
                                                  while (true)
                                                    switch (state0) {
                                                      case 0:
                                                        t4 = t3.get$x(position);
                                                        t5 = this.buildings;
                                                        if (t >= t5.length)
                                                          throw $.ioore(t);
                                                        t6 = $.getInterceptor$n(i);
                                                        if (!t6.$le(i, $.$add$ns(t4, t5[t].get$weaponRadius())))
                                                          break L4;
                                                        t4 = t3.get$y(position);
                                                        t5 = this.buildings;
                                                        if (t >= t5.length)
                                                          throw $.ioore(t);
                                                        j = $.$sub$n(t4, t5[t].get$weaponRadius());
                                                      case 5:
                                                        state0 = 0;
                                                      case 6:
                                                        L5:
                                                          while (true)
                                                            switch (state0) {
                                                              case 0:
                                                                t4 = t3.get$y(position);
                                                                t5 = this.buildings;
                                                                if (t >= t5.length)
                                                                  throw $.ioore(t);
                                                                t7 = $.getInterceptor$n(j);
                                                                if (!t7.$le(j, $.$add$ns(t4, t5[t].get$weaponRadius())))
                                                                  break L5;
                                                              case 6:
                                                                if (state0 === 6 || state0 === 0 && this.withinWorld$2(i, j))
                                                                  switch (state0) {
                                                                    case 0:
                                                                    case 6:
                                                                      if (state0 === 6 || state0 === 0 && this.getHighestTerrain$1(new $.Vector(i, j)) <= height)
                                                                        switch (state0) {
                                                                          case 0:
                                                                            t4 = $.$sub$n($.$add$ns(t6.$mul(i, t1), t2), center.x);
                                                                            if (typeof t4 !== "number")
                                                                              $.throwExpression(new $.ArgumentError(t4));
                                                                            t4 = Math.pow(t4, 2);
                                                                            t5 = $.$sub$n($.$add$ns(t7.$mul(j, t1), t2), center.y);
                                                                            if (typeof t5 !== "number")
                                                                              $.throwExpression(new $.ArgumentError(t5));
                                                                            t5 = Math.pow(t5, 2);
                                                                          case 6:
                                                                            if (state0 === 6 || state0 === 0 && t4 + t5 <= Math.pow(radius, 2))
                                                                              switch (state0) {
                                                                                case 0:
                                                                                  t4 = this.world.tiles;
                                                                                  if (i >>> 0 !== i || i >= t4.length)
                                                                                    throw $.ioore(i);
                                                                                  t4 = t4[i];
                                                                                case 6:
                                                                                  state0 = 0;
                                                                                  t4 = $.$gt$n($.$index$asx($.$index$asx(t4, j), 0).get$creep(), 0);
                                                                              }
                                                                            else
                                                                              t4 = false;
                                                                            if (t4)
                                                                              targets.push(new $.Vector(i, j));
                                                                        }
                                                                  }
                                                                j = t7.$add(j, 1);
                                                            }
                                                        i = t6.$add(i, 1);
                                                    }
                                                if (targets.length > 0) {
                                                  $.Helper_shuffle(targets);
                                                  t3 = this.world.tiles;
                                                  if (0 >= targets.length)
                                                    throw $.ioore(0);
                                                  t4 = targets[0];
                                                  t5 = $.getInterceptor$x(t4);
                                                  t6 = t5.get$x(t4);
                                                  if (t6 >>> 0 !== t6 || t6 >= t3.length)
                                                    throw $.ioore(t6);
                                                  t4 = $.$index$asx($.$index$asx(t3[t6], t5.get$y(t4)), 0);
                                                  t4.set$creep($.$sub$n(t4.get$creep(), 10));
                                                  t3 = this.world.tiles;
                                                  if (0 >= targets.length)
                                                    throw $.ioore(0);
                                                  t4 = targets[0];
                                                  t5 = $.getInterceptor$x(t4);
                                                  t6 = t5.get$x(t4);
                                                  if (t6 >>> 0 !== t6 || t6 >= t3.length)
                                                    throw $.ioore(t6);
                                                  if ($.$lt$n($.$index$asx($.$index$asx(t3[t6], t5.get$y(t4)), 0).get$creep(), 0)) {
                                                    t3 = this.world.tiles;
                                                    if (0 >= targets.length)
                                                      throw $.ioore(0);
                                                    t4 = targets[0];
                                                    t5 = $.getInterceptor$x(t4);
                                                    t6 = t5.get$x(t4);
                                                    if (t6 >>> 0 !== t6 || t6 >= t3.length)
                                                      throw $.ioore(t6);
                                                    $.$index$asx($.$index$asx(t3[t6], t5.get$y(t4)), 0).set$creep(0);
                                                  }
                                                  if (0 >= targets.length)
                                                    throw $.ioore(0);
                                                  dx = $.$sub$n($.$add$ns($.$mul$n($.get$x$x(targets[0]), t1), t2), center.x);
                                                  if (0 >= targets.length)
                                                    throw $.ioore(0);
                                                  dy = $.$sub$n($.$add$ns($.$mul$n($.get$y$x(targets[0]), t1), t2), center.y);
                                                  t3 = this.buildings;
                                                  if (t >= t3.length)
                                                    throw $.ioore(t);
                                                  t3 = t3[t];
                                                  if (typeof dy !== "number")
                                                    $.throwExpression(new $.ArgumentError(dy));
                                                  if (typeof dx !== "number")
                                                    $.throwExpression(new $.ArgumentError(dx));
                                                  t3.set$targetAngle(Math.atan2(dy, dx) + 1.5707963267948966);
                                                  t3 = this.buildings;
                                                  if (t >= t3.length)
                                                    throw $.ioore(t);
                                                  t3 = t3[t];
                                                  if (0 >= targets.length)
                                                    throw $.ioore(0);
                                                  t4 = targets[0];
                                                  t5 = $.getInterceptor$x(t4);
                                                  t3.set$weaponTargetPosition(new $.Vector(t5.get$x(t4), t5.get$y(t4)));
                                                  t4 = this.buildings;
                                                  if (t >= t4.length)
                                                    throw $.ioore(t);
                                                  t4 = t4[t];
                                                  t4.set$energy(t4.get$energy() - 1);
                                                  t4 = this.buildings;
                                                  if (t >= t4.length)
                                                    throw $.ioore(t);
                                                  t4[t].set$operating(true);
                                                  t4 = this.smokes;
                                                  if (0 >= targets.length)
                                                    throw $.ioore(0);
                                                  t5 = $.$add$ns($.$mul$n($.get$x$x(targets[0]), t1), t2);
                                                  if (0 >= targets.length)
                                                    throw $.ioore(0);
                                                  t5 = new $.Vector(t5, $.$add$ns($.$mul$n($.get$y$x(targets[0]), t1), t2));
                                                  t3 = new $.Smoke(null, null, null);
                                                  t3.position = new $.Vector(t5.x, t5.y);
                                                  t3.frame = 0;
                                                  t3.imageID = "smoke";
                                                  t4.push(t3);
                                                  $.engine.playSound$2("laser", position);
                                                  break L3;
                                                }
                                                ++r;
                                            }
                                    }
                                  else
                                    switch (state0) {
                                      case 0:
                                        t3 = this.buildings;
                                        if (t >= t3.length)
                                          throw $.ioore(t);
                                        if ($.$eq(t3[t].get$imageID(), "mortar")) {
                                          t3 = this.buildings;
                                          if (t >= t3.length)
                                            throw $.ioore(t);
                                          t3 = t3[t];
                                          t3 = t3.get$energy() > 0 && t3.get$energyTimer() > 200;
                                        } else
                                          t3 = false;
                                      default:
                                        if (state0 === 11 || state0 === 10 || state0 === 9 || state0 === 8 || state0 === 7 || state0 === 0 && t3)
                                          switch (state0) {
                                            case 0:
                                              t3 = this.buildings;
                                              if (t >= t3.length)
                                                throw $.ioore(t);
                                              t3[t].set$energyTimer(0);
                                              t3 = $.getInterceptor$x(position);
                                              t4 = t3.get$x(position);
                                              t5 = this.buildings;
                                              if (t >= t5.length)
                                                throw $.ioore(t);
                                              i = $.$sub$n(t4, t5[t].get$weaponRadius());
                                            case 7:
                                              state0 = 0;
                                              target = null;
                                              highestCreep = 0;
                                            default:
                                              L6:
                                                while (true)
                                                  switch (state0) {
                                                    case 0:
                                                      t4 = t3.get$x(position);
                                                      t5 = this.buildings;
                                                      if (t >= t5.length)
                                                        throw $.ioore(t);
                                                      t6 = $.getInterceptor$n(i);
                                                      if (!t6.$le(i, $.$add$ns(t4, t5[t].get$weaponRadius())))
                                                        break L6;
                                                      t4 = t3.get$y(position);
                                                      t5 = this.buildings;
                                                      if (t >= t5.length)
                                                        throw $.ioore(t);
                                                      j = $.$sub$n(t4, t5[t].get$weaponRadius());
                                                    case 8:
                                                      state0 = 0;
                                                    default:
                                                      L7:
                                                        while (true)
                                                          switch (state0) {
                                                            case 0:
                                                              t4 = t3.get$y(position);
                                                              t5 = this.buildings;
                                                              if (t >= t5.length)
                                                                throw $.ioore(t);
                                                              t7 = $.getInterceptor$n(j);
                                                              if (!t7.$le(j, $.$add$ns(t4, t5[t].get$weaponRadius())))
                                                                break L7;
                                                            default:
                                                              if (state0 === 11 || state0 === 10 || state0 === 9 || state0 === 0 && this.withinWorld$2(i, j))
                                                                switch (state0) {
                                                                  case 0:
                                                                    t4 = $.$sub$n($.$add$ns(t6.$mul(i, t1), t2), center.x);
                                                                    if (typeof t4 !== "number")
                                                                      $.throwExpression(new $.ArgumentError(t4));
                                                                    t4 = Math.pow(t4, 2);
                                                                    t5 = $.$sub$n($.$add$ns(t7.$mul(j, t1), t2), center.y);
                                                                    if (typeof t5 !== "number")
                                                                      $.throwExpression(new $.ArgumentError(t5));
                                                                    t5 = Math.pow(t5, 2);
                                                                    t8 = this.buildings;
                                                                    if (t >= t8.length)
                                                                      throw $.ioore(t);
                                                                    t8 = t8[t].get$weaponRadius() * t1;
                                                                  default:
                                                                    if (state0 === 10 || state0 === 9 || state0 === 0 && t4 + t5 <= Math.pow(t8, 2))
                                                                      switch (state0) {
                                                                        case 0:
                                                                          t4 = this.world.tiles;
                                                                          if (i >>> 0 !== i || i >= t4.length)
                                                                            throw $.ioore(i);
                                                                          t4 = t4[i];
                                                                        case 9:
                                                                          state0 = 0;
                                                                        case 10:
                                                                          if (state0 === 10 || state0 === 0 && $.$gt$n($.$index$asx($.$index$asx(t4, j), 0).get$creep(), 0))
                                                                            switch (state0) {
                                                                              case 0:
                                                                                t4 = this.world.tiles;
                                                                                if (i >= t4.length)
                                                                                  throw $.ioore(i);
                                                                                t4 = t4[i];
                                                                              case 10:
                                                                                state0 = 0;
                                                                                t4 = $.$ge$n($.$index$asx($.$index$asx(t4, j), 0).get$creep(), highestCreep);
                                                                            }
                                                                          else
                                                                            t4 = false;
                                                                      }
                                                                    else
                                                                      t4 = false;
                                                                  case 11:
                                                                    if (state0 === 11 || state0 === 0 && t4)
                                                                      switch (state0) {
                                                                        case 0:
                                                                          t4 = this.world.tiles;
                                                                          if (i >>> 0 !== i || i >= t4.length)
                                                                            throw $.ioore(i);
                                                                          t4 = t4[i];
                                                                        case 11:
                                                                          state0 = 0;
                                                                          highestCreep = $.$index$asx($.$index$asx(t4, j), 0).get$creep();
                                                                          target = new $.Vector(i, j);
                                                                      }
                                                                }
                                                              j = t7.$add(j, 1);
                                                          }
                                                      i = t6.$add(i, 1);
                                                  }
                                              if (target != null) {
                                                $.engine.playSound$2("shot", position);
                                                shell = new $.Shell(center, new $.Vector($.$add$ns($.$mul$n(target.x, t1), t2), $.$add$ns($.$mul$n(target.y, t1), t2)), new $.Vector(0, 0), "shell", false, 0, 0);
                                                shell.init$0();
                                                this.shells.push(shell);
                                                t3 = this.buildings;
                                                if (t >= t3.length)
                                                  throw $.ioore(t);
                                                t3 = t3[t];
                                                t3.set$energy(t3.get$energy() - 1);
                                              }
                                          }
                                        else {
                                          t3 = this.buildings;
                                          if (t >= t3.length)
                                            throw $.ioore(t);
                                          if ($.$eq(t3[t].get$imageID(), "beam")) {
                                            t3 = this.buildings;
                                            if (t >= t3.length)
                                              throw $.ioore(t);
                                            t3 = t3[t];
                                            t3 = t3.get$energy() > 0 && t3.get$energyTimer() > 0;
                                          } else
                                            t3 = false;
                                          if (t3) {
                                            t3 = this.buildings;
                                            if (t >= t3.length)
                                              throw $.ioore(t);
                                            t3[t].set$energyTimer(0);
                                            for (i = 0; t3 = this.spores, i < t3.length; ++i) {
                                              sporeCenter = t3[i].getCenter$0();
                                              t3 = $.$sub$n(sporeCenter.x, center.x);
                                              if (typeof t3 !== "number")
                                                $.throwExpression(new $.ArgumentError(t3));
                                              t3 = Math.pow(t3, 2);
                                              t4 = $.$sub$n(sporeCenter.y, center.y);
                                              if (typeof t4 !== "number")
                                                $.throwExpression(new $.ArgumentError(t4));
                                              t4 = Math.pow(t4, 2);
                                              t5 = this.buildings;
                                              if (t >= t5.length)
                                                throw $.ioore(t);
                                              t5 = t5[t].get$weaponRadius() * t1;
                                              if (t3 + t4 <= Math.pow(t5, 2)) {
                                                t3 = this.buildings;
                                                if (t >= t3.length)
                                                  throw $.ioore(t);
                                                t3[t].set$weaponTargetPosition(sporeCenter);
                                                t3 = this.buildings;
                                                if (t >= t3.length)
                                                  throw $.ioore(t);
                                                t3 = t3[t];
                                                t3.set$energy(t3.get$energy() - 0.1);
                                                t3 = this.buildings;
                                                if (t >= t3.length)
                                                  throw $.ioore(t);
                                                t3[t].set$operating(true);
                                                t3 = this.spores;
                                                if (i >= t3.length)
                                                  throw $.ioore(i);
                                                t3 = t3[i];
                                                t3.set$health(t3.get$health() - 2);
                                                t3 = this.spores;
                                                if (i >= t3.length)
                                                  throw $.ioore(i);
                                                t3 = t3[i];
                                                if (t3.get$health() <= 0) {
                                                  $.set$remove$ax(t3, true);
                                                  t3 = $.engine;
                                                  t4 = this.spores;
                                                  if (i >= t4.length)
                                                    throw $.ioore(i);
                                                  t4 = $.get$position$x(t4[i]);
                                                  t5 = $.getInterceptor$x(t4);
                                                  t6 = Math.floor($.$div$n(t5.get$x(t4), $.game.tileSize));
                                                  if (isNaN(t6))
                                                    $.throwExpression(new $.UnsupportedError("NaN"));
                                                  if (t6 == Infinity || t6 == -Infinity)
                                                    $.throwExpression(new $.UnsupportedError("Infinity"));
                                                  truncated = t6 < 0 ? $.JSNumber_methods.ceilToDouble$0(t6) : $.JSNumber_methods.floorToDouble$0(t6);
                                                  t6 = truncated == -0.0 ? 0 : truncated;
                                                  t4 = Math.floor($.$div$n(t5.get$y(t4), $.game.tileSize));
                                                  if (isNaN(t4))
                                                    $.throwExpression(new $.UnsupportedError("NaN"));
                                                  if (t4 == Infinity || t4 == -Infinity)
                                                    $.throwExpression(new $.UnsupportedError("Infinity"));
                                                  truncated = t4 < 0 ? $.JSNumber_methods.ceilToDouble$0(t4) : $.JSNumber_methods.floorToDouble$0(t4);
                                                  t4 = truncated == -0.0 ? 0 : truncated;
                                                  t3.playSound$2("explosion", new $.Vector(t6, t4));
                                                  t4 = this.explosions;
                                                  t6 = new $.Explosion(null, null, null);
                                                  t6.position = new $.Vector(sporeCenter.x, sporeCenter.y);
                                                  t6.frame = 0;
                                                  t6.imageID = "explosion";
                                                  t4.push(t6);
                                                }
                                              }
                                            }
                                          }
                                        }
                                    }
                              }
                        }
                  }
                ++t;
            }
    }
  },
  updateCollection$2: function(building, action) {
    var t1, height, centerBuilding, t2, t3, t4, t5, t6, i, j, positionCurrent, t7, positionCurrentCenter, tileHeight, t8, k, heightK, centerBuildingK;
    t1 = $.getInterceptor$x(building);
    height = this.getHighestTerrain$1(t1.get$position(building));
    centerBuilding = building.getCenter$0();
    for (t2 = this.tileSize, t3 = t2 * 6, t4 = action === "add", t5 = t2 / 2, t6 = action === "remove", i = -5; i < 7; ++i)
      for (j = -5; j < 7; ++j) {
        positionCurrent = new $.Vector($.$add$ns($.get$x$x(t1.get$position(building)), i), $.$add$ns($.get$y$x(t1.get$position(building)), j));
        t7 = positionCurrent.x;
        if (this.withinWorld$2(t7, positionCurrent.y)) {
          positionCurrentCenter = new $.Vector($.$add$ns($.$mul$n(t7, t2), t5), $.$add$ns($.$mul$n(positionCurrent.y, t2), t5));
          tileHeight = this.getHighestTerrain$1(positionCurrent);
          if (t4) {
            t7 = $.$sub$n(positionCurrentCenter.x, centerBuilding.x);
            if (typeof t7 !== "number")
              $.throwExpression(new $.ArgumentError(t7));
            t7 = Math.pow(t7, 2);
            t8 = $.$sub$n(positionCurrentCenter.y, centerBuilding.y);
            if (typeof t8 !== "number")
              $.throwExpression(new $.ArgumentError(t8));
            t8 = Math.pow(t8, 2);
            if (t7 + t8 < Math.pow(t3, 2))
              if (tileHeight === height) {
                t7 = this.world.tiles;
                t8 = positionCurrent.x;
                if (t8 >>> 0 !== t8 || t8 >= t7.length)
                  throw $.ioore(t8);
                $.$index$asx($.$index$asx(t7[t8], positionCurrent.y), tileHeight).set$collector(building);
              }
          } else if (t6) {
            t7 = $.$sub$n(positionCurrentCenter.x, centerBuilding.x);
            if (typeof t7 !== "number")
              $.throwExpression(new $.ArgumentError(t7));
            t7 = Math.pow(t7, 2);
            t8 = $.$sub$n(positionCurrentCenter.y, centerBuilding.y);
            if (typeof t8 !== "number")
              $.throwExpression(new $.ArgumentError(t8));
            t8 = Math.pow(t8, 2);
            if (t7 + t8 < Math.pow(t3, 2))
              if (tileHeight === height) {
                t7 = this.world.tiles;
                t8 = positionCurrent.x;
                if (t8 >>> 0 !== t8 || t8 >= t7.length)
                  throw $.ioore(t8);
                $.$index$asx($.$index$asx(t7[t8], positionCurrent.y), tileHeight).set$collector(null);
              }
            for (k = 0; t7 = this.buildings, k < t7.length; ++k) {
              if (!$.$eq(t7[k], building)) {
                t7 = this.buildings;
                if (k >= t7.length)
                  throw $.ioore(k);
                t7 = $.$eq(t7[k].get$imageID(), "collector");
              } else
                t7 = false;
              if (t7) {
                t7 = this.buildings;
                if (k >= t7.length)
                  throw $.ioore(k);
                t7 = $.get$x$x($.get$position$x(t7[k]));
                t8 = this.buildings;
                if (k >= t8.length)
                  throw $.ioore(k);
                heightK = this.getHighestTerrain$1(new $.Vector(t7, $.get$y$x($.get$position$x(t8[k]))));
                t8 = this.buildings;
                if (k >= t8.length)
                  throw $.ioore(k);
                centerBuildingK = t8[k].getCenter$0();
                t7 = $.$sub$n(positionCurrentCenter.x, centerBuildingK.x);
                if (typeof t7 !== "number")
                  $.throwExpression(new $.ArgumentError(t7));
                t7 = Math.pow(t7, 2);
                t8 = $.$sub$n(positionCurrentCenter.y, centerBuildingK.y);
                if (typeof t8 !== "number")
                  $.throwExpression(new $.ArgumentError(t8));
                t8 = Math.pow(t8, 2);
                if (t7 + t8 < Math.pow(t3, 2))
                  if (tileHeight === heightK) {
                    t7 = this.world.tiles;
                    t8 = positionCurrent.x;
                    if (t8 >>> 0 !== t8 || t8 >= t7.length)
                      throw $.ioore(t8);
                    t8 = $.$index$asx($.$index$asx(t7[t8], positionCurrent.y), tileHeight);
                    t7 = this.buildings;
                    if (k >= t7.length)
                      throw $.ioore(k);
                    t8.set$collector(t7[k]);
                  }
              }
            }
          }
        }
      }
    this.drawCollection$0();
    this.calculateCollection$0();
  },
  calculateCollection$0: function() {
    var i, j, k, t1, t;
    this.collection = 0;
    for (i = 0; $.JSNumber_methods.$lt(i, this.world.size.x); ++i)
      for (j = 0; $.JSNumber_methods.$lt(j, this.world.size.y); ++j)
        for (k = 0; k < 10; ++k) {
          t1 = this.world.tiles;
          if (i >= t1.length)
            throw $.ioore(i);
          if ($.$index$asx($.$index$asx(t1[i], j), k).get$collector() != null)
            this.collection = $.$add$ns(this.collection, 1);
        }
    this.collection = $.floor$0$nx($.$mul$n(this.collection, 0.1));
    for (t = 0; t1 = this.buildings, t < t1.length; ++t) {
      if (!$.$eq(t1[t].get$imageID(), "reactor")) {
        t1 = this.buildings;
        if (t >= t1.length)
          throw $.ioore(t);
        t1 = $.$eq(t1[t].get$imageID(), "base");
      } else
        t1 = true;
      if (t1)
        this.collection = $.$add$ns(this.collection, 1);
    }
  },
  updateCreeper$0: function() {
    var i, t1, t2, j, i0, height, height2, t3, t4, j0, t5;
    for (i = 0; t1 = this.sporetowers, i < t1.length; ++i)
      t1[i].update$0();
    this.spawnTimer = this.spawnTimer + 1;
    if (this.spawnTimer >= 25 / this.speed) {
      for (i = 0; t1 = this.emitters, i < t1.length; ++i)
        t1[i].spawn$0();
      this.spawnTimer = 0;
    }
    this.creeperTimer = this.creeperTimer + 1;
    t1 = this.creeperTimer;
    t2 = 25 / this.speed;
    if (t1 > t2) {
      this.creeperTimer = t1 - t2;
      for (i = 0; $.JSNumber_methods.$lt(i, this.world.size.x); ++i)
        for (j = 0; t1 = this.world, $.JSNumber_methods.$lt(j, t1.size.y); ++j) {
          t1 = t1.tiles;
          if (i >= t1.length)
            throw $.ioore(i);
          t1 = $.$index$asx($.$index$asx(t1[i], j), 0);
          t2 = this.world.tiles;
          if (i >= t2.length)
            throw $.ioore(i);
          t1.set$newcreep($.$index$asx($.$index$asx(t2[i], j), 0).get$creep());
        }
      for (i = 0; $.JSNumber_methods.$lt(i, this.world.size.x); i = i0)
        for (t1 = i - 1, t2 = t1 > -1, i0 = i + 1, j = 0; $.JSNumber_methods.$lt(j, this.world.size.y); j = j0) {
          height = this.getHighestTerrain$1(new $.Vector(i, j));
          if ($.JSNumber_methods.$lt(i0, this.world.size.x)) {
            height2 = this.getHighestTerrain$1(new $.Vector(i0, j));
            t3 = this.world.tiles;
            if (i >= t3.length)
              throw $.ioore(i);
            t3 = $.$index$asx($.$index$asx(t3[i], j), 0);
            t4 = this.world.tiles;
            if (i0 >= t4.length)
              throw $.ioore(i0);
            this.transferCreeper$4(height, height2, t3, $.$index$asx($.$index$asx(t4[i0], j), 0));
          }
          if (t2) {
            height2 = this.getHighestTerrain$1(new $.Vector(t1, j));
            t3 = this.world.tiles;
            if (i >= t3.length)
              throw $.ioore(i);
            t3 = $.$index$asx($.$index$asx(t3[i], j), 0);
            t4 = this.world.tiles;
            if (t1 >= t4.length)
              throw $.ioore(t1);
            this.transferCreeper$4(height, height2, t3, $.$index$asx($.$index$asx(t4[t1], j), 0));
          }
          j0 = j + 1;
          if ($.JSNumber_methods.$lt(j0, this.world.size.y)) {
            height2 = this.getHighestTerrain$1(new $.Vector(i, j0));
            t3 = this.world.tiles;
            if (i >= t3.length)
              throw $.ioore(i);
            t3 = $.$index$asx($.$index$asx(t3[i], j), 0);
            t4 = this.world.tiles;
            if (i >= t4.length)
              throw $.ioore(i);
            this.transferCreeper$4(height, height2, t3, $.$index$asx($.$index$asx(t4[i], j0), 0));
          }
          t3 = j - 1;
          if (t3 > -1) {
            height2 = this.getHighestTerrain$1(new $.Vector(i, t3));
            t4 = this.world.tiles;
            if (i >= t4.length)
              throw $.ioore(i);
            t4 = $.$index$asx($.$index$asx(t4[i], j), 0);
            t5 = this.world.tiles;
            if (i >= t5.length)
              throw $.ioore(i);
            this.transferCreeper$4(height, height2, t4, $.$index$asx($.$index$asx(t5[i], t3), 0));
          }
        }
      for (i = 0; $.JSNumber_methods.$lt(i, this.world.size.x); ++i)
        for (j = 0; t1 = this.world, $.JSNumber_methods.$lt(j, t1.size.y); ++j) {
          t1 = t1.tiles;
          if (i >= t1.length)
            throw $.ioore(i);
          t1 = $.$index$asx($.$index$asx(t1[i], j), 0);
          t2 = this.world.tiles;
          if (i >= t2.length)
            throw $.ioore(i);
          t1.set$creep($.$index$asx($.$index$asx(t2[i], j), 0).get$newcreep());
          t1 = this.world.tiles;
          if (i >= t1.length)
            throw $.ioore(i);
          if ($.$gt$n($.$index$asx($.$index$asx(t1[i], j), 0).get$creep(), 10)) {
            t1 = this.world.tiles;
            if (i >= t1.length)
              throw $.ioore(i);
            $.$index$asx($.$index$asx(t1[i], j), 0).set$creep(10);
          }
          t1 = this.world.tiles;
          if (i >= t1.length)
            throw $.ioore(i);
          if ($.$lt$n($.$index$asx($.$index$asx(t1[i], j), 0).get$creep(), 0.01)) {
            t1 = this.world.tiles;
            if (i >= t1.length)
              throw $.ioore(i);
            $.$index$asx($.$index$asx(t1[i], j), 0).set$creep(0);
          }
        }
      this.drawCreeper$0();
    }
  },
  transferCreeper$4: function(height, height2, source, target) {
    var sourceAmount, sourceTotal, targetAmount, targetTotal, delta, adjustedDelta, t1;
    sourceAmount = source.get$creep();
    if (typeof sourceAmount !== "number")
      return this.transferCreeper$4$bailout(1, height, height2, source, target, sourceAmount);
    sourceTotal = height + sourceAmount;
    if (height2 > -1) {
      targetAmount = target.get$creep();
      if (typeof targetAmount !== "number")
        return this.transferCreeper$4$bailout(2, 0, height2, source, target, sourceAmount, targetAmount, sourceTotal);
      if (sourceAmount > 0 || targetAmount > 0) {
        targetTotal = height2 + targetAmount;
        if (sourceTotal > targetTotal) {
          delta = sourceTotal - targetTotal;
          if (delta > sourceAmount)
            delta = sourceAmount;
          adjustedDelta = delta * 0.25;
          t1 = source.get$newcreep();
          if (typeof t1 !== "number")
            return this.transferCreeper$4$bailout(3, 0, 0, source, target, 0, 0, 0, t1, adjustedDelta);
          source.set$newcreep(t1 - adjustedDelta);
          t1 = target.get$newcreep();
          if (typeof t1 !== "number")
            return this.transferCreeper$4$bailout(4, 0, 0, 0, target, 0, 0, 0, t1, adjustedDelta);
          target.set$newcreep(t1 + adjustedDelta);
        }
      }
    }
  },
  transferCreeper$4$bailout: function(state0, height, height2, source, target, sourceAmount, targetAmount, sourceTotal, t1, adjustedDelta) {
    switch (state0) {
      case 0:
        sourceAmount = source.get$creep();
      case 1:
        state0 = 0;
        if (typeof sourceAmount !== "number")
          throw $.iae(sourceAmount);
        sourceTotal = height + sourceAmount;
      default:
        var targetTotal, delta;
        if (state0 === 4 || state0 === 3 || state0 === 2 || state0 === 0 && height2 > -1)
          switch (state0) {
            case 0:
              targetAmount = target.get$creep();
            case 2:
              state0 = 0;
            default:
              if (state0 === 4 || state0 === 3 || state0 === 0 && ($.$gt$n(sourceAmount, 0) || $.$gt$n(targetAmount, 0)))
                switch (state0) {
                  case 0:
                    if (typeof targetAmount !== "number")
                      throw $.iae(targetAmount);
                    targetTotal = height2 + targetAmount;
                  default:
                    if (state0 === 4 || state0 === 3 || state0 === 0 && sourceTotal > targetTotal)
                      switch (state0) {
                        case 0:
                          delta = sourceTotal - targetTotal;
                          adjustedDelta = $.$mul$n($.JSNumber_methods.$gt(delta, sourceAmount) ? sourceAmount : delta, 0.25);
                          t1 = source.get$newcreep();
                        case 3:
                          state0 = 0;
                          source.set$newcreep($.$sub$n(t1, adjustedDelta));
                          t1 = target.get$newcreep();
                        case 4:
                          state0 = 0;
                          target.set$newcreep($.$add$ns(t1, adjustedDelta));
                      }
                }
          }
    }
  },
  getNeighbours$2: function(node, target) {
    var neighbours, t1, t2, allowedDistance, allowedDistance0, centerI, centerNode, i, t3, t4, distance;
    neighbours = $.List_List($);
    for (t1 = $.getInterceptor$x(node), t2 = this.tileSize, allowedDistance = 20 * t2, allowedDistance0 = 10 * t2, centerI = null, centerNode = null, i = 0; t2 = this.buildings, i < t2.length; ++i) {
      if ($.$eq($.get$x$x($.get$position$x(t2[i])), $.get$x$x(t1.get$position(node)))) {
        t2 = this.buildings;
        if (i >= t2.length)
          throw $.ioore(i);
        t2 = $.$eq($.get$y$x($.get$position$x(t2[i])), $.get$y$x(t1.get$position(node)));
      } else
        t2 = false;
      if (t2)
        ;
      else {
        t2 = this.buildings;
        if (i >= t2.length)
          throw $.ioore(i);
        t2 = t2[i];
        if ($.get$status$x(t2) === "IDLE")
          if (!$.$eq(t2, target)) {
            t2 = this.buildings;
            if (i >= t2.length)
              throw $.ioore(i);
            t2 = t2[i];
            if (t2.get$built()) {
              centerI = t2.getCenter$0();
              centerNode = node.getCenter$0();
              t2 = centerI.x;
              if (typeof t2 !== "number")
                return this.getNeighbours$2$bailout(1, allowedDistance0, node, target, t1, allowedDistance, neighbours, t2, centerI, centerNode, i);
              t3 = centerNode.x;
              if (typeof t3 !== "number")
                return this.getNeighbours$2$bailout(2, allowedDistance0, node, target, t1, allowedDistance, neighbours, t2, centerI, centerNode, i, t3);
              t3 = t2 - t3;
              t2 = Math.pow(t3, 2);
              t3 = centerI.y;
              if (typeof t3 !== "number")
                return this.getNeighbours$2$bailout(3, allowedDistance0, node, target, t1, allowedDistance, neighbours, t2, centerI, centerNode, i, t3);
              t4 = centerNode.y;
              if (typeof t4 !== "number")
                return this.getNeighbours$2$bailout(4, allowedDistance0, node, target, t1, allowedDistance, neighbours, t2, centerI, centerNode, i, t3, t4);
              t4 = t3 - t4;
              t2 += Math.pow(t4, 2);
              distance = Math.sqrt(t2);
              t2 = node.get$imageID();
              if (typeof t2 !== "string")
                return this.getNeighbours$2$bailout(5, allowedDistance0, node, target, t1, allowedDistance, neighbours, t2, centerI, centerNode, i, 0, 0, distance);
              if (t2 === "relay") {
                t2 = this.buildings;
                if (i >= t2.length)
                  throw $.ioore(i);
                t2 = t2[i].get$imageID();
                if (typeof t2 !== "string")
                  return this.getNeighbours$2$bailout(6, allowedDistance0, node, target, t1, allowedDistance, neighbours, t2, centerI, centerNode, i, 0, 0, distance);
                t2 = t2 === "relay";
              } else
                t2 = false;
              if (distance <= (t2 ? allowedDistance : allowedDistance0)) {
                t2 = this.buildings;
                if (i >= t2.length)
                  throw $.ioore(i);
                neighbours.push(t2[i]);
              }
            }
          } else {
            t2 = this.buildings;
            if (i >= t2.length)
              throw $.ioore(i);
            centerI = t2[i].getCenter$0();
            centerNode = node.getCenter$0();
            t2 = centerI.x;
            if (typeof t2 !== "number")
              return this.getNeighbours$2$bailout(7, allowedDistance0, node, target, t1, allowedDistance, neighbours, t2, centerI, centerNode, i);
            t3 = centerNode.x;
            if (typeof t3 !== "number")
              return this.getNeighbours$2$bailout(8, allowedDistance0, node, target, t1, allowedDistance, neighbours, t2, centerI, centerNode, i, t3);
            t3 = t2 - t3;
            t2 = Math.pow(t3, 2);
            t3 = centerI.y;
            if (typeof t3 !== "number")
              return this.getNeighbours$2$bailout(9, allowedDistance0, node, target, t1, allowedDistance, neighbours, t2, centerI, centerNode, i, t3);
            t4 = centerNode.y;
            if (typeof t4 !== "number")
              return this.getNeighbours$2$bailout(10, allowedDistance0, node, target, t1, allowedDistance, neighbours, t2, centerI, centerNode, i, t3, t4);
            t4 = t3 - t4;
            t2 += Math.pow(t4, 2);
            distance = Math.sqrt(t2);
            t2 = node.get$imageID();
            if (typeof t2 !== "string")
              return this.getNeighbours$2$bailout(11, allowedDistance0, node, target, t1, allowedDistance, neighbours, t2, centerI, centerNode, i, 0, 0, distance);
            if (t2 === "relay") {
              t2 = this.buildings;
              if (i >= t2.length)
                throw $.ioore(i);
              t2 = t2[i].get$imageID();
              if (typeof t2 !== "string")
                return this.getNeighbours$2$bailout(12, allowedDistance0, node, target, t1, allowedDistance, neighbours, t2, centerI, centerNode, i, 0, 0, distance);
              t2 = t2 === "relay";
            } else
              t2 = false;
            if (distance <= (t2 ? allowedDistance : allowedDistance0)) {
              t2 = this.buildings;
              if (i >= t2.length)
                throw $.ioore(i);
              neighbours.push(t2[i]);
            }
          }
      }
    }
    return neighbours;
  },
  getNeighbours$2$bailout: function(state0, allowedDistance0, node, target, t1, allowedDistance, neighbours, t2, centerI, centerNode, i, t3, t4, distance) {
    switch (state0) {
      case 0:
        neighbours = $.List_List($);
        t1 = $.getInterceptor$x(node);
        t2 = this.tileSize;
        allowedDistance = 20 * t2;
        allowedDistance0 = 10 * t2;
        centerI = null;
        centerNode = null;
        i = 0;
      default:
        L0:
          while (true)
            switch (state0) {
              case 0:
                t2 = this.buildings;
                if (!(i < t2.length))
                  break L0;
                if ($.$eq($.get$x$x($.get$position$x(t2[i])), $.get$x$x(t1.get$position(node)))) {
                  t2 = this.buildings;
                  if (i >= t2.length)
                    throw $.ioore(i);
                  t2 = $.$eq($.get$y$x($.get$position$x(t2[i])), $.get$y$x(t1.get$position(node)));
                } else
                  t2 = false;
              default:
                if (state0 === 0 && t2)
                  ;
                else
                  switch (state0) {
                    case 0:
                      t2 = this.buildings;
                      if (i >= t2.length)
                        throw $.ioore(i);
                      t2 = t2[i];
                    default:
                      if (state0 === 12 || state0 === 11 || state0 === 10 || state0 === 9 || state0 === 8 || state0 === 7 || state0 === 6 || state0 === 5 || state0 === 4 || state0 === 3 || state0 === 2 || state0 === 1 || state0 === 0 && $.get$status$x(t2) === "IDLE")
                        switch (state0) {
                          case 0:
                          default:
                            if (state0 === 6 || state0 === 5 || state0 === 4 || state0 === 3 || state0 === 2 || state0 === 1 || state0 === 0 && !$.$eq(t2, target))
                              switch (state0) {
                                case 0:
                                  t2 = this.buildings;
                                  if (i >= t2.length)
                                    throw $.ioore(i);
                                  t2 = t2[i];
                                default:
                                  if (state0 === 6 || state0 === 5 || state0 === 4 || state0 === 3 || state0 === 2 || state0 === 1 || state0 === 0 && t2.get$built())
                                    switch (state0) {
                                      case 0:
                                        centerI = t2.getCenter$0();
                                        centerNode = node.getCenter$0();
                                        t2 = centerI.x;
                                      case 1:
                                        state0 = 0;
                                        t3 = centerNode.x;
                                      case 2:
                                        state0 = 0;
                                        t3 = $.$sub$n(t2, t3);
                                        if (typeof t3 !== "number")
                                          $.throwExpression(new $.ArgumentError(t3));
                                        t2 = Math.pow(t3, 2);
                                        t3 = centerI.y;
                                      case 3:
                                        state0 = 0;
                                        t4 = centerNode.y;
                                      case 4:
                                        state0 = 0;
                                        t4 = $.$sub$n(t3, t4);
                                        if (typeof t4 !== "number")
                                          $.throwExpression(new $.ArgumentError(t4));
                                        t2 += Math.pow(t4, 2);
                                        distance = Math.sqrt(t2);
                                        t2 = node.get$imageID();
                                      case 5:
                                        state0 = 0;
                                      case 6:
                                        if (state0 === 6 || state0 === 0 && $.$eq(t2, "relay"))
                                          switch (state0) {
                                            case 0:
                                              t2 = this.buildings;
                                              if (i >= t2.length)
                                                throw $.ioore(i);
                                              t2 = t2[i].get$imageID();
                                            case 6:
                                              state0 = 0;
                                              t2 = $.$eq(t2, "relay");
                                          }
                                        else
                                          t2 = false;
                                        if (distance <= (t2 ? allowedDistance : allowedDistance0)) {
                                          t2 = this.buildings;
                                          if (i >= t2.length)
                                            throw $.ioore(i);
                                          neighbours.push(t2[i]);
                                        }
                                    }
                              }
                            else
                              switch (state0) {
                                case 0:
                                  t2 = this.buildings;
                                  if (i >= t2.length)
                                    throw $.ioore(i);
                                  centerI = t2[i].getCenter$0();
                                  centerNode = node.getCenter$0();
                                  t2 = centerI.x;
                                case 7:
                                  state0 = 0;
                                  t3 = centerNode.x;
                                case 8:
                                  state0 = 0;
                                  t3 = $.$sub$n(t2, t3);
                                  if (typeof t3 !== "number")
                                    $.throwExpression(new $.ArgumentError(t3));
                                  t2 = Math.pow(t3, 2);
                                  t3 = centerI.y;
                                case 9:
                                  state0 = 0;
                                  t4 = centerNode.y;
                                case 10:
                                  state0 = 0;
                                  t4 = $.$sub$n(t3, t4);
                                  if (typeof t4 !== "number")
                                    $.throwExpression(new $.ArgumentError(t4));
                                  t2 += Math.pow(t4, 2);
                                  distance = Math.sqrt(t2);
                                  t2 = node.get$imageID();
                                case 11:
                                  state0 = 0;
                                case 12:
                                  if (state0 === 12 || state0 === 0 && $.$eq(t2, "relay"))
                                    switch (state0) {
                                      case 0:
                                        t2 = this.buildings;
                                        if (i >= t2.length)
                                          throw $.ioore(i);
                                        t2 = t2[i].get$imageID();
                                      case 12:
                                        state0 = 0;
                                        t2 = $.$eq(t2, "relay");
                                    }
                                  else
                                    t2 = false;
                                  if (distance <= (t2 ? allowedDistance : allowedDistance0)) {
                                    t2 = this.buildings;
                                    if (i >= t2.length)
                                      throw $.ioore(i);
                                    neighbours.push(t2[i]);
                                  }
                              }
                        }
                  }
                ++i;
            }
        return neighbours;
    }
  },
  inRoute$2: function(neighbour, route) {
    var t1, i, found, t2;
    if (typeof route !== "object" || route === null || route.constructor !== Array || !!route.fixed$length)
      return this.inRoute$2$bailout(1, neighbour, route);
    for (t1 = $.getInterceptor$x(neighbour), i = 0; found = false, i < route.length; ++i) {
      t2 = $.get$x$x(t1.get$position(neighbour));
      if (i >= route.length)
        throw $.ioore(i);
      if ($.$eq(t2, $.get$x$x($.get$position$x(route[i])))) {
        t2 = $.get$y$x(t1.get$position(neighbour));
        if (i >= route.length)
          throw $.ioore(i);
        t2 = $.$eq(t2, $.get$y$x($.get$position$x(route[i])));
      } else
        t2 = false;
      if (t2) {
        found = true;
        break;
      }
    }
    return found;
  },
  inRoute$2$bailout: function(state0, neighbour, route) {
    var t1, t2, i, found;
    for (t1 = $.getInterceptor$x(neighbour), t2 = $.getInterceptor$asx(route), i = 0; found = false, $.JSNumber_methods.$lt(i, t2.get$length(route)); ++i)
      if ($.$eq($.get$x$x(t1.get$position(neighbour)), $.get$x$x($.get$position$x(t2.$index(route, i)))) && $.$eq($.get$y$x(t1.get$position(neighbour)), $.get$y$x($.get$position$x(t2.$index(route, i))))) {
        found = true;
        break;
      }
    return found;
  },
  findRoute$1: function(packet) {
    var routes, route, t1, t2, oldRoute, t3, neighbours, newRoutes, i, newRoute, t4, centerA, centerB, t5, centerC, j, compare;
    routes = $.List_List($);
    route = new $.Route(0, 0, $.List_List($), false);
    route.nodes.push(packet.currentTarget);
    routes.push(route);
    for (; routes.length > 0;) {
      t1 = $.get$nodes$x(routes[0]);
      if (typeof t1 !== "object" || t1 === null || t1.constructor !== Array || !!t1.fixed$length)
        return this.findRoute$1$bailout(1, packet, routes, t1);
      if (0 >= routes.length)
        throw $.ioore(0);
      t2 = $.get$length$asx($.get$nodes$x(routes[0]));
      if (typeof t2 !== "number")
        return this.findRoute$1$bailout(2, packet, routes, t1, t2);
      --t2;
      if (t2 >>> 0 !== t2 || t2 >= t1.length)
        throw $.ioore(t2);
      if ($.$eq(t1[t2], packet.target))
        break;
      oldRoute = $.JSArray_methods.removeAt$1(routes, 0);
      t1 = $.getInterceptor$x(oldRoute);
      t2 = t1.get$nodes(oldRoute);
      if (typeof t2 !== "object" || t2 === null || t2.constructor !== Array || !!t2.fixed$length)
        return this.findRoute$1$bailout(3, packet, routes, t1, t2, oldRoute);
      t3 = $.get$length$asx(t1.get$nodes(oldRoute));
      if (typeof t3 !== "number")
        return this.findRoute$1$bailout(4, packet, routes, t1, t2, oldRoute, t3);
      --t3;
      if (t3 >>> 0 !== t3 || t3 >= t2.length)
        throw $.ioore(t3);
      neighbours = this.getNeighbours$2(t2[t3], packet.target);
      for (newRoutes = 0, i = 0; i < neighbours.length; ++i)
        if (!this.inRoute$2(neighbours[i], t1.get$nodes(oldRoute))) {
          ++newRoutes;
          newRoute = new $.Route(0, 0, $.List_List($), false);
          newRoute.nodes = $.Helper_clone(t1.get$nodes(oldRoute));
          t2 = newRoute.nodes;
          if (i >= neighbours.length)
            throw $.ioore(i);
          t2.push(neighbours[i]);
          newRoute.distanceTravelled = oldRoute.get$distanceTravelled();
          t2 = newRoute.nodes;
          t3 = t2.length;
          t4 = t3 - 1;
          if (t4 < 0)
            throw $.ioore(t4);
          centerA = t2[t4].getCenter$0();
          t4 = newRoute.nodes;
          t2 = t4.length;
          t3 = t2 - 2;
          if (t3 < 0)
            throw $.ioore(t3);
          centerB = t4[t3].getCenter$0();
          t3 = newRoute.distanceTravelled;
          t4 = centerA.x;
          if (typeof t4 !== "number")
            return this.findRoute$1$bailout(5, packet, routes, t1, 0, oldRoute, t3, newRoute, t4, centerB, neighbours, centerA, i, newRoutes);
          t2 = centerB.x;
          if (typeof t2 !== "number")
            return this.findRoute$1$bailout(6, packet, routes, t1, t2, oldRoute, t3, newRoute, t4, centerB, neighbours, centerA, i, newRoutes);
          t2 = t4 - t2;
          t2 = Math.pow(t2, 2);
          t4 = centerA.y;
          if (typeof t4 !== "number")
            return this.findRoute$1$bailout(7, packet, routes, t1, t2, oldRoute, t3, newRoute, t4, centerB, neighbours, centerA, i, newRoutes);
          t5 = centerB.y;
          if (typeof t5 !== "number")
            return this.findRoute$1$bailout(8, packet, routes, t1, t2, oldRoute, t3, newRoute, t4, 0, neighbours, centerA, i, newRoutes, t5);
          t5 = t4 - t5;
          t2 += Math.pow(t5, 2);
          newRoute.distanceTravelled = t3 + Math.sqrt(t2);
          centerC = packet.target.getCenter$0();
          t2 = centerC.x;
          if (typeof t2 !== "number")
            return this.findRoute$1$bailout(9, packet, routes, t1, t2, oldRoute, 0, newRoute, 0, 0, neighbours, centerA, i, newRoutes, 0, centerC);
          t3 = centerA.x;
          if (typeof t3 !== "number")
            return this.findRoute$1$bailout(10, packet, routes, t1, t2, oldRoute, t3, newRoute, 0, 0, neighbours, centerA, i, newRoutes, 0, centerC);
          t3 = t2 - t3;
          t2 = Math.pow(t3, 2);
          t3 = centerC.y;
          if (typeof t3 !== "number")
            return this.findRoute$1$bailout(11, packet, routes, t1, t2, oldRoute, t3, newRoute, 0, 0, neighbours, centerA, i, newRoutes);
          t4 = centerA.y;
          if (typeof t4 !== "number")
            return this.findRoute$1$bailout(12, packet, routes, t1, t2, oldRoute, t3, newRoute, t4, 0, neighbours, 0, i, newRoutes);
          t4 = t3 - t4;
          t2 += Math.pow(t4, 2);
          newRoute.distanceRemaining = Math.sqrt(t2);
          routes.push(newRoute);
        }
      for (i = 0; t1 = routes.length, i < t1; ++i)
        for (j = 0; t1 = routes.length, j < t1; ++j)
          if (i !== j) {
            if (i >= t1)
              throw $.ioore(i);
            t1 = $.get$nodes$x(routes[i]);
            if (typeof t1 !== "object" || t1 === null || t1.constructor !== Array || !!t1.fixed$length)
              return this.findRoute$1$bailout(13, packet, routes, t1, 0, 0, 0, 0, 0, 0, 0, 0, i, 0, 0, 0, j);
            if (i >= routes.length)
              throw $.ioore(i);
            t2 = $.get$length$asx($.get$nodes$x(routes[i]));
            if (typeof t2 !== "number")
              return this.findRoute$1$bailout(14, packet, routes, t1, t2, 0, 0, 0, 0, 0, 0, 0, i, 0, 0, 0, j);
            --t2;
            if (t2 >>> 0 !== t2 || t2 >= t1.length)
              throw $.ioore(t2);
            t2 = t1[t2];
            if (j >= routes.length)
              throw $.ioore(j);
            t1 = $.get$nodes$x(routes[j]);
            if (typeof t1 !== "object" || t1 === null || t1.constructor !== Array || !!t1.fixed$length)
              return this.findRoute$1$bailout(15, packet, routes, t1, t2, 0, 0, 0, 0, 0, 0, 0, i, 0, 0, 0, j);
            if (j >= routes.length)
              throw $.ioore(j);
            t3 = $.get$length$asx($.get$nodes$x(routes[j]));
            if (typeof t3 !== "number")
              return this.findRoute$1$bailout(16, packet, routes, t1, t2, 0, t3, 0, 0, 0, 0, 0, i, 0, 0, 0, j);
            --t3;
            if (t3 >>> 0 !== t3 || t3 >= t1.length)
              throw $.ioore(t3);
            if ($.$eq(t2, t1[t3])) {
              t1 = routes.length;
              if (i >= t1)
                throw $.ioore(i);
              t2 = routes[i];
              t3 = t2.get$distanceTravelled();
              if (j >= t1)
                throw $.ioore(j);
              t1 = routes[j];
              t4 = t1.get$distanceTravelled();
              if (t3 < t4)
                $.set$remove$ax(t1, true);
              else if (t3 > t4)
                $.set$remove$ax(t2, true);
            }
          }
      for (i = t1 - 1; i >= 0; --i) {
        if (i >= routes.length)
          throw $.ioore(i);
        if ($.get$remove$ax(routes[i]) === true)
          $.JSArray_methods.removeAt$1(routes, i);
      }
      compare = new $.Game_findRoute_closure();
      if (!!routes.immutable$list)
        $.throwExpression(new $.UnsupportedError("sort"));
      t1 = routes.length - 1;
      if (t1 - 0 <= 32)
        $.Sort_insertionSort_(routes, 0, t1, compare);
      else
        $.Sort__dualPivotQuicksort(routes, 0, t1, compare);
    }
    if (routes.length > 0) {
      t1 = $.get$nodes$x(routes[0]);
      if (typeof t1 !== "object" || t1 === null || t1.constructor !== Array || !!t1.fixed$length)
        return this.findRoute$1$bailout(17, packet, routes, t1);
      if (1 >= t1.length)
        throw $.ioore(1);
      t1 = t1[1].get$imageID();
      if (typeof t1 !== "string")
        return this.findRoute$1$bailout(18, packet, routes, t1);
      if (t1 === "relay")
        packet.speedMultiplier = 2;
      else
        packet.speedMultiplier = 1;
      if (0 >= routes.length)
        throw $.ioore(0);
      t1 = $.get$nodes$x(routes[0]);
      if (typeof t1 !== "object" || t1 === null || t1.constructor !== Array || !!t1.fixed$length)
        return this.findRoute$1$bailout(19, packet, 0, t1);
      if (1 >= t1.length)
        throw $.ioore(1);
      packet.currentTarget = t1[1];
    } else {
      packet.currentTarget = null;
      t1 = packet.type;
      if (t1 === "energy") {
        t1 = packet.target;
        t1.set$energyRequests(t1.get$energyRequests() - 4);
        t1 = packet.target;
        if (t1.get$energyRequests() < 0)
          t1.set$energyRequests(0);
      } else if (t1 === "health") {
        t1 = packet.target;
        t1.set$healthRequests(t1.get$healthRequests() - 1);
        t1 = packet.target;
        if (t1.get$healthRequests() < 0)
          t1.set$healthRequests(0);
      }
      packet.remove = true;
    }
  },
  findRoute$1$bailout: function(state0, packet, routes, t1, t2, oldRoute, t3, newRoute, t4, centerB, neighbours, centerA, i, newRoutes, t5, centerC, j) {
    switch (state0) {
      case 0:
        routes = $.List_List($);
        route = new $.Route(0, 0, $.List_List($), false);
        route.nodes.push(packet.currentTarget);
        routes.push(route);
      default:
        L0:
          while (true)
            switch (state0) {
              case 0:
                if (!(routes.length > 0))
                  break L0;
                t1 = $.get$nodes$x(routes[0]);
              case 1:
                state0 = 0;
                if (0 >= routes.length)
                  throw $.ioore(0);
                t2 = $.get$length$asx($.get$nodes$x(routes[0]));
              case 2:
                state0 = 0;
                if ($.$eq($.$index$asx(t1, $.$sub$n(t2, 1)), packet.target))
                  break L0;
                oldRoute = $.JSArray_methods.removeAt$1(routes, 0);
                t1 = $.getInterceptor$x(oldRoute);
                t2 = t1.get$nodes(oldRoute);
              case 3:
                state0 = 0;
                t3 = $.get$length$asx(t1.get$nodes(oldRoute));
              case 4:
                state0 = 0;
                neighbours = this.getNeighbours$2($.$index$asx(t2, $.$sub$n(t3, 1)), packet.target);
                newRoutes = 0;
                i = 0;
              default:
                L1:
                  while (true)
                    switch (state0) {
                      case 0:
                        if (!(i < neighbours.length))
                          break L1;
                      default:
                        if (state0 === 12 || state0 === 11 || state0 === 10 || state0 === 9 || state0 === 8 || state0 === 7 || state0 === 6 || state0 === 5 || state0 === 0 && !this.inRoute$2(neighbours[i], t1.get$nodes(oldRoute)))
                          switch (state0) {
                            case 0:
                              ++newRoutes;
                              newRoute = new $.Route(0, 0, $.List_List($), false);
                              newRoute.nodes = $.Helper_clone(t1.get$nodes(oldRoute));
                              t2 = newRoute.nodes;
                              if (i >= neighbours.length)
                                throw $.ioore(i);
                              t2.push(neighbours[i]);
                              newRoute.distanceTravelled = oldRoute.get$distanceTravelled();
                              t2 = newRoute.nodes;
                              t3 = t2.length;
                              t4 = t3 - 1;
                              if (t4 < 0)
                                throw $.ioore(t4);
                              centerA = t2[t4].getCenter$0();
                              t4 = newRoute.nodes;
                              t2 = t4.length;
                              t3 = t2 - 2;
                              if (t3 < 0)
                                throw $.ioore(t3);
                              centerB = t4[t3].getCenter$0();
                              t3 = newRoute.distanceTravelled;
                              t4 = centerA.x;
                            case 5:
                              state0 = 0;
                              t2 = centerB.x;
                            case 6:
                              state0 = 0;
                              t2 = $.$sub$n(t4, t2);
                              if (typeof t2 !== "number")
                                $.throwExpression(new $.ArgumentError(t2));
                              t2 = Math.pow(t2, 2);
                              t4 = centerA.y;
                            case 7:
                              state0 = 0;
                              t5 = centerB.y;
                            case 8:
                              state0 = 0;
                              t5 = $.$sub$n(t4, t5);
                              if (typeof t5 !== "number")
                                $.throwExpression(new $.ArgumentError(t5));
                              t2 += Math.pow(t5, 2);
                              newRoute.distanceTravelled = t3 + Math.sqrt(t2);
                              centerC = packet.target.getCenter$0();
                              t2 = centerC.x;
                            case 9:
                              state0 = 0;
                              t3 = centerA.x;
                            case 10:
                              state0 = 0;
                              t3 = $.$sub$n(t2, t3);
                              if (typeof t3 !== "number")
                                $.throwExpression(new $.ArgumentError(t3));
                              t2 = Math.pow(t3, 2);
                              t3 = centerC.y;
                            case 11:
                              state0 = 0;
                              t4 = centerA.y;
                            case 12:
                              state0 = 0;
                              t4 = $.$sub$n(t3, t4);
                              if (typeof t4 !== "number")
                                $.throwExpression(new $.ArgumentError(t4));
                              t2 += Math.pow(t4, 2);
                              newRoute.distanceRemaining = Math.sqrt(t2);
                              routes.push(newRoute);
                          }
                        ++i;
                    }
                i = 0;
              case 13:
              case 14:
              case 15:
              case 16:
                L2:
                  while (true)
                    switch (state0) {
                      case 0:
                        t1 = routes.length;
                        if (!(i < t1))
                          break L2;
                        j = 0;
                      default:
                        L3:
                          while (true)
                            switch (state0) {
                              case 0:
                                t1 = routes.length;
                                if (!(j < t1))
                                  break L3;
                              default:
                                if (state0 === 16 || state0 === 15 || state0 === 14 || state0 === 13 || state0 === 0 && i !== j)
                                  switch (state0) {
                                    case 0:
                                      if (i >= t1)
                                        throw $.ioore(i);
                                      t1 = $.get$nodes$x(routes[i]);
                                    case 13:
                                      state0 = 0;
                                      if (i >= routes.length)
                                        throw $.ioore(i);
                                      t2 = $.get$length$asx($.get$nodes$x(routes[i]));
                                    case 14:
                                      state0 = 0;
                                      t2 = $.$index$asx(t1, $.$sub$n(t2, 1));
                                      if (j >= routes.length)
                                        throw $.ioore(j);
                                      t1 = $.get$nodes$x(routes[j]);
                                    case 15:
                                      state0 = 0;
                                      if (j >= routes.length)
                                        throw $.ioore(j);
                                      t3 = $.get$length$asx($.get$nodes$x(routes[j]));
                                    case 16:
                                      state0 = 0;
                                      if ($.$eq(t2, $.$index$asx(t1, $.$sub$n(t3, 1)))) {
                                        t1 = routes.length;
                                        if (i >= t1)
                                          throw $.ioore(i);
                                        t2 = routes[i];
                                        t3 = t2.get$distanceTravelled();
                                        if (j >= t1)
                                          throw $.ioore(j);
                                        t1 = routes[j];
                                        t4 = t1.get$distanceTravelled();
                                        if (t3 < t4)
                                          $.set$remove$ax(t1, true);
                                        else if (t3 > t4)
                                          $.set$remove$ax(t2, true);
                                      }
                                  }
                                ++j;
                            }
                        ++i;
                    }
                for (i = t1 - 1; i >= 0; --i) {
                  if (i >= routes.length)
                    throw $.ioore(i);
                  if ($.get$remove$ax(routes[i]) === true)
                    $.JSArray_methods.removeAt$1(routes, i);
                }
                compare = new $.Game_findRoute_closure();
                if (!!routes.immutable$list)
                  $.throwExpression(new $.UnsupportedError("sort"));
                t1 = routes.length - 1;
                if (t1 - 0 <= 32)
                  $.Sort_insertionSort_(routes, 0, t1, compare);
                else
                  $.Sort__dualPivotQuicksort(routes, 0, t1, compare);
            }
      case 17:
      case 18:
      case 19:
        var route, compare;
        if (state0 === 19 || state0 === 18 || state0 === 17 || state0 === 0 && routes.length > 0)
          switch (state0) {
            case 0:
              t1 = $.get$nodes$x(routes[0]);
            case 17:
              state0 = 0;
              t1 = $.$index$asx(t1, 1).get$imageID();
            case 18:
              state0 = 0;
              if ($.$eq(t1, "relay"))
                packet.speedMultiplier = 2;
              else
                packet.speedMultiplier = 1;
              if (0 >= routes.length)
                throw $.ioore(0);
              t1 = $.get$nodes$x(routes[0]);
            case 19:
              state0 = 0;
              packet.currentTarget = $.$index$asx(t1, 1);
          }
        else {
          packet.currentTarget = null;
          t1 = packet.type;
          if (t1 === "energy") {
            t1 = packet.target;
            t1.set$energyRequests(t1.get$energyRequests() - 4);
            t1 = packet.target;
            if (t1.get$energyRequests() < 0)
              t1.set$energyRequests(0);
          } else if (t1 === "health") {
            t1 = packet.target;
            t1.set$healthRequests(t1.get$healthRequests() - 1);
            t1 = packet.target;
            if (t1.get$healthRequests() < 0)
              t1.set$healthRequests(0);
          }
          packet.remove = true;
        }
    }
  },
  queuePacket$2: function(building, type) {
    var img, packet, t1, t2;
    img = $.JSString_methods.$add("packet_", type);
    packet = new $.Packet(this.base.getCenter$0(), new $.Vector(0, 0), img, type, false, 1, null, null);
    packet.target = building;
    packet.currentTarget = this.base;
    this.findRoute$1(packet);
    if (packet.currentTarget != null) {
      t1 = packet.type;
      if (t1 === "health") {
        t2 = packet.target;
        t2.set$healthRequests(t2.get$healthRequests() + 1);
      }
      if (t1 === "energy") {
        t1 = packet.target;
        t1.set$energyRequests(t1.get$energyRequests() + 4);
      }
      this.packetQueue.push(packet);
    }
  },
  canBePlaced$3: function(position, size, building) {
    var t1, t2, t3, t4, height, t5, i, t6, collision, x1, t7, x2, y1, y2, cx1, cx2, cy1, cy2, j, tileHeight;
    if (typeof size !== "number")
      return this.canBePlaced$3$bailout(1, position, size, building);
    t1 = $.getInterceptor$x(position);
    t2 = t1.get$x(position);
    if (typeof t2 !== "number")
      return this.canBePlaced$3$bailout(2, position, size, building, t1, t2);
    if (t2 > -1) {
      t3 = this.world.size;
      t4 = t3.x;
      if (typeof t4 !== "number")
        return this.canBePlaced$3$bailout(3, position, size, building, t1, t2, t4, $.JSNumber_methods);
      if (t2 < t4 - size + 1) {
        t2 = t1.get$y(position);
        if (typeof t2 !== "number")
          return this.canBePlaced$3$bailout(4, position, size, building, t1, t2);
        if (t2 > -1) {
          t3 = t3.y;
          if (typeof t3 !== "number")
            return this.canBePlaced$3$bailout(5, position, size, building, t1, t2, t3, $.JSNumber_methods);
          t3 = t2 < t3 - size + 1;
          t2 = t3;
        } else
          t2 = false;
      } else
        t2 = false;
    } else
      t2 = false;
    if (t2) {
      height = this.getHighestTerrain$1(position);
      for (t2 = $.getInterceptor(building), t3 = building != null, t4 = this.tileSize, t5 = size * t4, i = 0; t6 = this.buildings, collision = false, i < t6.length; ++i) {
        t6 = t6[i];
        if ($.get$status$x(t6) !== "IDLE")
          continue;
        if (t3 && t2.$eq(building, t6))
          continue;
        t6 = this.buildings;
        if (i >= t6.length)
          throw $.ioore(i);
        t6 = $.get$x$x($.get$position$x(t6[i]));
        if (typeof t6 !== "number")
          return this.canBePlaced$3$bailout(6, position, size, building, t1, t2, t4, t3, height, $.JSNumber_methods, t6, i);
        x1 = t6 * t4;
        t6 = this.buildings;
        if (i >= t6.length)
          throw $.ioore(i);
        t6 = $.get$x$x($.get$position$x(t6[i]));
        if (typeof t6 !== "number")
          return this.canBePlaced$3$bailout(7, position, size, building, t1, t2, t4, t3, height, $.JSNumber_methods, t6, i, x1);
        t6 *= t4;
        t7 = this.buildings;
        if (i >= t7.length)
          throw $.ioore(i);
        t7 = $.get$size$x(t7[i]);
        if (typeof t7 !== "number")
          return this.canBePlaced$3$bailout(8, position, size, building, t1, t2, t4, t3, height, $.JSNumber_methods, t6, i, x1, t7);
        x2 = t6 + t7 * t4 - 1;
        t7 = this.buildings;
        if (i >= t7.length)
          throw $.ioore(i);
        t7 = $.get$y$x($.get$position$x(t7[i]));
        if (typeof t7 !== "number")
          return this.canBePlaced$3$bailout(9, position, size, building, t1, t2, t4, t3, height, $.JSNumber_methods, 0, i, x1, t7, x2);
        y1 = t7 * t4;
        t7 = this.buildings;
        if (i >= t7.length)
          throw $.ioore(i);
        t7 = $.get$y$x($.get$position$x(t7[i]));
        if (typeof t7 !== "number")
          return this.canBePlaced$3$bailout(10, position, size, building, t1, t2, t4, t3, height, $.JSNumber_methods, 0, i, x1, t7, x2, y1);
        t7 *= t4;
        t6 = this.buildings;
        if (i >= t6.length)
          throw $.ioore(i);
        t6 = $.get$size$x(t6[i]);
        if (typeof t6 !== "number")
          return this.canBePlaced$3$bailout(11, position, size, building, t1, t2, t4, t3, height, $.JSNumber_methods, t6, i, x1, t7, x2, y1);
        y2 = t7 + t6 * t4 - 1;
        t6 = t1.get$x(position);
        if (typeof t6 !== "number")
          return this.canBePlaced$3$bailout(12, position, size, building, t1, t2, t4, t3, height, $.JSNumber_methods, t6, i, x1, 0, x2, y1, y2);
        cx1 = t6 * t4;
        cx2 = t6 * t4 + t5 - 1;
        t6 = t1.get$y(position);
        if (typeof t6 !== "number")
          return this.canBePlaced$3$bailout(14, position, size, building, t1, t2, t4, t3, height, $.JSNumber_methods, t6, i, x1, 0, x2, y1, y2, cx1, cx2);
        cy1 = t6 * t4;
        cy2 = t6 * t4 + t5 - 1;
        if (!(cx1 >= x1 && cx1 <= x2))
          t6 = cx2 >= x1 && cx2 <= x2;
        else
          t6 = true;
        if (t6)
          if (!(cy1 >= y1 && cy1 <= y2))
            t6 = cy2 >= y1 && cy2 <= y2;
          else
            t6 = true;
        else
          t6 = false;
        if (t6) {
          collision = true;
          break;
        }
      }
      if (!collision) {
        i = t1.get$x(position);
        if (i !== (i | 0))
          return this.canBePlaced$3$bailout(16, position, size, 0, t1, 0, 0, 0, height, 0, 0, i, 0, 0, 0, 0, 0, 0, 0, 0, collision);
        while (true) {
          t2 = t1.get$x(position);
          if (typeof t2 !== "number")
            return this.canBePlaced$3$bailout(17, position, size, 0, t1, t2, 0, 0, height, 0, 0, i, 0, 0, 0, 0, 0, 0, 0, 0, collision);
          if (!(i < t2 + size))
            break;
          j = t1.get$y(position);
          if (typeof j !== "number")
            return this.canBePlaced$3$bailout(18, position, size, 0, t1, 0, 0, $.JSInt_methods, height, 0, 0, i, 0, 0, 0, 0, 0, 0, 0, 0, collision, j);
          while (true) {
            t2 = t1.get$y(position);
            if (typeof t2 !== "number")
              return this.canBePlaced$3$bailout(19, position, size, 0, t1, t2, 0, $.JSInt_methods, height, 0, 0, i, 0, 0, 0, 0, 0, 0, 0, 0, collision, j);
            if (!(j < t2 + size))
              break;
            if (this.withinWorld$2(i, j)) {
              tileHeight = this.getHighestTerrain$1(new $.Vector(i, j));
              if (tileHeight < 0) {
                collision = true;
                break;
              }
              if (tileHeight !== height) {
                collision = true;
                break;
              }
              t2 = this.world.tiles;
              if (i < 0 || i >= t2.length)
                throw $.ioore(i);
              t2 = t2[i];
              if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !$.isJsIndexable(t2, t2[$.dispatchPropertyName])))
                return this.canBePlaced$3$bailout(20, position, size, 0, t1, t2, $.JSNumber_methods, $.JSInt_methods, height, 0, 0, i, 0, 0, 0, 0, 0, 0, 0, 0, collision, j, tileHeight);
              if (j >>> 0 !== j || j >= t2.length)
                throw $.ioore(j);
              t2 = t2[j];
              if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !$.isJsIndexable(t2, t2[$.dispatchPropertyName])))
                return this.canBePlaced$3$bailout(21, position, size, 0, t1, t2, $.JSNumber_methods, $.JSInt_methods, height, 0, 0, i, 0, 0, 0, 0, 0, 0, 0, 0, collision, j, tileHeight);
              if (tileHeight >>> 0 !== tileHeight || tileHeight >= t2.length)
                throw $.ioore(tileHeight);
              if ($.get$index$x(t2[tileHeight]) !== 7) {
                t2 = this.world.tiles;
                if (i >= t2.length)
                  throw $.ioore(i);
                t2 = t2[i];
                if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !$.isJsIndexable(t2, t2[$.dispatchPropertyName])))
                  return this.canBePlaced$3$bailout(22, position, size, 0, t1, t2, $.JSNumber_methods, $.JSInt_methods, height, 0, 0, i, 0, 0, 0, 0, 0, 0, 0, 0, collision, j, tileHeight);
                if (j >= t2.length)
                  throw $.ioore(j);
                t2 = t2[j];
                if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !$.isJsIndexable(t2, t2[$.dispatchPropertyName])))
                  return this.canBePlaced$3$bailout(23, position, size, 0, t1, t2, $.JSNumber_methods, $.JSInt_methods, height, 0, 0, i, 0, 0, 0, 0, 0, 0, 0, 0, collision, j, tileHeight);
                if (tileHeight >= t2.length)
                  throw $.ioore(tileHeight);
                if ($.get$index$x(t2[tileHeight]) !== 11) {
                  t2 = this.world.tiles;
                  if (i >= t2.length)
                    throw $.ioore(i);
                  t2 = t2[i];
                  if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !$.isJsIndexable(t2, t2[$.dispatchPropertyName])))
                    return this.canBePlaced$3$bailout(24, position, size, 0, t1, t2, $.JSNumber_methods, $.JSInt_methods, height, 0, 0, i, 0, 0, 0, 0, 0, 0, 0, 0, collision, j, tileHeight);
                  if (j >= t2.length)
                    throw $.ioore(j);
                  t2 = t2[j];
                  if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !$.isJsIndexable(t2, t2[$.dispatchPropertyName])))
                    return this.canBePlaced$3$bailout(25, position, size, 0, t1, t2, $.JSNumber_methods, $.JSInt_methods, height, 0, 0, i, 0, 0, 0, 0, 0, 0, 0, 0, collision, j, tileHeight);
                  if (tileHeight >= t2.length)
                    throw $.ioore(tileHeight);
                  if ($.get$index$x(t2[tileHeight]) !== 13) {
                    t2 = this.world.tiles;
                    if (i >= t2.length)
                      throw $.ioore(i);
                    t2 = t2[i];
                    if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !$.isJsIndexable(t2, t2[$.dispatchPropertyName])))
                      return this.canBePlaced$3$bailout(26, position, size, 0, t1, t2, $.JSNumber_methods, $.JSInt_methods, height, 0, 0, i, 0, 0, 0, 0, 0, 0, 0, 0, collision, j, tileHeight);
                    if (j >= t2.length)
                      throw $.ioore(j);
                    t2 = t2[j];
                    if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !$.isJsIndexable(t2, t2[$.dispatchPropertyName])))
                      return this.canBePlaced$3$bailout(27, position, size, 0, t1, t2, $.JSNumber_methods, $.JSInt_methods, height, 0, 0, i, 0, 0, 0, 0, 0, 0, 0, 0, collision, j, tileHeight);
                    if (tileHeight >= t2.length)
                      throw $.ioore(tileHeight);
                    if ($.get$index$x(t2[tileHeight]) !== 14) {
                      t2 = this.world.tiles;
                      if (i >= t2.length)
                        throw $.ioore(i);
                      t2 = t2[i];
                      if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !$.isJsIndexable(t2, t2[$.dispatchPropertyName])))
                        return this.canBePlaced$3$bailout(28, position, size, 0, t1, t2, $.JSNumber_methods, $.JSInt_methods, height, 0, 0, i, 0, 0, 0, 0, 0, 0, 0, 0, collision, j, tileHeight);
                      if (j >= t2.length)
                        throw $.ioore(j);
                      t2 = t2[j];
                      if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !$.isJsIndexable(t2, t2[$.dispatchPropertyName])))
                        return this.canBePlaced$3$bailout(29, position, size, 0, t1, t2, $.JSNumber_methods, $.JSInt_methods, height, 0, 0, i, 0, 0, 0, 0, 0, 0, 0, 0, collision, j, tileHeight);
                      if (tileHeight >= t2.length)
                        throw $.ioore(tileHeight);
                      t2 = $.get$index$x(t2[tileHeight]) === 15;
                    } else
                      t2 = true;
                  } else
                    t2 = true;
                } else
                  t2 = true;
              } else
                t2 = true;
              if (!t2) {
                collision = true;
                break;
              }
            }
            ++j;
          }
          ++i;
        }
      }
    } else
      collision = true;
    return !collision;
  },
  canBePlaced$3$bailout: function(state0, position, size, building, t1, t2, t4, t3, height, t5, t6, i, x1, t7, x2, y1, y2, cx1, cx2, cy1, collision, j, tileHeight) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = $.getInterceptor$x(position);
        t2 = t1.get$x(position);
      case 2:
        state0 = 0;
        t3 = $.getInterceptor$n(t2);
      default:
        if (state0 === 5 || state0 === 4 || state0 === 3 || state0 === 0 && t3.$gt(t2, -1))
          switch (state0) {
            case 0:
              t4 = this.world.size.x;
            case 3:
              state0 = 0;
            default:
              if (state0 === 5 || state0 === 4 || state0 === 0 && t3.$lt(t2, $.$add$ns($.$sub$n(t4, size), 1)))
                switch (state0) {
                  case 0:
                    t2 = t1.get$y(position);
                  case 4:
                    state0 = 0;
                    t3 = $.getInterceptor$n(t2);
                  case 5:
                    if (state0 === 5 || state0 === 0 && t3.$gt(t2, -1))
                      switch (state0) {
                        case 0:
                          t4 = this.world.size.y;
                        case 5:
                          state0 = 0;
                          t4 = t3.$lt(t2, $.$add$ns($.$sub$n(t4, size), 1));
                          t2 = t4;
                      }
                    else
                      t2 = false;
                }
              else
                t2 = false;
          }
        else
          t2 = false;
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
        var cy2;
        if (state0 === 30 || state0 === 29 || state0 === 28 || state0 === 27 || state0 === 26 || state0 === 25 || state0 === 24 || state0 === 23 || state0 === 22 || state0 === 21 || state0 === 20 || state0 === 19 || state0 === 18 || state0 === 17 || state0 === 16 || state0 === 15 || state0 === 14 || state0 === 13 || state0 === 12 || state0 === 11 || state0 === 10 || state0 === 9 || state0 === 8 || state0 === 7 || state0 === 6 || state0 === 0 && t2)
          switch (state0) {
            case 0:
              height = this.getHighestTerrain$1(position);
              t2 = $.getInterceptor(building);
              t3 = building != null;
              t4 = this.tileSize;
              t5 = $.getInterceptor$n(size);
              i = 0;
            default:
              L0:
                while (true)
                  switch (state0) {
                    case 0:
                      t6 = this.buildings;
                      collision = false;
                      if (!(i < t6.length))
                        break L0;
                    default:
                      c$0: {
                        switch (state0) {
                          case 0:
                            t6 = t6[i];
                            if ($.get$status$x(t6) !== "IDLE")
                              break c$0;
                            if (t3 && t2.$eq(building, t6))
                              break c$0;
                            t6 = this.buildings;
                            if (i >= t6.length)
                              throw $.ioore(i);
                            t6 = $.get$x$x($.get$position$x(t6[i]));
                          case 6:
                            state0 = 0;
                            x1 = $.$mul$n(t6, t4);
                            t6 = this.buildings;
                            if (i >= t6.length)
                              throw $.ioore(i);
                            t6 = $.get$x$x($.get$position$x(t6[i]));
                          case 7:
                            state0 = 0;
                            t6 = $.$mul$n(t6, t4);
                            t7 = this.buildings;
                            if (i >= t7.length)
                              throw $.ioore(i);
                            t7 = $.get$size$x(t7[i]);
                          case 8:
                            state0 = 0;
                            x2 = $.$sub$n($.$add$ns(t6, $.$mul$n(t7, t4)), 1);
                            t7 = this.buildings;
                            if (i >= t7.length)
                              throw $.ioore(i);
                            t7 = $.get$y$x($.get$position$x(t7[i]));
                          case 9:
                            state0 = 0;
                            y1 = $.$mul$n(t7, t4);
                            t7 = this.buildings;
                            if (i >= t7.length)
                              throw $.ioore(i);
                            t7 = $.get$y$x($.get$position$x(t7[i]));
                          case 10:
                            state0 = 0;
                            t7 = $.$mul$n(t7, t4);
                            t6 = this.buildings;
                            if (i >= t6.length)
                              throw $.ioore(i);
                            t6 = $.get$size$x(t6[i]);
                          case 11:
                            state0 = 0;
                            y2 = $.$sub$n($.$add$ns(t7, $.$mul$n(t6, t4)), 1);
                            t6 = t1.get$x(position);
                          case 12:
                            state0 = 0;
                            cx1 = $.$mul$n(t6, t4);
                            t6 = t1.get$x(position);
                          case 13:
                            state0 = 0;
                            cx2 = $.$sub$n($.$add$ns($.$mul$n(t6, t4), t5.$mul(size, t4)), 1);
                            t6 = t1.get$y(position);
                          case 14:
                            state0 = 0;
                            cy1 = $.$mul$n(t6, t4);
                            t6 = t1.get$y(position);
                          case 15:
                            state0 = 0;
                            cy2 = $.$sub$n($.$add$ns($.$mul$n(t6, t4), t5.$mul(size, t4)), 1);
                            t6 = $.getInterceptor$n(cx1);
                            if (!(t6.$ge(cx1, x1) && t6.$le(cx1, x2))) {
                              t6 = $.getInterceptor$n(cx2);
                              t6 = t6.$ge(cx2, x1) && t6.$le(cx2, x2);
                            } else
                              t6 = true;
                            if (t6) {
                              t6 = $.getInterceptor$n(cy1);
                              if (!(t6.$ge(cy1, y1) && t6.$le(cy1, y2))) {
                                t6 = $.getInterceptor$n(cy2);
                                t6 = t6.$ge(cy2, y1) && t6.$le(cy2, y2);
                              } else
                                t6 = true;
                            } else
                              t6 = false;
                            if (t6) {
                              collision = true;
                              break L0;
                            }
                        }
                      }
                      ++i;
                  }
            case 16:
            case 17:
            case 18:
            case 19:
            case 20:
            case 21:
            case 22:
            case 23:
            case 24:
            case 25:
            case 26:
            case 27:
            case 28:
            case 29:
            case 30:
              if (state0 === 30 || state0 === 29 || state0 === 28 || state0 === 27 || state0 === 26 || state0 === 25 || state0 === 24 || state0 === 23 || state0 === 22 || state0 === 21 || state0 === 20 || state0 === 19 || state0 === 18 || state0 === 17 || state0 === 16 || state0 === 0 && !collision)
                switch (state0) {
                  case 0:
                    i = t1.get$x(position);
                  case 16:
                    state0 = 0;
                  default:
                    L1:
                      while (true)
                        switch (state0) {
                          case 0:
                            t2 = t1.get$x(position);
                          case 17:
                            state0 = 0;
                            t3 = $.getInterceptor$n(i);
                            if (!t3.$lt(i, $.$add$ns(t2, size)))
                              break L1;
                            j = t1.get$y(position);
                          case 18:
                            state0 = 0;
                          default:
                            L2:
                              while (true)
                                switch (state0) {
                                  case 0:
                                    t2 = t1.get$y(position);
                                  case 19:
                                    state0 = 0;
                                    t4 = $.getInterceptor$n(j);
                                    if (!t4.$lt(j, $.$add$ns(t2, size)))
                                      break L2;
                                  default:
                                    if (state0 === 29 || state0 === 28 || state0 === 27 || state0 === 26 || state0 === 25 || state0 === 24 || state0 === 23 || state0 === 22 || state0 === 21 || state0 === 20 || state0 === 0 && this.withinWorld$2(i, j))
                                      switch (state0) {
                                        case 0:
                                          tileHeight = this.getHighestTerrain$1(new $.Vector(i, j));
                                          if (tileHeight < 0) {
                                            collision = true;
                                            break L2;
                                          }
                                          if (tileHeight !== height) {
                                            collision = true;
                                            break L2;
                                          }
                                          t2 = this.world.tiles;
                                          if (i >>> 0 !== i || i >= t2.length)
                                            throw $.ioore(i);
                                          t2 = t2[i];
                                        case 20:
                                          state0 = 0;
                                          t2 = $.$index$asx(t2, j);
                                        case 21:
                                          state0 = 0;
                                        default:
                                          if (state0 === 29 || state0 === 28 || state0 === 27 || state0 === 26 || state0 === 25 || state0 === 24 || state0 === 23 || state0 === 22 || state0 === 0 && $.get$index$x($.$index$asx(t2, tileHeight)) !== 7)
                                            switch (state0) {
                                              case 0:
                                                t2 = this.world.tiles;
                                                if (i >= t2.length)
                                                  throw $.ioore(i);
                                                t2 = t2[i];
                                              case 22:
                                                state0 = 0;
                                                t2 = $.$index$asx(t2, j);
                                              case 23:
                                                state0 = 0;
                                              default:
                                                if (state0 === 29 || state0 === 28 || state0 === 27 || state0 === 26 || state0 === 25 || state0 === 24 || state0 === 0 && $.get$index$x($.$index$asx(t2, tileHeight)) !== 11)
                                                  switch (state0) {
                                                    case 0:
                                                      t2 = this.world.tiles;
                                                      if (i >= t2.length)
                                                        throw $.ioore(i);
                                                      t2 = t2[i];
                                                    case 24:
                                                      state0 = 0;
                                                      t2 = $.$index$asx(t2, j);
                                                    case 25:
                                                      state0 = 0;
                                                    default:
                                                      if (state0 === 29 || state0 === 28 || state0 === 27 || state0 === 26 || state0 === 0 && $.get$index$x($.$index$asx(t2, tileHeight)) !== 13)
                                                        switch (state0) {
                                                          case 0:
                                                            t2 = this.world.tiles;
                                                            if (i >= t2.length)
                                                              throw $.ioore(i);
                                                            t2 = t2[i];
                                                          case 26:
                                                            state0 = 0;
                                                            t2 = $.$index$asx(t2, j);
                                                          case 27:
                                                            state0 = 0;
                                                          default:
                                                            if (state0 === 29 || state0 === 28 || state0 === 0 && $.get$index$x($.$index$asx(t2, tileHeight)) !== 14)
                                                              switch (state0) {
                                                                case 0:
                                                                  t2 = this.world.tiles;
                                                                  if (i >= t2.length)
                                                                    throw $.ioore(i);
                                                                  t2 = t2[i];
                                                                case 28:
                                                                  state0 = 0;
                                                                  t2 = $.$index$asx(t2, j);
                                                                case 29:
                                                                  state0 = 0;
                                                                  t2 = $.get$index$x($.$index$asx(t2, tileHeight)) === 15;
                                                              }
                                                            else
                                                              t2 = true;
                                                        }
                                                      else
                                                        t2 = true;
                                                  }
                                                else
                                                  t2 = true;
                                            }
                                          else
                                            t2 = true;
                                          if (!t2) {
                                            collision = true;
                                            break L2;
                                          }
                                      }
                                    j = t4.$add(j, 1);
                                }
                            i = t3.$add(i, 1);
                          case 30:
                            state0 = 0;
                        }
                }
          }
        else
          collision = true;
        return !collision;
    }
  },
  updatePacketQueue$0: function() {
    var i, t1, packet;
    for (i = this.packetQueue.length - 1; i >= 0; --i) {
      t1 = this.currentEnergy;
      if (t1 > 0) {
        this.currentEnergy = t1 - 1;
        $.set$innerHtml$x(document.querySelector("#energy"), "Energy: " + $.JSNumber_methods.toString$0(this.currentEnergy) + "/" + $.JSNumber_methods.toString$0(this.maxEnergy));
        packet = $.JSArray_methods.removeAt$1(this.packetQueue, 0);
        this.packets.push(packet);
      }
    }
  },
  updateBuildings$0: function() {
    var i, t1;
    this.checkOperating$0();
    for (i = 0; t1 = this.buildings, i < t1.length; ++i)
      t1[i].move$0();
    for (i = 0; t1 = this.buildings, i < t1.length; ++i)
      t1[i].shield$0();
    this.damageTimer = this.damageTimer + 1;
    if (this.damageTimer > 100) {
      this.damageTimer = 0;
      for (i = 0; t1 = this.buildings, i < t1.length; ++i)
        t1[i].takeDamage$0();
    }
    for (i = 0; t1 = this.buildings, i < t1.length; ++i) {
      t1 = t1[i];
      if (t1.get$active() && $.get$status$x(t1) === "IDLE") {
        t1.set$requestTimer(t1.get$requestTimer() + 1);
        t1 = this.buildings;
        if (i >= t1.length)
          throw $.ioore(i);
        if (!$.$eq(t1[i].get$imageID(), "base")) {
          t1 = this.buildings;
          if (i >= t1.length)
            throw $.ioore(i);
          t1 = t1[i];
          if (t1.get$maxHealth() - t1.get$health() - t1.get$healthRequests() > 0 && t1.get$requestTimer() > 50) {
            t1.set$requestTimer(0);
            t1 = this.buildings;
            if (i >= t1.length)
              throw $.ioore(i);
            this.queuePacket$2(t1[i], "health");
          }
        }
        t1 = this.buildings;
        if (i >= t1.length)
          throw $.ioore(i);
        t1 = t1[i];
        if (t1.get$needsEnergy() && t1.get$built())
          if (t1.get$maxEnergy() - t1.get$energy() - t1.get$energyRequests() > 0 && t1.get$requestTimer() > 50) {
            t1.set$requestTimer(0);
            t1 = this.buildings;
            if (i >= t1.length)
              throw $.ioore(i);
            this.queuePacket$2(t1[i], "energy");
          }
      }
    }
  },
  updateEnergy$0: function() {
    var t1, t2, t3, k, t4, height, centerBuilding, i, j, t5, positionCurrent, positionCurrentCenter, tileHeight, packet;
    this.energyTimer = this.energyTimer + 1;
    t1 = this.energyTimer;
    t2 = 250 / this.speed;
    if (t1 > t2) {
      this.energyTimer = t1 - t2;
      for (t1 = this.tileSize, t2 = t1 * 6, t3 = t1 / 2, k = 0; t4 = this.buildings, k < t4.length; ++k) {
        if ($.$eq(t4[k].get$imageID(), "collector")) {
          t4 = this.buildings;
          if (k >= t4.length)
            throw $.ioore(k);
          t4 = t4[k].get$built();
        } else
          t4 = false;
        if (t4) {
          t4 = this.buildings;
          if (k >= t4.length)
            throw $.ioore(k);
          height = this.getHighestTerrain$1($.get$position$x(t4[k]));
          t4 = this.buildings;
          if (k >= t4.length)
            throw $.ioore(k);
          centerBuilding = t4[k].getCenter$0();
          for (i = -5; i < 7; ++i)
            for (j = -5; j < 7; ++j) {
              t4 = this.buildings;
              if (k >= t4.length)
                throw $.ioore(k);
              t4 = $.$add$ns($.get$x$x($.get$position$x(t4[k])), i);
              t5 = this.buildings;
              if (k >= t5.length)
                throw $.ioore(k);
              positionCurrent = new $.Vector(t4, $.$add$ns($.get$y$x($.get$position$x(t5[k])), j));
              t4 = positionCurrent.x;
              if (this.withinWorld$2(t4, positionCurrent.y)) {
                positionCurrentCenter = new $.Vector($.$add$ns($.$mul$n(t4, t1), t3), $.$add$ns($.$mul$n(positionCurrent.y, t1), t3));
                tileHeight = this.getHighestTerrain$1(positionCurrent);
                t4 = $.$sub$n(positionCurrentCenter.x, centerBuilding.x);
                if (typeof t4 !== "number")
                  $.throwExpression(new $.ArgumentError(t4));
                t4 = Math.pow(t4, 2);
                t5 = $.$sub$n(positionCurrentCenter.y, centerBuilding.y);
                if (typeof t5 !== "number")
                  $.throwExpression(new $.ArgumentError(t5));
                t5 = Math.pow(t5, 2);
                if (t4 + t5 < Math.pow(t2, 2))
                  if (tileHeight === height) {
                    t4 = this.world.tiles;
                    t5 = positionCurrent.x;
                    if (t5 >>> 0 !== t5 || t5 >= t4.length)
                      throw $.ioore(t5);
                    t5 = $.$index$asx($.$index$asx(t4[t5], positionCurrent.y), tileHeight).get$collector();
                    t4 = this.buildings;
                    if (k >= t4.length)
                      throw $.ioore(k);
                    if ($.$eq(t5, t4[k])) {
                      t4 = this.buildings;
                      if (k >= t4.length)
                        throw $.ioore(k);
                      t4 = t4[k];
                      t4.set$collectedEnergy(t4.get$collectedEnergy() + 1);
                    }
                  }
              }
            }
        }
      }
    }
    for (i = 0; t1 = this.buildings, i < t1.length; ++i) {
      t1 = t1[i];
      t2 = t1.get$collectedEnergy();
      if (t2 >= 100) {
        t1.set$collectedEnergy(t2 - 100);
        t1 = this.buildings;
        if (i >= t1.length)
          throw $.ioore(i);
        packet = new $.Packet(t1[i].getCenter$0(), new $.Vector(0, 0), "packet_collection", "collection", false, 1, null, null);
        packet.target = this.base;
        t1 = this.buildings;
        if (i >= t1.length)
          throw $.ioore(i);
        packet.currentTarget = t1[i];
        this.findRoute$1(packet);
        if (packet.currentTarget != null)
          this.packets.push(packet);
      }
    }
  },
  updatePackets$0: function() {
    var i, t1, t2;
    for (i = this.packets.length - 1; i >= 0; --i) {
      t1 = this.packets;
      if (i >= t1.length)
        throw $.ioore(i);
      t2 = t1[i];
      if ($.get$remove$ax(t2) === true)
        $.JSArray_methods.removeAt$1(t1, i);
      else
        t2.move$0();
    }
  },
  updateShells$0: function() {
    var i, t1, t2;
    for (i = this.shells.length - 1; i >= 0; --i) {
      t1 = this.shells;
      if (i >= t1.length)
        throw $.ioore(i);
      t2 = t1[i];
      if ($.get$remove$ax(t2) === true)
        $.JSArray_methods.removeAt$1(t1, i);
      else
        t2.move$0();
    }
  },
  updateSpores$0: function() {
    var i, t1, t2;
    for (i = this.spores.length - 1; i >= 0; --i) {
      t1 = this.spores;
      if (i >= t1.length)
        throw $.ioore(i);
      t2 = t1[i];
      if ($.get$remove$ax(t2) === true)
        $.JSArray_methods.removeAt$1(t1, i);
      else
        t2.move$0();
    }
  },
  updateSmokes$0: function() {
    var i, t1, t2, t3;
    this.smokeTimer = this.smokeTimer + 1;
    if (this.smokeTimer > 3) {
      this.smokeTimer = 0;
      for (i = this.smokes.length - 1; i >= 0; --i) {
        t1 = this.smokes;
        if (i >= t1.length)
          throw $.ioore(i);
        t2 = t1[i];
        t3 = t2.get$frame();
        if (t3 === 36)
          $.JSArray_methods.removeAt$1(t1, i);
        else
          t2.set$frame($.$add$ns(t3, 1));
      }
    }
  },
  updateExplosions$0: function() {
    var i, t1, t2, t3;
    this.explosionTimer = this.explosionTimer + 1;
    if (this.explosionTimer === 1) {
      this.explosionTimer = 0;
      for (i = this.explosions.length - 1; i >= 0; --i) {
        t1 = this.explosions;
        if (i >= t1.length)
          throw $.ioore(i);
        t2 = t1[i];
        t3 = t2.get$frame();
        if (t3 === 44)
          $.JSArray_methods.removeAt$1(t1, i);
        else
          t2.set$frame($.$add$ns(t3, 1));
      }
    }
  },
  updateShips$0: function() {
    var i, t1;
    for (i = 0; t1 = this.ships, i < t1.length; ++i)
      t1[i].move$0();
  },
  update$0: function() {
    var t1, t2, emittersChecked, i, t3;
    for (t1 = this.emitters, t2 = t1.length, emittersChecked = 0, i = 0; i < t2; ++i)
      if (t1[i].get$building() != null)
        ++emittersChecked;
    if (emittersChecked === t2) {
      t1 = document.querySelector("#win").style;
      t1.set$display;
      $.setProperty$3$x(t1, "display", "block", "");
      t1 = this.stopwatch;
      t1.stop$0(t1);
      this.running.cancel$0();
    }
    for (i = 0; t1 = this.buildings, i < t1.length; ++i)
      t1[i].updateHoverState$0();
    for (i = 0; t1 = this.ships, i < t1.length; ++i)
      t1[i].updateHoverState$0();
    if (!this.paused) {
      this.updatePacketQueue$0();
      this.updateShells$0();
      this.updateSpores$0();
      this.updateCreeper$0();
      this.updateBuildings$0();
      this.updateEnergy$0();
      this.updatePackets$0();
      this.updateSmokes$0();
      this.updateExplosions$0();
      this.updateShips$0();
    }
    if (this.scrollingLeft) {
      t1 = this.scroll;
      t2 = t1.x;
      t3 = $.getInterceptor$n(t2);
      if (t3.$gt(t2, 0))
        t1.x = t3.$sub(t2, 1);
    } else if (this.scrollingRight) {
      t1 = this.scroll;
      t2 = t1.x;
      if ($.$lt$n(t2, this.world.size.x))
        t1.x = $.$add$ns(t2, 1);
    }
    if (this.scrollingUp) {
      t1 = this.scroll;
      t2 = t1.y;
      t3 = $.getInterceptor$n(t2);
      if (t3.$gt(t2, 0))
        t1.y = t3.$sub(t2, 1);
    } else if (this.scrollingDown) {
      t1 = this.scroll;
      t2 = t1.y;
      if ($.$lt$n(t2, this.world.size.y))
        t1.y = $.$add$ns(t2, 1);
    }
    if (this.scrollingLeft || this.scrollingRight || this.scrollingUp || this.scrollingDown) {
      this.copyTerrain$0();
      this.drawCollection$0();
      this.drawCreeper$0();
    }
  },
  drawRangeBoxes$4: function(position, type, rad, size) {
    var t1, context, t2, t3, t4, t5, positionCenter, positionHeight, radius, i, t6, t7, t8, t9, i0, j, t10, t11, positionCurrent, positionCurrentCenter, drawPositionCurrent, positionCurrentHeight, t12;
    if (typeof type !== "string")
      return this.drawRangeBoxes$4$bailout(1, position, type, rad, size);
    t1 = $.engine.canvas;
    context = t1.$index(t1, "buffer").get$context();
    t1 = position.x;
    if (typeof t1 !== "number")
      return this.drawRangeBoxes$4$bailout(2, position, type, rad, size, context, t1);
    t2 = this.tileSize;
    t3 = t2 / 2;
    if (typeof size !== "number")
      throw $.iae(size);
    t4 = t3 * size;
    t1 = t1 * t2 + t4;
    t5 = position.y;
    if (typeof t5 !== "number")
      return this.drawRangeBoxes$4$bailout(3, position, type, rad, size, context, t1, t2, t3, t4, t5);
    positionCenter = new $.Vector(t1, t5 * t2 + t4);
    positionHeight = this.getHighestTerrain$1(position);
    if (this.canBePlaced$3(position, size, null))
      t1 = type === "collector" || type === "cannon" || type === "mortar" || type === "shield" || type === "beam" || type === "terp";
    else
      t1 = false;
    if (t1) {
      t1 = $.getInterceptor$x(context);
      t1.save$0(context);
      t1.set$globalAlpha(context, 0.25);
      radius = rad * t2;
      for (i = -radius, t4 = type === "terp", t5 = type !== "beam", t6 = type !== "shield", t7 = type !== "mortar", t8 = type === "cannon", t9 = type === "collector", i0 = i; i0 < radius; ++i0)
        for (j = i; j < radius; ++j) {
          t10 = position.x;
          if (typeof t10 !== "number")
            return this.drawRangeBoxes$4$bailout(4, position, type, 0, 0, context, t1, t2, t3, $.JSString_methods, t10, positionCenter, positionHeight, i0, i, radius, j);
          t10 += i0;
          t11 = position.y;
          if (typeof t11 !== "number")
            return this.drawRangeBoxes$4$bailout(5, position, type, 0, 0, context, t1, t2, t3, $.JSString_methods, t10, positionCenter, positionHeight, i0, i, radius, j, t11);
          positionCurrent = new $.Vector(t10, t11 + j);
          t11 = positionCurrent.x;
          if (typeof t11 !== "number")
            return this.drawRangeBoxes$4$bailout(6, position, type, 0, 0, context, t1, t2, t3, $.JSString_methods, 0, positionCenter, positionHeight, i0, i, radius, j, t11, positionCurrent);
          t11 = t11 * t2 + t3;
          t10 = positionCurrent.y;
          if (typeof t10 !== "number")
            return this.drawRangeBoxes$4$bailout(7, position, type, 0, 0, context, t1, t2, t3, $.JSString_methods, t10, positionCenter, positionHeight, i0, i, radius, j, t11, positionCurrent);
          positionCurrentCenter = new $.Vector(t11, t10 * t2 + t3);
          drawPositionCurrent = $.Helper_tiled2screen(positionCurrent);
          if (this.withinWorld$2(positionCurrent.x, positionCurrent.y)) {
            positionCurrentHeight = this.getHighestTerrain$1(positionCurrent);
            t10 = positionCurrentCenter.x;
            if (typeof t10 !== "number")
              return this.drawRangeBoxes$4$bailout(8, position, type, 0, 0, context, t1, t2, t3, $.JSString_methods, t10, positionCenter, positionHeight, i0, i, radius, j, 0, 0, positionCurrentHeight, positionCurrentCenter, drawPositionCurrent);
            t11 = positionCenter.x;
            if (typeof t11 !== "number")
              return this.drawRangeBoxes$4$bailout(9, position, type, 0, 0, context, t1, t2, t3, $.JSString_methods, t10, positionCenter, positionHeight, i0, i, radius, j, t11, 0, positionCurrentHeight, positionCurrentCenter, drawPositionCurrent);
            t11 = t10 - t11;
            t10 = Math.pow(t11, 2);
            t11 = positionCurrentCenter.y;
            if (typeof t11 !== "number")
              return this.drawRangeBoxes$4$bailout(10, position, type, 0, 0, context, t1, t2, t3, $.JSString_methods, t10, positionCenter, positionHeight, i0, i, radius, j, t11, 0, positionCurrentHeight, 0, drawPositionCurrent);
            t12 = positionCenter.y;
            if (typeof t12 !== "number")
              return this.drawRangeBoxes$4$bailout(11, position, type, 0, 0, context, t1, t2, t3, $.JSString_methods, t10, positionCenter, positionHeight, i0, i, radius, j, t11, 0, positionCurrentHeight, 0, drawPositionCurrent, t12);
            t12 = t11 - t12;
            t11 = Math.pow(t12, 2);
            if (t10 + t11 < Math.pow(radius, 2)) {
              if (t9)
                if (positionCurrentHeight === positionHeight)
                  t1.set$fillStyle(context, "#fff");
                else
                  t1.set$fillStyle(context, "#f00");
              if (t8)
                if (positionCurrentHeight <= positionHeight)
                  t1.set$fillStyle(context, "#fff");
                else
                  t1.set$fillStyle(context, "#f00");
              if (type === "mortar" || type === "shield" || type === "beam" || t4)
                t1.set$fillStyle(context, "#fff");
              t10 = drawPositionCurrent.x;
              t11 = drawPositionCurrent.y;
              t12 = this.zoom;
              if (typeof t12 !== "number")
                throw $.iae(t12);
              t12 = t2 * t12;
              t1.fillRect$4(context, t10, t11, t12, t12);
            }
          }
        }
      t1.restore$0(context);
    }
  },
  drawRangeBoxes$4$bailout: function(state0, position, type, rad, size, context, t1, t2, t3, t4, t5, positionCenter, positionHeight, i0, i, radius, j, t6, positionCurrent, positionCurrentHeight, positionCurrentCenter, drawPositionCurrent, t7) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = $.engine.canvas;
        context = t1.$index(t1, "buffer").get$context();
        t1 = position.x;
      case 2:
        state0 = 0;
        t2 = this.tileSize;
        t1 = $.$mul$n(t1, t2);
        t3 = t2 / 2;
        if (typeof size !== "number")
          throw $.iae(size);
        t4 = t3 * size;
        t1 = $.$add$ns(t1, t4);
        t5 = position.y;
      case 3:
        state0 = 0;
        positionCenter = new $.Vector(t1, $.$add$ns($.$mul$n(t5, t2), t4));
        positionHeight = this.getHighestTerrain$1(position);
        if (this.canBePlaced$3(position, size, null)) {
          t1 = $.getInterceptor(type);
          t1 = t1.$eq(type, "collector") || t1.$eq(type, "cannon") || t1.$eq(type, "mortar") || t1.$eq(type, "shield") || t1.$eq(type, "beam") || t1.$eq(type, "terp");
        } else
          t1 = false;
      default:
        if (state0 === 11 || state0 === 10 || state0 === 9 || state0 === 8 || state0 === 7 || state0 === 6 || state0 === 5 || state0 === 4 || state0 === 0 && t1)
          switch (state0) {
            case 0:
              t1 = $.getInterceptor$x(context);
              t1.save$0(context);
              t1.set$globalAlpha(context, 0.25);
              radius = rad * t2;
              i = -radius;
              t4 = $.getInterceptor(type);
              i0 = i;
            default:
              L0:
                while (true)
                  switch (state0) {
                    case 0:
                      if (!(i0 < radius))
                        break L0;
                      j = i;
                    default:
                      L1:
                        while (true)
                          switch (state0) {
                            case 0:
                              if (!(j < radius))
                                break L1;
                              t5 = position.x;
                            case 4:
                              state0 = 0;
                              t5 = $.$add$ns(t5, i0);
                              t6 = position.y;
                            case 5:
                              state0 = 0;
                              positionCurrent = new $.Vector(t5, $.$add$ns(t6, j));
                              t6 = positionCurrent.x;
                            case 6:
                              state0 = 0;
                              t6 = $.$add$ns($.$mul$n(t6, t2), t3);
                              t5 = positionCurrent.y;
                            case 7:
                              state0 = 0;
                              positionCurrentCenter = new $.Vector(t6, $.$add$ns($.$mul$n(t5, t2), t3));
                              drawPositionCurrent = $.Helper_tiled2screen(positionCurrent);
                            default:
                              if (state0 === 11 || state0 === 10 || state0 === 9 || state0 === 8 || state0 === 0 && this.withinWorld$2(positionCurrent.x, positionCurrent.y))
                                switch (state0) {
                                  case 0:
                                    positionCurrentHeight = this.getHighestTerrain$1(positionCurrent);
                                    t5 = positionCurrentCenter.x;
                                  case 8:
                                    state0 = 0;
                                    t6 = positionCenter.x;
                                  case 9:
                                    state0 = 0;
                                    t6 = $.$sub$n(t5, t6);
                                    if (typeof t6 !== "number")
                                      $.throwExpression(new $.ArgumentError(t6));
                                    t5 = Math.pow(t6, 2);
                                    t6 = positionCurrentCenter.y;
                                  case 10:
                                    state0 = 0;
                                    t7 = positionCenter.y;
                                  case 11:
                                    state0 = 0;
                                    t7 = $.$sub$n(t6, t7);
                                    if (typeof t7 !== "number")
                                      $.throwExpression(new $.ArgumentError(t7));
                                    t6 = Math.pow(t7, 2);
                                    if (t5 + t6 < Math.pow(radius, 2)) {
                                      if (t4.$eq(type, "collector"))
                                        if (positionCurrentHeight === positionHeight)
                                          t1.set$fillStyle(context, "#fff");
                                        else
                                          t1.set$fillStyle(context, "#f00");
                                      if (t4.$eq(type, "cannon"))
                                        if (positionCurrentHeight <= positionHeight)
                                          t1.set$fillStyle(context, "#fff");
                                        else
                                          t1.set$fillStyle(context, "#f00");
                                      if (t4.$eq(type, "mortar") || t4.$eq(type, "shield") || t4.$eq(type, "beam") || t4.$eq(type, "terp"))
                                        t1.set$fillStyle(context, "#fff");
                                      t5 = drawPositionCurrent.x;
                                      t6 = drawPositionCurrent.y;
                                      t7 = this.zoom;
                                      if (typeof t7 !== "number")
                                        throw $.iae(t7);
                                      t1.fillRect$4(context, t5, t6, t2 * t7, t2 * t7);
                                    }
                                }
                              ++j;
                          }
                      ++i0;
                  }
              t1.restore$0(context);
          }
    }
  },
  drawCollection$0: function() {
    var t1, t2, t3, truncated, timesX, timesY, i, j, t4, t5, j0, t6, iS, jS, t7, t8, t9, k, t10, up, down, left, t11, right, t12, t13, t14, t15;
    t1 = $.engine.canvas;
    $.clear$0$ax(t1.$index(t1, "collection"));
    t1 = $.engine.canvas;
    $.save$0$x(t1.$index(t1, "collection").get$context());
    t1 = $.engine.canvas;
    $.set$globalAlpha$x(t1.$index(t1, "collection").get$context(), 0.5);
    t1 = this.tileSize;
    t2 = $.$div$n($.engine.halfWidth, t1);
    t3 = this.zoom;
    if (typeof t3 !== "number")
      throw $.iae(t3);
    t3 = Math.ceil(t2 / t3);
    if (isNaN(t3))
      $.throwExpression(new $.UnsupportedError("NaN"));
    if (t3 == Infinity || t3 == -Infinity)
      $.throwExpression(new $.UnsupportedError("Infinity"));
    truncated = t3 < 0 ? Math.ceil(t3) : Math.floor(t3);
    timesX = truncated == -0.0 ? 0 : truncated;
    t2 = $.$div$n($.engine.halfHeight, t1);
    t3 = this.zoom;
    if (typeof t3 !== "number")
      throw $.iae(t3);
    t3 = Math.ceil(t2 / t3);
    if (isNaN(t3))
      $.throwExpression(new $.UnsupportedError("NaN"));
    if (t3 == Infinity || t3 == -Infinity)
      $.throwExpression(new $.UnsupportedError("Infinity"));
    truncated = t3 < 0 ? Math.ceil(t3) : Math.floor(t3);
    timesY = truncated == -0.0 ? 0 : truncated;
    for (i = -timesX, j = -timesY, t2 = t1 + 6, t3 = t2 + 3, t4 = this.scroll; i <= timesX; ++i)
      for (t5 = i * t1, j0 = j; j0 <= timesY; ++j0) {
        t6 = t4.x;
        if (typeof t6 !== "number")
          throw $.iae(t6);
        iS = i + t6;
        if (iS !== (iS | 0))
          return this.drawCollection$0$bailout(1, j, i, iS, t4, t2, timesX, t3, t5, timesY, t1, j0);
        t6 = t4.y;
        if (typeof t6 !== "number")
          throw $.iae(t6);
        jS = j0 + t6;
        if (this.withinWorld$2(iS, jS))
          for (t6 = j0 * t1, t7 = jS + 1, t8 = jS - 1, t9 = t8 < 0, k = 0; k < 10; ++k) {
            t10 = this.world.tiles;
            if (iS < 0 || iS >= t10.length)
              throw $.ioore(iS);
            t10 = t10[iS];
            if (typeof t10 !== "string" && (typeof t10 !== "object" || t10 === null || t10.constructor !== Array && !$.isJsIndexable(t10, t10[$.dispatchPropertyName])))
              return this.drawCollection$0$bailout(2, j, i, iS, t4, t2, timesX, t3, t5, timesY, t1, j0, t6, jS, t8, t9, t7, k, t10);
            if (jS >>> 0 !== jS || jS >= t10.length)
              throw $.ioore(jS);
            if ($.$index$asx(t10[jS], k).get$collector() != null) {
              if (t9)
                up = 0;
              else {
                t10 = this.world.tiles;
                if (iS >= t10.length)
                  throw $.ioore(iS);
                t10 = t10[iS];
                if (typeof t10 !== "string" && (typeof t10 !== "object" || t10 === null || t10.constructor !== Array && !$.isJsIndexable(t10, t10[$.dispatchPropertyName])))
                  return this.drawCollection$0$bailout(3, j, i, iS, t4, t2, timesX, t3, t5, timesY, t1, j0, t6, jS, t8, t9, t7, k, t10);
                if (t8 >>> 0 !== t8 || t8 >= t10.length)
                  throw $.ioore(t8);
                up = $.$index$asx(t10[t8], k).get$collector() != null ? 1 : 0;
              }
              if ($.JSNumber_methods.$gt(t7, $.$sub$n(this.world.size.y, 1)))
                down = 0;
              else {
                t10 = this.world.tiles;
                if (iS >= t10.length)
                  throw $.ioore(iS);
                t10 = t10[iS];
                if (typeof t10 !== "string" && (typeof t10 !== "object" || t10 === null || t10.constructor !== Array && !$.isJsIndexable(t10, t10[$.dispatchPropertyName])))
                  return this.drawCollection$0$bailout(4, j, i, iS, t4, t2, timesX, t3, t5, timesY, t1, j0, t6, jS, t8, t9, t7, k, t10, up);
                if (t7 >>> 0 !== t7 || t7 >= t10.length)
                  throw $.ioore(t7);
                down = $.$index$asx(t10[t7], k).get$collector() != null ? 1 : 0;
              }
              t10 = iS - 1;
              if (t10 < 0)
                left = 0;
              else {
                t11 = this.world.tiles;
                if (t10 >= t11.length)
                  throw $.ioore(t10);
                t10 = t11[t10];
                if (typeof t10 !== "string" && (typeof t10 !== "object" || t10 === null || t10.constructor !== Array && !$.isJsIndexable(t10, t10[$.dispatchPropertyName])))
                  return this.drawCollection$0$bailout(5, j, i, iS, t4, t2, timesX, t3, t5, timesY, t1, j0, t6, jS, t8, t9, t7, k, t10, up, down);
                if (jS >= t10.length)
                  throw $.ioore(jS);
                left = $.$index$asx(t10[jS], k).get$collector() != null ? 1 : 0;
              }
              t10 = iS + 1;
              if ($.JSNumber_methods.$gt(t10, $.$sub$n(this.world.size.x, 1)))
                right = 0;
              else {
                t11 = this.world.tiles;
                if (t10 >= t11.length)
                  throw $.ioore(t10);
                t10 = t11[t10];
                if (typeof t10 !== "string" && (typeof t10 !== "object" || t10 === null || t10.constructor !== Array && !$.isJsIndexable(t10, t10[$.dispatchPropertyName])))
                  return this.drawCollection$0$bailout(6, j, i, iS, t4, t2, timesX, t3, t5, timesY, t1, j0, t6, jS, t8, t9, t7, k, t10, up, down, left);
                if (jS >= t10.length)
                  throw $.ioore(jS);
                right = $.$index$asx(t10[jS], k).get$collector() != null ? 1 : 0;
              }
              t10 = $.engine.canvas;
              t10 = t10.$index(t10, "collection").get$context();
              t11 = $.engine.images;
              t11 = t11.$index(t11, "mask");
              t12 = $.engine;
              t13 = t12.halfWidth;
              t14 = this.zoom;
              if (typeof t14 !== "number")
                throw $.iae(t14);
              t15 = t1 * t14;
              $.drawImageScaledFromSource$9$x(t10, t11, (8 * down + 4 * left + 2 * up + right) * t2 + 3, t3, t1, t1, $.$add$ns(t13, t5 * t14), $.$add$ns(t12.halfHeight, t6 * t14), t15, t15);
            }
          }
      }
    t1 = $.engine.canvas;
    $.restore$0$x(t1.$index(t1, "collection").get$context());
  },
  drawCollection$0$bailout: function(state0, j, i, iS, t4, t2, timesX, t3, t5, timesY, t1, j0, t6, jS, t8, t9, t7, k, t10, up, down, left) {
    switch (state0) {
      case 0:
        t1 = $.engine.canvas;
        $.clear$0$ax(t1.$index(t1, "collection"));
        t1 = $.engine.canvas;
        $.save$0$x(t1.$index(t1, "collection").get$context());
        t1 = $.engine.canvas;
        $.set$globalAlpha$x(t1.$index(t1, "collection").get$context(), 0.5);
        t1 = this.tileSize;
        t2 = $.$div$n($.engine.halfWidth, t1);
        t3 = this.zoom;
        if (typeof t3 !== "number")
          throw $.iae(t3);
        t3 = Math.ceil(t2 / t3);
        if (isNaN(t3))
          $.throwExpression(new $.UnsupportedError("NaN"));
        if (t3 == Infinity || t3 == -Infinity)
          $.throwExpression(new $.UnsupportedError("Infinity"));
        truncated = t3 < 0 ? Math.ceil(t3) : Math.floor(t3);
        timesX = truncated == -0.0 ? 0 : truncated;
        t2 = $.$div$n($.engine.halfHeight, t1);
        t3 = this.zoom;
        if (typeof t3 !== "number")
          throw $.iae(t3);
        t3 = Math.ceil(t2 / t3);
        if (isNaN(t3))
          $.throwExpression(new $.UnsupportedError("NaN"));
        if (t3 == Infinity || t3 == -Infinity)
          $.throwExpression(new $.UnsupportedError("Infinity"));
        truncated = t3 < 0 ? Math.ceil(t3) : Math.floor(t3);
        timesY = truncated == -0.0 ? 0 : truncated;
        i = -timesX;
        j = -timesY;
        t2 = t1 + 6;
        t3 = t2 + 3;
        t4 = this.scroll;
      default:
        var truncated, t11, right, t12, t13, t14, t15;
        L0:
          while (true)
            switch (state0) {
              case 0:
                if (!(i <= timesX))
                  break L0;
                t5 = i * t1;
                j0 = j;
              default:
                L1:
                  while (true)
                    switch (state0) {
                      case 0:
                        if (!(j0 <= timesY))
                          break L1;
                        t6 = t4.x;
                        if (typeof t6 !== "number")
                          throw $.iae(t6);
                        iS = i + t6;
                      case 1:
                        state0 = 0;
                        t6 = t4.y;
                        if (typeof t6 !== "number")
                          throw $.iae(t6);
                        jS = j0 + t6;
                      default:
                        if (state0 === 6 || state0 === 5 || state0 === 4 || state0 === 3 || state0 === 2 || state0 === 0 && this.withinWorld$2(iS, jS))
                          switch (state0) {
                            case 0:
                              t6 = j0 * t1;
                              t7 = jS + 1;
                              t8 = jS - 1;
                              t9 = t8 < 0;
                              k = 0;
                            default:
                              L2:
                                while (true)
                                  switch (state0) {
                                    case 0:
                                      if (!(k < 10))
                                        break L2;
                                      t10 = this.world.tiles;
                                      if (iS >>> 0 !== iS || iS >= t10.length)
                                        throw $.ioore(iS);
                                      t10 = t10[iS];
                                    case 2:
                                      state0 = 0;
                                    default:
                                      if (state0 === 6 || state0 === 5 || state0 === 4 || state0 === 3 || state0 === 0 && $.$index$asx($.$index$asx(t10, jS), k).get$collector() != null)
                                        switch (state0) {
                                          case 0:
                                          case 3:
                                            if (state0 === 0 && t9)
                                              up = 0;
                                            else
                                              switch (state0) {
                                                case 0:
                                                  t10 = this.world.tiles;
                                                  if (iS >= t10.length)
                                                    throw $.ioore(iS);
                                                  t10 = t10[iS];
                                                case 3:
                                                  state0 = 0;
                                                  up = $.$index$asx($.$index$asx(t10, t8), k).get$collector() != null ? 1 : 0;
                                              }
                                          case 4:
                                            if (state0 === 0 && $.JSNumber_methods.$gt(t7, $.$sub$n(this.world.size.y, 1)))
                                              down = 0;
                                            else
                                              switch (state0) {
                                                case 0:
                                                  t10 = this.world.tiles;
                                                  if (iS >= t10.length)
                                                    throw $.ioore(iS);
                                                  t10 = t10[iS];
                                                case 4:
                                                  state0 = 0;
                                                  down = $.$index$asx($.$index$asx(t10, t7), k).get$collector() != null ? 1 : 0;
                                              }
                                            t10 = iS - 1;
                                          case 5:
                                            if (state0 === 0 && t10 < 0)
                                              left = 0;
                                            else
                                              switch (state0) {
                                                case 0:
                                                  t11 = this.world.tiles;
                                                  if (t10 >= t11.length)
                                                    throw $.ioore(t10);
                                                  t10 = t11[t10];
                                                case 5:
                                                  state0 = 0;
                                                  left = $.$index$asx($.$index$asx(t10, jS), k).get$collector() != null ? 1 : 0;
                                              }
                                            t10 = iS + 1;
                                          case 6:
                                            if (state0 === 0 && $.JSNumber_methods.$gt(t10, $.$sub$n(this.world.size.x, 1)))
                                              right = 0;
                                            else
                                              switch (state0) {
                                                case 0:
                                                  t11 = this.world.tiles;
                                                  if (t10 >= t11.length)
                                                    throw $.ioore(t10);
                                                  t10 = t11[t10];
                                                case 6:
                                                  state0 = 0;
                                                  right = $.$index$asx($.$index$asx(t10, jS), k).get$collector() != null ? 1 : 0;
                                              }
                                            t10 = $.engine.canvas;
                                            t10 = t10.$index(t10, "collection").get$context();
                                            t11 = $.engine.images;
                                            t11 = t11.$index(t11, "mask");
                                            t12 = $.engine;
                                            t13 = t12.halfWidth;
                                            t14 = this.zoom;
                                            if (typeof t14 !== "number")
                                              throw $.iae(t14);
                                            t15 = t1 * t14;
                                            $.drawImageScaledFromSource$9$x(t10, t11, (8 * down + 4 * left + 2 * up + right) * t2 + 3, t3, t1, t1, $.$add$ns(t13, t5 * t14), $.$add$ns(t12.halfHeight, t6 * t14), t15, t15);
                                        }
                                      ++k;
                                  }
                          }
                        ++j0;
                    }
                ++i;
            }
        t1 = $.engine.canvas;
        $.restore$0$x(t1.$index(t1, "collection").get$context());
    }
  },
  drawCreeper$0: function() {
    var t1, t2, t3, truncated, timesX, timesY, i, j, j0, t4, iS, jS, creep, up, t5, down, left, right, t6, t7, t8, t9, t10;
    t1 = $.engine.canvas;
    $.clear$0$ax(t1.$index(t1, "creeper"));
    t1 = this.tileSize;
    t2 = $.$div$n($.engine.halfWidth, t1);
    t3 = this.zoom;
    if (typeof t3 !== "number")
      throw $.iae(t3);
    t3 = Math.ceil(t2 / t3);
    if (isNaN(t3))
      $.throwExpression(new $.UnsupportedError("NaN"));
    if (t3 == Infinity || t3 == -Infinity)
      $.throwExpression(new $.UnsupportedError("Infinity"));
    truncated = t3 < 0 ? Math.ceil(t3) : Math.floor(t3);
    timesX = truncated == -0.0 ? 0 : truncated;
    t2 = $.$div$n($.engine.halfHeight, t1);
    t3 = this.zoom;
    if (typeof t3 !== "number")
      throw $.iae(t3);
    t3 = Math.ceil(t2 / t3);
    if (isNaN(t3))
      $.throwExpression(new $.UnsupportedError("NaN"));
    if (t3 == Infinity || t3 == -Infinity)
      $.throwExpression(new $.UnsupportedError("Infinity"));
    truncated = t3 < 0 ? Math.ceil(t3) : Math.floor(t3);
    timesY = truncated == -0.0 ? 0 : truncated;
    for (i = -timesX, j = -timesY, t2 = this.scroll; i <= timesX; ++i)
      for (t3 = i * t1, j0 = j; j0 <= timesY; ++j0) {
        t4 = t2.x;
        if (typeof t4 !== "number")
          throw $.iae(t4);
        iS = i + t4;
        t4 = t2.y;
        if (typeof t4 !== "number")
          throw $.iae(t4);
        jS = j0 + t4;
        if (this.withinWorld$2(iS, jS)) {
          t4 = this.world.tiles;
          if (iS >>> 0 !== iS || iS >= t4.length)
            throw $.ioore(iS);
          if ($.$gt$n($.$index$asx($.$index$asx(t4[iS], jS), 0).get$creep(), 0)) {
            t4 = this.world.tiles;
            if (iS >= t4.length)
              throw $.ioore(iS);
            creep = $.ceil$0$nx($.$index$asx($.$index$asx(t4[iS], jS), 0).get$creep());
            t4 = jS - 1;
            if (t4 < 0)
              up = 0;
            else {
              t5 = this.world.tiles;
              if (iS >= t5.length)
                throw $.ioore(iS);
              up = $.$ge$n($.ceil$0$nx($.$index$asx($.$index$asx(t5[iS], t4), 0).get$creep()), creep) ? 1 : 0;
            }
            t4 = jS + 1;
            if ($.JSNumber_methods.$gt(t4, $.$sub$n(this.world.size.y, 1)))
              down = 0;
            else {
              t5 = this.world.tiles;
              if (iS >= t5.length)
                throw $.ioore(iS);
              down = $.$ge$n($.ceil$0$nx($.$index$asx($.$index$asx(t5[iS], t4), 0).get$creep()), creep) ? 1 : 0;
            }
            t4 = iS - 1;
            if (t4 < 0)
              left = 0;
            else {
              t5 = this.world.tiles;
              if (t4 >= t5.length)
                throw $.ioore(t4);
              left = $.$ge$n($.ceil$0$nx($.$index$asx($.$index$asx(t5[t4], jS), 0).get$creep()), creep) ? 1 : 0;
            }
            t4 = iS + 1;
            if ($.JSNumber_methods.$gt(t4, $.$sub$n(this.world.size.x, 1)))
              right = 0;
            else {
              t5 = this.world.tiles;
              if (t4 >= t5.length)
                throw $.ioore(t4);
              right = $.$ge$n($.ceil$0$nx($.$index$asx($.$index$asx(t5[t4], jS), 0).get$creep()), creep) ? 1 : 0;
            }
            t4 = $.engine.canvas;
            t4 = t4.$index(t4, "creeper").get$context();
            t5 = $.engine.images;
            t5 = t5.$index(t5, "creep");
            t6 = $.$mul$n($.$sub$n(creep, 1), t1);
            t7 = $.engine;
            t8 = t7.halfWidth;
            t9 = this.zoom;
            if (typeof t9 !== "number")
              throw $.iae(t9);
            t10 = t1 * t9;
            $.drawImageScaledFromSource$9$x(t4, t5, (8 * down + 4 * left + 2 * up + right) * t1, t6, t1, t1, $.$add$ns(t8, t3 * t9), $.$add$ns(t7.halfHeight, j0 * t1 * t9), t10, t10);
          }
        }
      }
  },
  drawPositionInfo$0: function() {
    var t1, t2, end, delta, t3, distance, buildingDistance, truncated, times, i, newX, newY, position, allowedDistance, allowedDistance0, j, t4, t5, positionScrolled, drawPosition, t6, t7, positionScrolledCenter, t8, t9, t10, center, drawCenter, allowedDistance1, lineToTarget, k;
    this.ghosts = $.List_List($);
    t1 = $.engine.mouse;
    t2 = t1.dragStart;
    if (t2 != null) {
      end = t1.dragEnd;
      delta = new $.Vector($.$sub$n(end.x, t2.x), $.$sub$n(end.y, t2.y));
      t1 = $.$sub$n(t2.x, end.x);
      if (typeof t1 !== "number")
        $.throwExpression(new $.ArgumentError(t1));
      t1 = Math.pow(t1, 2);
      t3 = $.$sub$n(t2.y, end.y);
      if (typeof t3 !== "number")
        $.throwExpression(new $.ArgumentError(t3));
      t1 += Math.pow(t3, 2);
      distance = Math.sqrt(t1);
      t1 = this.symbols;
      t3 = this.activeSymbol;
      if (t3 >>> 0 !== t3 || t3 >= t1.length)
        throw $.ioore(t3);
      if ($.$eq(t1[t3].get$imageID(), "collector"))
        buildingDistance = 9;
      else {
        t1 = this.symbols;
        t3 = this.activeSymbol;
        if (t3 >>> 0 !== t3 || t3 >= t1.length)
          throw $.ioore(t3);
        buildingDistance = $.$eq(t1[t3].get$imageID(), "relay") ? 18 : 3;
      }
      t1 = Math.floor(distance / buildingDistance);
      if (isNaN(t1))
        $.throwExpression(new $.UnsupportedError("NaN"));
      if (t1 == Infinity || t1 == -Infinity)
        $.throwExpression(new $.UnsupportedError("Infinity"));
      truncated = t1 < 0 ? Math.ceil(t1) : Math.floor(t1);
      times = (truncated == -0.0 ? 0 : truncated) + 1;
      this.ghosts.push(t2);
      for (i = 1; i < times; ++i) {
        newX = $.floor$0$nx($.$add$ns(t2.x, $.$div$n(delta.x, distance) * i * buildingDistance));
        newY = $.floor$0$nx($.$add$ns(t2.y, $.$div$n(delta.y, distance) * i * buildingDistance));
        if (this.withinWorld$2(newX, newY))
          this.ghosts.push(new $.Vector(newX, newY));
      }
      if (this.withinWorld$2(end.x, end.y))
        this.ghosts.push(end);
    } else if (t1.active) {
      position = this.getHoveredTilePosition$0();
      if (this.withinWorld$2(position.x, position.y))
        this.ghosts.push(position);
    }
    for (t1 = this.tileSize, allowedDistance = 20 * t1, t2 = t1 / 2, t3 = t2 * 3, allowedDistance0 = 10 * t1, j = 0; t4 = this.ghosts, j < t4.length; ++j) {
      t4 = t4[j];
      t5 = $.getInterceptor$x(t4);
      positionScrolled = new $.Vector(t5.get$x(t4), t5.get$y(t4));
      drawPosition = $.Helper_tiled2screen(positionScrolled);
      t4 = $.$mul$n(positionScrolled.x, t1);
      t5 = this.symbols;
      t6 = this.activeSymbol;
      if (t6 >>> 0 !== t6 || t6 >= t5.length)
        throw $.ioore(t6);
      t6 = $.get$size$x(t5[t6]);
      if (typeof t6 !== "number")
        throw $.iae(t6);
      t6 = $.$add$ns(t4, t2 * t6);
      t4 = $.$mul$n(positionScrolled.y, t1);
      t5 = this.symbols;
      t7 = this.activeSymbol;
      if (t7 >>> 0 !== t7 || t7 >= t5.length)
        throw $.ioore(t7);
      t7 = $.get$size$x(t5[t7]);
      if (typeof t7 !== "number")
        throw $.iae(t7);
      positionScrolledCenter = new $.Vector(t6, $.$add$ns(t4, t2 * t7));
      t7 = this.symbols;
      t4 = this.activeSymbol;
      if (t4 >>> 0 !== t4 || t4 >= t7.length)
        throw $.ioore(t4);
      t6 = t7[t4].get$imageID();
      t4 = t7[t4];
      this.drawRangeBoxes$4(positionScrolled, t6, t4.get$radius(), $.get$size$x(t4));
      if (this.withinWorld$2(positionScrolled.x, positionScrolled.y)) {
        t4 = $.engine.canvas;
        $.save$0$x(t4.$index(t4, "buffer").get$context());
        t4 = $.engine.canvas;
        $.set$globalAlpha$x(t4.$index(t4, "buffer").get$context(), 0.5);
        t4 = $.engine.canvas;
        t4 = t4.$index(t4, "buffer").get$context();
        t5 = $.engine.images;
        t6 = this.symbols;
        t7 = this.activeSymbol;
        if (t7 >>> 0 !== t7 || t7 >= t6.length)
          throw $.ioore(t7);
        t7 = t5.$index(t5, t6[t7].get$imageID());
        t6 = drawPosition.x;
        t5 = drawPosition.y;
        t8 = this.symbols;
        t9 = this.activeSymbol;
        if (t9 >>> 0 !== t9 || t9 >= t8.length)
          throw $.ioore(t9);
        t9 = $.$mul$n($.$mul$n($.get$size$x(t8[t9]), t1), this.zoom);
        t8 = this.symbols;
        t10 = this.activeSymbol;
        if (t10 >>> 0 !== t10 || t10 >= t8.length)
          throw $.ioore(t10);
        $.drawImageScaled$5$x(t4, t7, t6, t5, t9, $.$mul$n($.$mul$n($.get$size$x(t8[t10]), t1), this.zoom));
        t4 = this.symbols;
        t5 = this.activeSymbol;
        if (t5 >>> 0 !== t5 || t5 >= t4.length)
          throw $.ioore(t5);
        if ($.$eq(t4[t5].get$imageID(), "cannon")) {
          t4 = $.engine.canvas;
          t4 = t4.$index(t4, "buffer").get$context();
          t5 = $.engine.images;
          t5 = t5.$index(t5, "cannongun");
          t6 = drawPosition.x;
          t7 = drawPosition.y;
          t8 = this.zoom;
          if (typeof t8 !== "number")
            throw $.iae(t8);
          $.drawImageScaled$5$x(t4, t5, t6, t7, 48 * t8, 48 * t8);
        }
        t4 = this.symbols;
        t5 = this.activeSymbol;
        if (t5 >>> 0 !== t5 || t5 >= t4.length)
          throw $.ioore(t5);
        t5 = this.canBePlaced$3(positionScrolled, $.get$size$x(t4[t5]), null);
        t4 = $.engine;
        if (t5) {
          t4 = t4.canvas;
          $.set$strokeStyle$x(t4.$index(t4, "buffer").get$context(), "#0f0");
        } else {
          t4 = t4.canvas;
          $.set$strokeStyle$x(t4.$index(t4, "buffer").get$context(), "#f00");
        }
        t4 = $.engine.canvas;
        t4 = t4.$index(t4, "buffer").get$context();
        t5 = this.zoom;
        if (typeof t5 !== "number")
          throw $.iae(t5);
        $.set$lineWidth$x(t4, 4 * t5);
        t5 = $.engine.canvas;
        t5 = t5.$index(t5, "buffer").get$context();
        t4 = drawPosition.x;
        t6 = drawPosition.y;
        t7 = this.symbols;
        t8 = this.activeSymbol;
        if (t8 >>> 0 !== t8 || t8 >= t7.length)
          throw $.ioore(t8);
        t8 = $.get$size$x(t7[t8]);
        if (typeof t8 !== "number")
          throw $.iae(t8);
        t7 = this.zoom;
        if (typeof t7 !== "number")
          throw $.iae(t7);
        t9 = this.symbols;
        t10 = this.activeSymbol;
        if (t10 >>> 0 !== t10 || t10 >= t9.length)
          throw $.ioore(t10);
        t10 = $.get$size$x(t9[t10]);
        if (typeof t10 !== "number")
          throw $.iae(t10);
        t9 = this.zoom;
        if (typeof t9 !== "number")
          throw $.iae(t9);
        $.strokeRect$4$x(t5, t4, t6, t1 * t8 * t7, t1 * t10 * t9);
        t9 = $.engine.canvas;
        $.restore$0$x(t9.$index(t9, "buffer").get$context());
        for (i = 0; t4 = this.buildings, i < t4.length; ++i) {
          center = t4[i].getCenter$0();
          drawCenter = $.Helper_real2screen(center);
          t4 = this.buildings;
          if (i >= t4.length)
            throw $.ioore(i);
          if ($.$eq(t4[i].get$imageID(), "relay")) {
            t4 = this.symbols;
            t5 = this.activeSymbol;
            if (t5 >>> 0 !== t5 || t5 >= t4.length)
              throw $.ioore(t5);
            t5 = $.$eq(t4[t5].get$imageID(), "relay");
            t4 = t5;
          } else
            t4 = false;
          allowedDistance1 = t4 ? allowedDistance : allowedDistance0;
          t4 = $.$sub$n(center.x, positionScrolledCenter.x);
          if (typeof t4 !== "number")
            $.throwExpression(new $.ArgumentError(t4));
          t4 = Math.pow(t4, 2);
          t5 = $.$sub$n(center.y, positionScrolledCenter.y);
          if (typeof t5 !== "number")
            $.throwExpression(new $.ArgumentError(t5));
          t5 = Math.pow(t5, 2);
          if (t4 + t5 <= Math.pow(allowedDistance1, 2)) {
            lineToTarget = $.Helper_real2screen(positionScrolledCenter);
            t4 = $.engine.canvas;
            $.set$strokeStyle$x(t4.$index(t4, "buffer").get$context(), "#000");
            t4 = $.engine.canvas;
            $.set$lineWidth$x(t4.$index(t4, "buffer").get$context(), 2);
            t4 = $.engine.canvas;
            $.beginPath$0$x(t4.$index(t4, "buffer").get$context());
            t4 = $.engine.canvas;
            $.moveTo$2$x(t4.$index(t4, "buffer").get$context(), drawCenter.x, drawCenter.y);
            t4 = $.engine.canvas;
            $.lineTo$2$x(t4.$index(t4, "buffer").get$context(), lineToTarget.x, lineToTarget.y);
            t4 = $.engine.canvas;
            $.stroke$0$x(t4.$index(t4, "buffer").get$context());
            t4 = $.engine.canvas;
            $.set$strokeStyle$x(t4.$index(t4, "buffer").get$context(), "#fff");
            t4 = $.engine.canvas;
            $.set$lineWidth$x(t4.$index(t4, "buffer").get$context(), 1);
            t4 = $.engine.canvas;
            $.beginPath$0$x(t4.$index(t4, "buffer").get$context());
            t4 = $.engine.canvas;
            $.moveTo$2$x(t4.$index(t4, "buffer").get$context(), drawCenter.x, drawCenter.y);
            t4 = $.engine.canvas;
            $.lineTo$2$x(t4.$index(t4, "buffer").get$context(), lineToTarget.x, lineToTarget.y);
            t4 = $.engine.canvas;
            $.stroke$0$x(t4.$index(t4, "buffer").get$context());
          }
        }
        for (k = 0; t4 = this.ghosts, k < t4.length; ++k)
          if (k !== j) {
            t4 = $.$add$ns($.$mul$n($.get$x$x(t4[k]), t1), t3);
            t5 = this.ghosts;
            if (k >= t5.length)
              throw $.ioore(k);
            center = new $.Vector(t4, $.$add$ns($.$mul$n($.get$y$x(t5[k]), t1), t3));
            drawCenter = $.Helper_real2screen(center);
            t4 = this.symbols;
            t5 = this.activeSymbol;
            if (t5 >>> 0 !== t5 || t5 >= t4.length)
              throw $.ioore(t5);
            allowedDistance1 = $.$eq(t4[t5].get$imageID(), "relay") ? allowedDistance : allowedDistance0;
            t4 = $.$sub$n(center.x, positionScrolledCenter.x);
            if (typeof t4 !== "number")
              $.throwExpression(new $.ArgumentError(t4));
            t4 = Math.pow(t4, 2);
            t5 = $.$sub$n(center.y, positionScrolledCenter.y);
            if (typeof t5 !== "number")
              $.throwExpression(new $.ArgumentError(t5));
            t5 = Math.pow(t5, 2);
            if (t4 + t5 <= Math.pow(allowedDistance1, 2)) {
              lineToTarget = $.Helper_real2screen(positionScrolledCenter);
              t4 = $.engine.canvas;
              $.set$strokeStyle$x(t4.$index(t4, "buffer").get$context(), "#000");
              t4 = $.engine.canvas;
              $.set$lineWidth$x(t4.$index(t4, "buffer").get$context(), 2);
              t4 = $.engine.canvas;
              $.beginPath$0$x(t4.$index(t4, "buffer").get$context());
              t4 = $.engine.canvas;
              $.moveTo$2$x(t4.$index(t4, "buffer").get$context(), drawCenter.x, drawCenter.y);
              t4 = $.engine.canvas;
              $.lineTo$2$x(t4.$index(t4, "buffer").get$context(), lineToTarget.x, lineToTarget.y);
              t4 = $.engine.canvas;
              $.stroke$0$x(t4.$index(t4, "buffer").get$context());
              t4 = $.engine.canvas;
              $.set$strokeStyle$x(t4.$index(t4, "buffer").get$context(), "#fff");
              t4 = $.engine.canvas;
              $.set$lineWidth$x(t4.$index(t4, "buffer").get$context(), 1);
              t4 = $.engine.canvas;
              $.beginPath$0$x(t4.$index(t4, "buffer").get$context());
              t4 = $.engine.canvas;
              $.moveTo$2$x(t4.$index(t4, "buffer").get$context(), drawCenter.x, drawCenter.y);
              t4 = $.engine.canvas;
              $.lineTo$2$x(t4.$index(t4, "buffer").get$context(), lineToTarget.x, lineToTarget.y);
              t4 = $.engine.canvas;
              $.stroke$0$x(t4.$index(t4, "buffer").get$context());
            }
          }
      }
    }
  },
  drawAttackSymbol$0: function() {
    var position, t1, t2, t3, t4, t5, t6;
    if (this.mode === "SHIP_SELECTED") {
      position = $.Helper_tiled2screen(this.getHoveredTilePosition$0());
      t1 = $.engine.canvas;
      t1 = t1.$index(t1, "buffer").get$context();
      t2 = $.engine.images;
      t2 = t2.$index(t2, "targetcursor");
      t3 = position.x;
      t4 = this.tileSize;
      t5 = this.zoom;
      if (typeof t5 !== "number")
        throw $.iae(t5);
      t5 = $.$sub$n(t3, t4 * t5);
      t3 = position.y;
      t6 = this.zoom;
      if (typeof t6 !== "number")
        throw $.iae(t6);
      t6 = $.$sub$n(t3, t4 * t6);
      t4 = this.zoom;
      if (typeof t4 !== "number")
        throw $.iae(t4);
      $.drawImageScaled$5$x(t1, t2, t5, t6, 48 * t4, 48 * t4);
    }
  },
  drawGUI$0: function() {
    var t1, context, position, i, t2, t3, total;
    t1 = $.engine.canvas;
    context = t1.$index(t1, "gui").get$context();
    position = this.getHoveredTilePosition$0();
    t1 = $.engine.canvas;
    $.clear$0$ax(t1.$index(t1, "gui"));
    for (i = 0; t1 = this.symbols, i < t1.length; ++i)
      t1[i].draw$0();
    t1 = position.x;
    t2 = position.y;
    if (this.withinWorld$2(t1, t2)) {
      t3 = this.world.tiles;
      if (t1 >>> 0 !== t1 || t1 >= t3.length)
        throw $.ioore(t1);
      total = $.$index$asx($.$index$asx(t3[t1], t2), 0).get$creep();
      t2 = $.getInterceptor$x(context);
      t2.set$fillStyle(context, "#fff");
      t2.set$font(context, "9px");
      t2.set$textAlign(context, "right");
      t2.set$strokeStyle(context, "#fff");
      t2.set$lineWidth(context, 1);
      t2.set$fillStyle(context, "rgba(205, 133, 63, 1)");
      t2.fillRect$4(context, 555, 110, 25, -this.getHighestTerrain$1(this.getHoveredTilePosition$0()) * 10 - 10);
      t2.set$fillStyle(context, "rgba(100, 150, 255, 1)");
      t1 = $.getInterceptor$n(total);
      t2.fillRect$4(context, 555, 110 - this.getHighestTerrain$1(this.getHoveredTilePosition$0()) * 10 - 10, 25, t1.$negate(total) * 10);
      t2.set$fillStyle(context, "rgba(255, 255, 255, 1)");
      for (i = 1; i < 11; ++i) {
        t3 = 120 - i * 10;
        t2.fillText$3(context, $.JSNumber_methods.toString$0(i), 550, t3);
        t2.beginPath$0(context);
        t2.moveTo$2(context, 555, t3);
        t2.lineTo$2(context, 580, t3);
        t2.stroke$0(context);
      }
      t2.set$textAlign(context, "left");
      t2.fillText$3(context, t1.toStringAsFixed$1(total, 2), 605, 10);
    }
  },
  draw$1: function(_) {
    var t1, context, t2, t3, truncated, timesX, timesY, i, j, t4, j0, t5, iS, jS, t6, t7, t8, t9, t10, allowedDistance, allowedDistance0, centerI, drawCenterI, centerJ, drawCenterJ, allowedDistance1, drawPosition;
    t1 = $.engine.canvas;
    context = t1.$index(t1, "buffer").get$context();
    this.drawGUI$0();
    t1 = $.engine.canvas;
    $.clear$0$ax(t1.$index(t1, "buffer"));
    t1 = $.engine.canvas;
    $.clear$0$ax(t1.$index(t1, "main"));
    t1 = this.tileSize;
    t2 = $.$div$n($.engine.halfWidth, t1);
    t3 = this.zoom;
    if (typeof t3 !== "number")
      throw $.iae(t3);
    t3 = Math.floor(t2 / t3);
    if (isNaN(t3))
      $.throwExpression(new $.UnsupportedError("NaN"));
    if (t3 == Infinity || t3 == -Infinity)
      $.throwExpression(new $.UnsupportedError("Infinity"));
    truncated = t3 < 0 ? Math.ceil(t3) : Math.floor(t3);
    timesX = truncated == -0.0 ? 0 : truncated;
    t2 = $.$div$n($.engine.halfHeight, t1);
    t3 = this.zoom;
    if (typeof t3 !== "number")
      throw $.iae(t3);
    t3 = Math.floor(t2 / t3);
    if (isNaN(t3))
      $.throwExpression(new $.UnsupportedError("NaN"));
    if (t3 == Infinity || t3 == -Infinity)
      $.throwExpression(new $.UnsupportedError("Infinity"));
    truncated = t3 < 0 ? Math.ceil(t3) : Math.floor(t3);
    timesY = truncated == -0.0 ? 0 : truncated;
    for (i = -timesX, j = -timesY, t2 = $.getInterceptor$x(context), t3 = this.scroll; i <= timesX; ++i)
      for (t4 = i * t1, j0 = j; j0 <= timesY; ++j0) {
        t5 = t3.x;
        if (typeof t5 !== "number")
          throw $.iae(t5);
        iS = i + t5;
        t5 = t3.y;
        if (typeof t5 !== "number")
          throw $.iae(t5);
        jS = j0 + t5;
        if (this.withinWorld$2(iS, jS)) {
          t5 = this.world.terraform;
          if (iS >>> 0 !== iS || iS >= t5.length)
            throw $.ioore(iS);
          if ($.$gt$n($.$index$asx($.$index$asx(t5[iS], jS), "target"), -1)) {
            t5 = $.engine.images;
            t5 = t5.$index(t5, "numbers");
            t6 = this.world.terraform;
            if (iS >= t6.length)
              throw $.ioore(iS);
            t6 = $.$mul$n($.$index$asx($.$index$asx(t6[iS], jS), "target"), 16);
            t7 = $.engine;
            t8 = t7.halfWidth;
            t9 = this.zoom;
            if (typeof t9 !== "number")
              throw $.iae(t9);
            t10 = t1 * t9;
            t2.drawImageScaledFromSource$9(context, t5, t6, 0, t1, t1, $.$add$ns(t8, t4 * t9), $.$add$ns(t7.halfHeight, j0 * t1 * t9), t10, t10);
          }
        }
      }
    for (i = 0; t3 = this.emitters, i < t3.length; ++i)
      t3[i].draw$0();
    for (i = 0; t3 = this.sporetowers, i < t3.length; ++i)
      t3[i].draw$0();
    for (allowedDistance = 20 * t1, allowedDistance0 = 10 * t1, i = 0; t3 = this.buildings, i < t3.length; ++i) {
      centerI = t3[i].getCenter$0();
      drawCenterI = $.Helper_real2screen(centerI);
      for (j = 0; t3 = this.buildings, t4 = t3.length, j < t4; ++j)
        if (i !== j) {
          if (i >= t4)
            throw $.ioore(i);
          if ($.get$status$x(t3[i]) === "IDLE" && $.get$status$x(t3[j]) === "IDLE") {
            centerJ = t3[j].getCenter$0();
            drawCenterJ = $.Helper_real2screen(centerJ);
            t3 = this.buildings;
            if (i >= t3.length)
              throw $.ioore(i);
            if ($.$eq(t3[i].get$imageID(), "relay")) {
              t3 = this.buildings;
              if (j >= t3.length)
                throw $.ioore(j);
              t3 = $.$eq(t3[j].get$imageID(), "relay");
            } else
              t3 = false;
            allowedDistance1 = t3 ? allowedDistance : allowedDistance0;
            t3 = $.$sub$n(centerJ.x, centerI.x);
            if (typeof t3 !== "number")
              $.throwExpression(new $.ArgumentError(t3));
            t3 = Math.pow(t3, 2);
            t4 = $.$sub$n(centerJ.y, centerI.y);
            if (typeof t4 !== "number")
              $.throwExpression(new $.ArgumentError(t4));
            t4 = Math.pow(t4, 2);
            if (t3 + t4 <= Math.pow(allowedDistance1, 2)) {
              t2.set$strokeStyle(context, "#000");
              t2.set$lineWidth(context, 3);
              t2.beginPath$0(context);
              t2.moveTo$2(context, drawCenterI.x, drawCenterI.y);
              t2.lineTo$2(context, drawCenterJ.x, drawCenterJ.y);
              t2.stroke$0(context);
              t2.set$strokeStyle(context, "#fff");
              t3 = this.buildings;
              t4 = t3.length;
              if (i >= t4)
                throw $.ioore(i);
              if (t3[i].get$built()) {
                if (j >= t4)
                  throw $.ioore(j);
                t3 = !t3[j].get$built();
              } else
                t3 = true;
              if (t3)
                t2.set$strokeStyle(context, "#777");
              t2.set$lineWidth(context, 2);
              t2.beginPath$0(context);
              t2.moveTo$2(context, drawCenterI.x, drawCenterI.y);
              t2.lineTo$2(context, drawCenterJ.x, drawCenterJ.y);
              t2.stroke$0(context);
            }
          }
        }
    }
    for (i = 0; t3 = this.buildings, i < t3.length; ++i)
      t3[i].drawMovementIndicators$0();
    for (i = 0; t3 = this.buildings, i < t3.length; ++i)
      t3[i].draw$0();
    for (i = 0; t3 = this.shells, i < t3.length; ++i)
      t3[i].draw$0();
    for (i = 0; t3 = this.smokes, i < t3.length; ++i)
      t3[i].draw$0();
    for (i = 0; t3 = this.explosions, i < t3.length; ++i)
      t3[i].draw$0();
    for (i = 0; t3 = this.spores, i < t3.length; ++i)
      t3[i].draw$0();
    if ($.engine.mouse.active) {
      for (i = 0; t3 = this.buildings, i < t3.length; ++i)
        t3[i].drawRepositionInfo$0();
      this.drawAttackSymbol$0();
      if (this.activeSymbol !== -1)
        this.drawPositionInfo$0();
      if (this.mode === "TERRAFORM") {
        drawPosition = $.Helper_tiled2screen(this.getHoveredTilePosition$0());
        t3 = $.engine.images;
        t3 = t3.$index(t3, "numbers");
        t4 = this.terraformingHeight;
        t5 = drawPosition.x;
        t6 = drawPosition.y;
        t7 = this.zoom;
        if (typeof t7 !== "number")
          throw $.iae(t7);
        t2.drawImageScaledFromSource$9(context, t3, t4 * t1, 0, t1, t1, t5, t6, t1 * t7, t1 * t7);
        t2.set$strokeStyle(context, "#fff");
        t2.set$lineWidth(context, 1);
        t2.beginPath$0(context);
        t2.moveTo$2(context, 0, drawPosition.y);
        t2.lineTo$2(context, $.engine.width, drawPosition.y);
        t2.stroke$0(context);
        t2.beginPath$0(context);
        t7 = drawPosition.y;
        t6 = this.zoom;
        if (typeof t6 !== "number")
          throw $.iae(t6);
        t2.moveTo$2(context, 0, $.$add$ns(t7, t1 * t6));
        t6 = $.engine.width;
        t7 = drawPosition.y;
        t5 = this.zoom;
        if (typeof t5 !== "number")
          throw $.iae(t5);
        t2.lineTo$2(context, t6, $.$add$ns(t7, t1 * t5));
        t2.stroke$0(context);
        t2.beginPath$0(context);
        t2.moveTo$2(context, drawPosition.x, 0);
        t2.lineTo$2(context, drawPosition.x, $.$mul$n($.engine.halfHeight, 2));
        t2.stroke$0(context);
        t2.beginPath$0(context);
        t5 = drawPosition.x;
        t7 = this.zoom;
        if (typeof t7 !== "number")
          throw $.iae(t7);
        t2.moveTo$2(context, $.$add$ns(t5, t1 * t7), 0);
        t7 = drawPosition.x;
        t5 = this.zoom;
        if (typeof t5 !== "number")
          throw $.iae(t5);
        t2.lineTo$2(context, $.$add$ns(t7, t1 * t5), $.$mul$n($.engine.halfHeight, 2));
        t2.stroke$0(context);
        t2.stroke$0(context);
      }
    }
    for (i = 0; t1 = this.packets, i < t1.length; ++i)
      t1[i].draw$0();
    for (i = 0; t1 = this.ships, i < t1.length; ++i)
      t1[i].draw$0();
    for (i = 0; t1 = this.buildings, i < t1.length; ++i)
      t1[i].drawBox$0();
    t1 = $.engine.canvas;
    t1 = t1.$index(t1, "main").get$context();
    t2 = $.engine.canvas;
    $.drawImage$3$x(t1, t2.$index(t2, "buffer").get$element(), 0, 0);
    t2 = window;
    t1 = this.get$draw();
    $.Window_methods._ensureRequestAnimationFrame$0(t2);
    $.Window_methods._requestAnimationFrame$1(t2, t1);
  },
  get$draw: function() {
    return new $.BoundClosure$1(this, "draw$1");
  },
  Game$0: function() {
    var max, t1, t2;
    max = 10001;
    this.seed = (Math.random() * max >>> 0) + 0;
    t1 = new $.World(null, null, null);
    max = 64;
    t2 = Math.random() * max >>> 0;
    max = 64;
    t1.size = new $.Vector(t2 + 64, (Math.random() * max >>> 0) + 64);
    this.world = t1;
    this.init$0();
    this.drawTerrain$0();
    this.copyTerrain$0();
  }
},

Game_init_closure: {"": "Closure;music_0",
  call$1: function($event) {
    return this.music_0.play();
  }
},

Game_run_closure: {"": "Closure;this_0",
  call$1: function(timer) {
    $.game.update$0();
    return;
  }
},

Game_findRoute_closure: {"": "Closure;",
  call$2: function(a, b) {
    return a.get$distanceTravelled() + a.get$distanceRemaining() - (b.get$distanceTravelled() + b.get$distanceRemaining());
  }
},

HeightMap: {"": "Object;seed>,size>,low_value,high_value,mid_value,centre_cell,queue,map",
  reset$0: function(_) {
    var t1, i, t2, t3, max, max0, t4, t5, t6;
    t1 = this.queue;
    $.JSArray_methods.set$length(t1, 0);
    this.map = $.List_List(this.size);
    for (i = 0; t2 = this.size, i < t2; ++i) {
      t3 = this.map;
      t2 = $.List_List(t2);
      if (i >= t3.length)
        throw $.ioore(i);
      t3[i] = t2;
    }
    max = this.high_value;
    t2 = max < 0;
    if (t2)
      $.throwExpression(new $.ArgumentError("negative max: " + max));
    t3 = max > 4294967295;
    max0 = t3 ? 4294967295 : max;
    t4 = Math.random() * max0 >>> 0;
    t5 = this.map;
    if (0 >= t5.length)
      throw $.ioore(0);
    $.$indexSet$ax(t5[0], 0, t4);
    if (t2)
      $.throwExpression(new $.ArgumentError("negative max: " + max));
    max0 = t3 ? 4294967295 : max;
    t4 = Math.random() * max0 >>> 0;
    t5 = this.size - 1;
    t6 = this.map;
    if (t5 < 0 || t5 >= t6.length)
      throw $.ioore(t5);
    $.$indexSet$ax(t6[t5], 0, t4);
    if (t2)
      $.throwExpression(new $.ArgumentError("negative max: " + max));
    max0 = t3 ? 4294967295 : max;
    t4 = Math.random() * max0 >>> 0;
    t5 = this.size;
    t6 = this.map;
    if (0 >= t6.length)
      throw $.ioore(0);
    $.$indexSet$ax(t6[0], t5 - 1, t4);
    if (t2)
      $.throwExpression(new $.ArgumentError("negative max: " + max));
    if (t3)
      max = 4294967295;
    t2 = Math.random() * max >>> 0;
    t3 = this.size - 1;
    t4 = this.map;
    if (t3 < 0 || t3 >= t4.length)
      throw $.ioore(t3);
    $.$indexSet$ax(t4[t3], t3, t2);
    t1.push(new $.HeightMap_reset_closure(this, this));
    return t1;
  },
  soft_set_cell$3: function(x, y, v) {
    var t1 = this.map;
    if (y >>> 0 !== y || y >= t1.length)
      throw $.ioore(y);
    if ($.$index$asx(t1[y], x) == null) {
      t1 = this.map;
      if (y >= t1.length)
        throw $.ioore(y);
      $.$indexSet$ax(t1[y], x, v);
    }
    t1 = this.map;
    if (y >= t1.length)
      throw $.ioore(y);
    return $.$index$asx(t1[y], x);
  },
  remaining$0: function() {
    if (this.queue.length > 0)
      return true;
    else
      return false;
  },
  run$0: function() {
    for (var t1 = this.queue; this.remaining$0();)
      $.JSArray_methods.removeAt$1(t1, 0).call$0();
    return;
  },
  diamond_square$6: function(left, $top, right, bottom, base_height, seed) {
    var t1, t2, truncated, t3, t4, centre_point_value, t5;
    t1 = {};
    t1.base_height_0 = base_height;
    t1.x_centre_1 = null;
    t1.y_centre_2 = null;
    t2 = Math.floor($.$div$n($.$add$ns(left, right), 2));
    if (isNaN(t2))
      $.throwExpression(new $.UnsupportedError("NaN"));
    if (t2 == Infinity || t2 == -Infinity)
      $.throwExpression(new $.UnsupportedError("Infinity"));
    truncated = t2 < 0 ? Math.ceil(t2) : Math.floor(t2);
    t1.x_centre_1 = truncated == -0.0 ? 0 : truncated;
    t2 = Math.floor($.$div$n($.$add$ns($top, bottom), 2));
    if (isNaN(t2))
      $.throwExpression(new $.UnsupportedError("NaN"));
    if (t2 == Infinity || t2 == -Infinity)
      $.throwExpression(new $.UnsupportedError("Infinity"));
    truncated = t2 < 0 ? Math.ceil(t2) : Math.floor(t2);
    t1.y_centre_2 = truncated == -0.0 ? 0 : truncated;
    t2 = this.map;
    if ($top >>> 0 !== $top || $top >= t2.length)
      throw $.ioore($top);
    t2 = $.$index$asx(t2[$top], left);
    t3 = this.map;
    if ($top >= t3.length)
      throw $.ioore($top);
    t3 = $.$add$ns(t2, $.$index$asx(t3[$top], right));
    t2 = this.map;
    if (bottom >>> 0 !== bottom || bottom >= t2.length)
      throw $.ioore(bottom);
    t2 = $.$add$ns(t3, $.$index$asx(t2[bottom], left));
    t3 = this.map;
    if (bottom >= t3.length)
      throw $.ioore(bottom);
    t3 = $.$div$n($.$add$ns(t2, $.$index$asx(t3[bottom], right)), 4);
    t2 = Math.random();
    t4 = t1.base_height_0;
    if (typeof t4 !== "number")
      throw $.iae(t4);
    t4 = Math.floor((t2 - 0.5) * t4 * 2);
    if (isNaN(t4))
      $.throwExpression(new $.UnsupportedError("NaN"));
    if (t4 == Infinity || t4 == -Infinity)
      $.throwExpression(new $.UnsupportedError("Infinity"));
    truncated = t4 < 0 ? Math.ceil(t4) : Math.floor(t4);
    t2 = Math.floor(t3 - (truncated == -0.0 ? 0 : truncated));
    if (isNaN(t2))
      $.throwExpression(new $.UnsupportedError("NaN"));
    if (t2 == Infinity || t2 == -Infinity)
      $.throwExpression(new $.UnsupportedError("Infinity"));
    truncated = t2 < 0 ? Math.ceil(t2) : Math.floor(t2);
    centre_point_value = truncated == -0.0 ? 0 : truncated;
    this.soft_set_cell$3(t1.x_centre_1, t1.y_centre_2, centre_point_value);
    t2 = t1.x_centre_1;
    t3 = this.map;
    if ($top >= t3.length)
      throw $.ioore($top);
    t3 = $.$index$asx(t3[$top], left);
    t4 = this.map;
    if ($top >= t4.length)
      throw $.ioore($top);
    t4 = $.$div$n($.$add$ns(t3, $.$index$asx(t4[$top], right)), 2);
    t3 = Math.random();
    t5 = t1.base_height_0;
    if (typeof t5 !== "number")
      throw $.iae(t5);
    t5 = Math.floor(t4 + (t3 - 0.5) * t5);
    if (isNaN(t5))
      $.throwExpression(new $.UnsupportedError("NaN"));
    if (t5 == Infinity || t5 == -Infinity)
      $.throwExpression(new $.UnsupportedError("Infinity"));
    truncated = t5 < 0 ? Math.ceil(t5) : Math.floor(t5);
    this.soft_set_cell$3(t2, $top, truncated == -0.0 ? 0 : truncated);
    t2 = t1.x_centre_1;
    t3 = this.map;
    if (bottom >= t3.length)
      throw $.ioore(bottom);
    t3 = $.$index$asx(t3[bottom], left);
    t4 = this.map;
    if (bottom >= t4.length)
      throw $.ioore(bottom);
    t4 = $.$div$n($.$add$ns(t3, $.$index$asx(t4[bottom], right)), 2);
    t3 = Math.random();
    t5 = t1.base_height_0;
    if (typeof t5 !== "number")
      throw $.iae(t5);
    t5 = Math.floor(t4 + (t3 - 0.5) * t5);
    if (isNaN(t5))
      $.throwExpression(new $.UnsupportedError("NaN"));
    if (t5 == Infinity || t5 == -Infinity)
      $.throwExpression(new $.UnsupportedError("Infinity"));
    truncated = t5 < 0 ? Math.ceil(t5) : Math.floor(t5);
    this.soft_set_cell$3(t2, bottom, truncated == -0.0 ? 0 : truncated);
    t2 = t1.y_centre_2;
    t3 = this.map;
    if ($top >= t3.length)
      throw $.ioore($top);
    t3 = $.$index$asx(t3[$top], left);
    t4 = this.map;
    if (bottom >= t4.length)
      throw $.ioore(bottom);
    t4 = $.$div$n($.$add$ns(t3, $.$index$asx(t4[bottom], left)), 2);
    t3 = Math.random();
    t5 = t1.base_height_0;
    if (typeof t5 !== "number")
      throw $.iae(t5);
    t5 = Math.floor(t4 + (t3 - 0.5) * t5);
    if (isNaN(t5))
      $.throwExpression(new $.UnsupportedError("NaN"));
    if (t5 == Infinity || t5 == -Infinity)
      $.throwExpression(new $.UnsupportedError("Infinity"));
    truncated = t5 < 0 ? Math.ceil(t5) : Math.floor(t5);
    this.soft_set_cell$3(left, t2, truncated == -0.0 ? 0 : truncated);
    t2 = t1.y_centre_2;
    t3 = this.map;
    if ($top >= t3.length)
      throw $.ioore($top);
    t3 = $.$index$asx(t3[$top], right);
    t4 = this.map;
    if (bottom >= t4.length)
      throw $.ioore(bottom);
    t4 = $.$div$n($.$add$ns(t3, $.$index$asx(t4[bottom], right)), 2);
    t3 = Math.random();
    t5 = t1.base_height_0;
    if (typeof t5 !== "number")
      throw $.iae(t5);
    t5 = Math.floor(t4 + (t3 - 0.5) * t5);
    if (isNaN(t5))
      $.throwExpression(new $.UnsupportedError("NaN"));
    if (t5 == Infinity || t5 == -Infinity)
      $.throwExpression(new $.UnsupportedError("Infinity"));
    truncated = t5 < 0 ? Math.ceil(t5) : Math.floor(t5);
    this.soft_set_cell$3(right, t2, truncated == -0.0 ? 0 : truncated);
    if ($.$gt$n($.$sub$n(right, left), 2)) {
      t2 = t1.base_height_0;
      t1.base_height_0 = $.floor$0$nx($.$mul$n(t2, Math.pow(2, -0.75)));
      t2 = this.queue;
      t2.push(new $.HeightMap_diamond_square_closure(t1, left, $top, $.C__Random, this));
      t2.push(new $.HeightMap_diamond_square_closure0(t1, $top, right, $.C__Random, this));
      t2.push(new $.HeightMap_diamond_square_closure1(t1, left, bottom, $.C__Random, this));
      t2.push(new $.HeightMap_diamond_square_closure2(t1, right, bottom, $.C__Random, this));
      return t2;
    }
  },
  HeightMap$4: function(seed, size, low_value, high_value) {
    var t1, truncated;
    t1 = Math.floor((this.low_value + this.high_value) / 2);
    if (isNaN(t1))
      $.throwExpression(new $.UnsupportedError("NaN"));
    if (t1 == Infinity || t1 == -Infinity)
      $.throwExpression(new $.UnsupportedError("Infinity"));
    truncated = t1 < 0 ? Math.ceil(t1) : Math.floor(t1);
    this.mid_value = truncated == -0.0 ? 0 : truncated;
    t1 = Math.floor(this.size / 2);
    if (isNaN(t1))
      $.throwExpression(new $.UnsupportedError("NaN"));
    if (t1 == Infinity || t1 == -Infinity)
      $.throwExpression(new $.UnsupportedError("Infinity"));
    truncated = t1 < 0 ? Math.ceil(t1) : Math.floor(t1);
    this.centre_cell = truncated == -0.0 ? 0 : truncated;
    this.reset$0(this);
  }
},

HeightMap_reset_closure: {"": "Closure;this_0,_this_1",
  call$0: function() {
    var t1, t2;
    t1 = this._this_1;
    t2 = t1.size - 1;
    return t1.diamond_square$6(0, 0, t2, t2, t1.mid_value, $.get$seed$x(this.this_0));
  }
},

HeightMap_diamond_square_closure: {"": "Closure;box_0,left_1,top_2,random_3,_this_4",
  call$0: function() {
    var t1, t2, t3, max;
    t1 = this.box_0;
    t2 = t1.x_centre_1;
    t3 = t1.y_centre_2;
    t1 = t1.base_height_0;
    max = 10000;
    return this._this_4.diamond_square$6(this.left_1, this.top_2, t2, t3, t1, Math.random() * max >>> 0);
  }
},

HeightMap_diamond_square_closure0: {"": "Closure;box_0,top_5,right_6,random_7,_this_8",
  call$0: function() {
    var t1, t2, t3, max;
    t1 = this.box_0;
    t2 = t1.x_centre_1;
    t3 = t1.y_centre_2;
    t1 = t1.base_height_0;
    max = 10000;
    return this._this_8.diamond_square$6(t2, this.top_5, this.right_6, t3, t1, Math.random() * max >>> 0);
  }
},

HeightMap_diamond_square_closure1: {"": "Closure;box_0,left_9,bottom_10,random_11,_this_12",
  call$0: function() {
    var t1, t2, t3, max;
    t1 = this.box_0;
    t2 = t1.y_centre_2;
    t3 = t1.x_centre_1;
    t1 = t1.base_height_0;
    max = 10000;
    return this._this_12.diamond_square$6(this.left_9, t2, t3, this.bottom_10, t1, Math.random() * max >>> 0);
  }
},

HeightMap_diamond_square_closure2: {"": "Closure;box_0,right_13,bottom_14,random_15,_this_16",
  call$0: function() {
    var t1, t2, t3, max;
    t1 = this.box_0;
    t2 = t1.x_centre_1;
    t3 = t1.y_centre_2;
    t1 = t1.base_height_0;
    max = 10000;
    return this._this_16.diamond_square$6(t2, t3, this.right_13, this.bottom_14, t1, Math.random() * max >>> 0);
  }
},

main_closure: {"": "Closure;",
  call$0: function() {
    var t1, max, t2, t3;
    t1 = new $.Game(null, 16, 0, 0, 0, -1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0.5, 1, null, null, false, false, false, false, false, $.List_List($), $.List_List($), $.List_List($), $.List_List($), $.List_List($), $.List_List($), $.List_List($), $.List_List($), $.List_List($), $.List_List($), $.List_List($), $.List_List($), null, new $.Vector(0, 0), null, $.makeLiteralMap(["k81", "Q", "k87", "W", "k69", "E", "k82", "R", "k84", "T", "k90", "Z", "k85", "U", "k73", "I", "k65", "A", "k83", "S", "k68", "D", "k70", "F", "k71", "G", "k72", "H"]), new $.Stopwatch(null, null));
    max = 10001;
    t1.seed = (Math.random() * max >>> 0) + 0;
    t2 = t1.seed;
    t3 = new $.World(null, null, null);
    t3.size = $.Vector$($.Helper_randomInt(64, 127, t2), $.Helper_randomInt(64, 127, t2));
    t1.world = t3;
    t1.init$0();
    t1.drawTerrain$0();
    t1.copyTerrain$0();
    $.game = t1;
    $.game.run$0();
  }
},

Packet: {"": "Object;position>,speed,imageID<,type,remove*,speedMultiplier,target>,currentTarget>",
  remove$0: function($receiver) {
    return this.remove.call$0();
  },
  move$0: function() {
    var t1, t2, centerTarget, t3, ship;
    this.calculateVector$0();
    t1 = this.position;
    t2 = this.speed;
    this.position = new $.Vector($.$add$ns(t1.x, t2.x), $.$add$ns(t1.y, t2.y));
    centerTarget = this.currentTarget.getCenter$0();
    if ($.$gt$n(this.position.x, $.$sub$n(centerTarget.x, 1)) && $.$lt$n(this.position.x, $.$add$ns(centerTarget.x, 1)) && $.$gt$n(this.position.y, $.$sub$n(centerTarget.y, 1)) && $.$lt$n(this.position.y, $.$add$ns(centerTarget.y, 1))) {
      this.position.x = centerTarget.x;
      this.position.y = centerTarget.y;
      if ($.$eq(this.currentTarget, this.target)) {
        this.remove = true;
        t1 = this.type;
        if (t1 === "health") {
          t1 = this.target;
          t1.set$health(t1.get$health() + 1);
          t1 = this.target;
          t1.set$healthRequests(t1.get$healthRequests() - 1);
          t1 = this.target;
          t2 = t1.get$health();
          t3 = t1.get$maxHealth();
          if (t2 >= t3) {
            t1.set$health(t3);
            t1 = this.target;
            if (!t1.get$built()) {
              t1.set$built(true);
              if ($.$eq(this.target.get$imageID(), "collector")) {
                $.game.updateCollection$2(this.target, "add");
                $.engine.playSound$2("energy", $.get$position$x(this.target));
              }
              if ($.$eq(this.target.get$imageID(), "storage")) {
                t1 = $.game;
                t1.maxEnergy = t1.maxEnergy + 20;
              }
              if ($.$eq(this.target.get$imageID(), "speed")) {
                t1 = $.game;
                t1.packetSpeed = t1.packetSpeed * 1.01;
              }
              if ($.$eq(this.target.get$imageID(), "bomber")) {
                t1 = $.$mul$n($.get$x$x($.get$position$x(this.target)), $.game.tileSize);
                t2 = $.$mul$n($.get$y$x($.get$position$x(this.target)), $.game.tileSize);
                t3 = this.target;
                ship = new $.Ship(new $.Vector(t1, t2), new $.Vector(0, 0), new $.Vector(0, 0), "bombership", "Bomber", "IDLE", false, false, false, 0, 15, 0, 0, 0, 1, 0, t3);
                t3.set$ship(ship);
                $.game.ships.push(ship);
              }
            }
          }
        } else if (t1 === "energy") {
          t1 = this.target;
          t1.set$energy(t1.get$energy() + 4);
          t1 = this.target;
          t1.set$energyRequests(t1.get$energyRequests() - 4);
          t1 = this.target;
          t2 = t1.get$energy();
          t3 = t1.get$maxEnergy();
          if (t2 > t3)
            t1.set$energy(t3);
        } else if (t1 === "collection") {
          t1 = $.game;
          t1.currentEnergy = t1.currentEnergy + 1;
          t2 = t1.currentEnergy;
          t3 = t1.maxEnergy;
          if (t2 > t3)
            t1.currentEnergy = t3;
          t1.updateEnergyElement$0;
          $.set$innerHtml$x(document.querySelector("#energy"), "Energy: " + $.JSNumber_methods.toString$0(t1.currentEnergy) + "/" + $.JSNumber_methods.toString$0(t1.maxEnergy));
        }
      } else
        $.game.findRoute$1(this);
    }
  },
  calculateVector$0: function() {
    var targetPosition, delta, t1, t2, distance, packetSpeed;
    targetPosition = this.currentTarget.getCenter$0();
    delta = new $.Vector($.$sub$n(targetPosition.x, this.position.x), $.$sub$n(targetPosition.y, this.position.y));
    t1 = this.position;
    t2 = $.$sub$n(targetPosition.x, t1.x);
    if (typeof t2 !== "number")
      $.throwExpression(new $.ArgumentError(t2));
    t2 = Math.pow(t2, 2);
    t1 = $.$sub$n(targetPosition.y, t1.y);
    if (typeof t1 !== "number")
      $.throwExpression(new $.ArgumentError(t1));
    t1 = t2 + Math.pow(t1, 2);
    distance = Math.sqrt(t1);
    t1 = $.game;
    packetSpeed = t1.packetSpeed;
    if (this.type === "collection")
      packetSpeed /= 4;
    this.speed.x = $.$div$n(delta.x, distance) * packetSpeed * t1.speed * this.speedMultiplier;
    this.speed.y = $.$div$n(delta.y, distance) * packetSpeed * t1.speed * this.speedMultiplier;
    if ($.abs$0$n(this.speed.x) > $.abs$0$n(delta.x))
      this.speed.x = delta.x;
    if ($.abs$0$n(this.speed.y) > $.abs$0$n(delta.y))
      this.speed.y = delta.y;
  },
  draw$0: function() {
    var t1, context, position, t2, t3, t4;
    t1 = $.engine.canvas;
    context = t1.$index(t1, "buffer").get$context();
    position = $.Helper_real2screen(this.position);
    t1 = $.engine;
    t2 = $.$sub$n(position.x, 8);
    t3 = $.$sub$n(position.y, 8);
    t4 = $.game.zoom;
    if (typeof t4 !== "number")
      throw $.iae(t4);
    if (t1.isVisible$2(new $.Vector(t2, t3), new $.Vector(16 * t4, 16 * t4))) {
      t1 = $.engine.images;
      t1 = t1.$index(t1, this.imageID);
      t2 = position.x;
      t3 = $.game.zoom;
      if (typeof t3 !== "number")
        throw $.iae(t3);
      t3 = $.$sub$n(t2, 8 * t3);
      t2 = position.y;
      t4 = $.game.zoom;
      if (typeof t4 !== "number")
        throw $.iae(t4);
      t4 = $.$sub$n(t2, 8 * t4);
      t2 = $.game.zoom;
      if (typeof t2 !== "number")
        throw $.iae(t2);
      $.drawImageScaled$5$x(context, t1, t3, t4, 16 * t2, 16 * t2);
    }
  }
},

Shell: {"": "Object;position>,targetPosition,speed,imageID<,remove*,rotation,trailTimer",
  remove$0: function($receiver) {
    return this.remove.call$0();
  },
  init$0: function() {
    var t1, t2, t3, t4, t5, t6, t7, delta, distance;
    t1 = this.targetPosition;
    t2 = t1.x;
    if (typeof t2 !== "number")
      return this.init$0$bailout(1, t1, t2);
    t3 = this.position;
    t4 = t3.x;
    if (typeof t4 !== "number")
      return this.init$0$bailout(2, t1, t2, t4);
    t5 = t2 - t4;
    t6 = t1.y;
    if (typeof t6 !== "number")
      return this.init$0$bailout(3, t1, t6, t5);
    t7 = t3.y;
    if (typeof t7 !== "number")
      return this.init$0$bailout(4, t1, t6, t5, t7);
    delta = new $.Vector(t5, t6 - t7);
    t4 = t2 - t4;
    t2 = Math.pow(t4, 2);
    t1 = t1.y;
    if (typeof t1 !== "number")
      return this.init$0$bailout(7, t1, t2, 0, t3, delta);
    t3 = t3.y;
    if (typeof t3 !== "number")
      return this.init$0$bailout(8, t1, t2, 0, t3, delta);
    t3 = t1 - t3;
    t1 = t2 + Math.pow(t3, 2);
    distance = Math.sqrt(t1);
    t1 = this.speed;
    t2 = delta.x;
    if (typeof t2 !== "number")
      throw t2.$div();
    t3 = $.game;
    t1.x = t2 / distance * t3.shellSpeed * t3.speed;
    t2 = this.speed;
    t1 = delta.y;
    if (typeof t1 !== "number")
      throw t1.$div();
    t2.y = t1 / distance * t3.shellSpeed * t3.speed;
  },
  init$0$bailout: function(state0, t1, t2, t3, t4, delta) {
    switch (state0) {
      case 0:
        t1 = this.targetPosition;
        t2 = t1.x;
      case 1:
        state0 = 0;
        t3 = this.position.x;
      case 2:
        state0 = 0;
        t3 = $.$sub$n(t2, t3);
        t2 = t1.y;
      case 3:
        state0 = 0;
        t4 = this.position.y;
      case 4:
        state0 = 0;
        delta = new $.Vector(t3, $.$sub$n(t2, t4));
        t4 = this.position;
        t2 = t1.x;
      case 5:
        state0 = 0;
        t3 = t4.x;
      case 6:
        state0 = 0;
        t3 = $.$sub$n(t2, t3);
        if (typeof t3 !== "number")
          $.throwExpression(new $.ArgumentError(t3));
        t2 = Math.pow(t3, 2);
        t1 = t1.y;
      case 7:
        state0 = 0;
        t4 = t4.y;
      case 8:
        var distance;
        state0 = 0;
        t4 = $.$sub$n(t1, t4);
        if (typeof t4 !== "number")
          $.throwExpression(new $.ArgumentError(t4));
        t1 = t2 + Math.pow(t4, 2);
        distance = Math.sqrt(t1);
        t1 = this.speed;
        t2 = delta.x;
        if (typeof t2 !== "number")
          throw t2.$div();
        t2 = $.$div$n(t2, distance);
        t3 = $.game;
        t1.x = t2 * t3.shellSpeed * t3.speed;
        t2 = this.speed;
        t1 = delta.y;
        if (typeof t1 !== "number")
          throw t1.$div();
        t2.y = $.$div$n(t1, distance) * t3.shellSpeed * t3.speed;
    }
  },
  getCenter$0: function() {
    return new $.Vector($.$sub$n(this.position.x, 8), $.$sub$n(this.position.y, 8));
  },
  move$0: function() {
    var t1, t2, t3, truncated, t4, i, j;
    this.trailTimer = this.trailTimer + 1;
    if (this.trailTimer === 10) {
      this.trailTimer = 0;
      t1 = $.game.smokes;
      t2 = new $.Vector($.$sub$n(this.position.x, 8), $.$sub$n(this.position.y, 8));
      t3 = new $.Smoke(null, null, null);
      t3.position = new $.Vector(t2.x, t2.y);
      t3.frame = 0;
      t3.imageID = "smoke";
      t1.push(t3);
    }
    this.rotation = this.rotation + 20;
    t1 = this.rotation;
    if (t1 > 359)
      this.rotation = t1 - 359;
    t1 = this.position;
    t2 = this.speed;
    this.position = new $.Vector($.$add$ns(t1.x, t2.x), $.$add$ns(t1.y, t2.y));
    t1 = this.targetPosition;
    if ($.$gt$n(this.position.x, $.$sub$n(t1.x, 2)) && $.$lt$n(this.position.x, $.$add$ns(t1.x, 2)) && $.$gt$n(this.position.y, $.$sub$n(t1.y, 2)) && $.$lt$n(this.position.y, $.$add$ns(t1.y, 2))) {
      this.remove = true;
      t2 = $.game.explosions;
      t3 = new $.Explosion(null, null, null);
      t3.position = new $.Vector(t1.x, t1.y);
      t3.frame = 0;
      t3.imageID = "explosion";
      t2.push(t3);
      t3 = $.engine;
      t2 = Math.floor($.$div$n(t1.x, $.game.tileSize));
      if (isNaN(t2))
        $.throwExpression(new $.UnsupportedError("NaN"));
      if (t2 == Infinity || t2 == -Infinity)
        $.throwExpression(new $.UnsupportedError("Infinity"));
      truncated = t2 < 0 ? $.JSNumber_methods.ceilToDouble$0(t2) : $.JSNumber_methods.floorToDouble$0(t2);
      t2 = truncated == -0.0 ? 0 : truncated;
      t4 = Math.floor($.$div$n(t1.y, $.game.tileSize));
      if (isNaN(t4))
        $.throwExpression(new $.UnsupportedError("NaN"));
      if (t4 == Infinity || t4 == -Infinity)
        $.throwExpression(new $.UnsupportedError("Infinity"));
      truncated = t4 < 0 ? $.JSNumber_methods.ceilToDouble$0(t4) : $.JSNumber_methods.floorToDouble$0(t4);
      t4 = truncated == -0.0 ? 0 : truncated;
      t3.playSound$2("explosion", new $.Vector(t2, t4));
      t2 = Math.floor($.$div$n(t1.x, $.game.tileSize));
      if (isNaN(t2))
        $.throwExpression(new $.UnsupportedError("NaN"));
      if (t2 == Infinity || t2 == -Infinity)
        $.throwExpression(new $.UnsupportedError("Infinity"));
      truncated = t2 < 0 ? Math.ceil(t2) : Math.floor(t2);
      i = (truncated == -0.0 ? 0 : truncated) - 4;
      if (i !== (i | 0))
        return this.move$0$bailout(1, i, t1);
      while (true) {
        t2 = Math.floor($.$div$n(t1.x, $.game.tileSize));
        if (isNaN(t2))
          $.throwExpression(new $.UnsupportedError("NaN"));
        if (t2 == Infinity || t2 == -Infinity)
          $.throwExpression(new $.UnsupportedError("Infinity"));
        truncated = t2 < 0 ? Math.ceil(t2) : Math.floor(t2);
        if (!(i < (truncated == -0.0 ? 0 : truncated) + 5))
          break;
        t2 = Math.floor($.$div$n(t1.y, $.game.tileSize));
        if (isNaN(t2))
          $.throwExpression(new $.UnsupportedError("NaN"));
        if (t2 == Infinity || t2 == -Infinity)
          $.throwExpression(new $.UnsupportedError("Infinity"));
        truncated = t2 < 0 ? Math.ceil(t2) : Math.floor(t2);
        j = (truncated == -0.0 ? 0 : truncated) - 4;
        while (true) {
          t2 = Math.floor($.$div$n(t1.y, $.game.tileSize));
          if (isNaN(t2))
            $.throwExpression(new $.UnsupportedError("NaN"));
          if (t2 == Infinity || t2 == -Infinity)
            $.throwExpression(new $.UnsupportedError("Infinity"));
          truncated = t2 < 0 ? Math.ceil(t2) : Math.floor(t2);
          if (!(j < (truncated == -0.0 ? 0 : truncated) + 5))
            break;
          t2 = $.game;
          if (t2.withinWorld$2(i, j)) {
            t2 = t2.tileSize;
            t3 = t1.x;
            if (typeof t3 !== "number")
              throw $.iae(t3);
            t3 = i * t2 + t2 / 2 - t3;
            t2 = Math.pow(t3, 2);
            t3 = $.game.tileSize;
            t4 = t1.y;
            if (typeof t4 !== "number")
              throw $.iae(t4);
            t4 = j * t3 + t3 / 2 - t4;
            t3 = Math.pow(t4, 2);
            t4 = $.game.tileSize * 4;
            if (t2 + t3 < Math.pow(t4, 2)) {
              t2 = $.game.world.tiles;
              if (i < 0 || i >= t2.length)
                throw $.ioore(i);
              t2 = t2[i];
              if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !$.isJsIndexable(t2, t2[$.dispatchPropertyName])))
                return this.move$0$bailout(2, i, t1, j, t2);
              if (j >>> 0 !== j || j >= t2.length)
                throw $.ioore(j);
              t2 = $.$index$asx(t2[j], 0);
              t2.set$creep($.$sub$n(t2.get$creep(), 10));
              t2 = $.game.world.tiles;
              if (i >= t2.length)
                throw $.ioore(i);
              t2 = t2[i];
              if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !$.isJsIndexable(t2, t2[$.dispatchPropertyName])))
                return this.move$0$bailout(3, i, t1, j, t2);
              if (j >= t2.length)
                throw $.ioore(j);
              if ($.$lt$n($.$index$asx(t2[j], 0).get$creep(), 0)) {
                t2 = $.game.world.tiles;
                if (i >= t2.length)
                  throw $.ioore(i);
                t2 = t2[i];
                if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !$.isJsIndexable(t2, t2[$.dispatchPropertyName])))
                  return this.move$0$bailout(4, i, t1, j, t2);
                if (j >= t2.length)
                  throw $.ioore(j);
                $.$index$asx(t2[j], 0).set$creep(0);
              }
            }
          }
          ++j;
        }
        ++i;
      }
    }
  },
  move$0$bailout: function(state0, i, t1, j, t2) {
    switch (state0) {
      case 0:
        this.trailTimer = this.trailTimer + 1;
        if (this.trailTimer === 10) {
          this.trailTimer = 0;
          t1 = $.game.smokes;
          t2 = new $.Vector($.$sub$n(this.position.x, 8), $.$sub$n(this.position.y, 8));
          t3 = new $.Smoke(null, null, null);
          t3.position = new $.Vector(t2.x, t2.y);
          t3.frame = 0;
          t3.imageID = "smoke";
          t1.push(t3);
        }
        this.rotation = this.rotation + 20;
        t1 = this.rotation;
        if (t1 > 359)
          this.rotation = t1 - 359;
        t1 = this.position;
        t2 = this.speed;
        this.position = new $.Vector($.$add$ns(t1.x, t2.x), $.$add$ns(t1.y, t2.y));
        t1 = this.targetPosition;
      default:
        var t3, truncated, t4;
        if (state0 === 4 || state0 === 3 || state0 === 2 || state0 === 1 || state0 === 0 && $.$gt$n(this.position.x, $.$sub$n(t1.x, 2)) && $.$lt$n(this.position.x, $.$add$ns(t1.x, 2)) && $.$gt$n(this.position.y, $.$sub$n(t1.y, 2)) && $.$lt$n(this.position.y, $.$add$ns(t1.y, 2)))
          switch (state0) {
            case 0:
              this.remove = true;
              t2 = $.game.explosions;
              t3 = new $.Explosion(null, null, null);
              t3.position = new $.Vector(t1.x, t1.y);
              t3.frame = 0;
              t3.imageID = "explosion";
              t2.push(t3);
              t3 = $.engine;
              t2 = Math.floor($.$div$n(t1.x, $.game.tileSize));
              if (isNaN(t2))
                $.throwExpression(new $.UnsupportedError("NaN"));
              if (t2 == Infinity || t2 == -Infinity)
                $.throwExpression(new $.UnsupportedError("Infinity"));
              truncated = t2 < 0 ? $.JSNumber_methods.ceilToDouble$0(t2) : $.JSNumber_methods.floorToDouble$0(t2);
              t2 = truncated == -0.0 ? 0 : truncated;
              t4 = Math.floor($.$div$n(t1.y, $.game.tileSize));
              if (isNaN(t4))
                $.throwExpression(new $.UnsupportedError("NaN"));
              if (t4 == Infinity || t4 == -Infinity)
                $.throwExpression(new $.UnsupportedError("Infinity"));
              truncated = t4 < 0 ? $.JSNumber_methods.ceilToDouble$0(t4) : $.JSNumber_methods.floorToDouble$0(t4);
              t4 = truncated == -0.0 ? 0 : truncated;
              t3.playSound$2("explosion", new $.Vector(t2, t4));
              t2 = Math.floor($.$div$n(t1.x, $.game.tileSize));
              if (isNaN(t2))
                $.throwExpression(new $.UnsupportedError("NaN"));
              if (t2 == Infinity || t2 == -Infinity)
                $.throwExpression(new $.UnsupportedError("Infinity"));
              truncated = t2 < 0 ? Math.ceil(t2) : Math.floor(t2);
              i = (truncated == -0.0 ? 0 : truncated) - 4;
            case 1:
              state0 = 0;
            default:
              L0:
                while (true)
                  switch (state0) {
                    case 0:
                      t2 = Math.floor($.$div$n(t1.x, $.game.tileSize));
                      if (isNaN(t2))
                        $.throwExpression(new $.UnsupportedError("NaN"));
                      if (t2 == Infinity || t2 == -Infinity)
                        $.throwExpression(new $.UnsupportedError("Infinity"));
                      truncated = t2 < 0 ? Math.ceil(t2) : Math.floor(t2);
                      if (!(i < (truncated == -0.0 ? 0 : truncated) + 5))
                        break L0;
                      t2 = Math.floor($.$div$n(t1.y, $.game.tileSize));
                      if (isNaN(t2))
                        $.throwExpression(new $.UnsupportedError("NaN"));
                      if (t2 == Infinity || t2 == -Infinity)
                        $.throwExpression(new $.UnsupportedError("Infinity"));
                      truncated = t2 < 0 ? Math.ceil(t2) : Math.floor(t2);
                      j = (truncated == -0.0 ? 0 : truncated) - 4;
                    default:
                      L1:
                        while (true)
                          switch (state0) {
                            case 0:
                              t2 = Math.floor($.$div$n(t1.y, $.game.tileSize));
                              if (isNaN(t2))
                                $.throwExpression(new $.UnsupportedError("NaN"));
                              if (t2 == Infinity || t2 == -Infinity)
                                $.throwExpression(new $.UnsupportedError("Infinity"));
                              truncated = t2 < 0 ? Math.ceil(t2) : Math.floor(t2);
                              if (!(j < (truncated == -0.0 ? 0 : truncated) + 5))
                                break L1;
                              t2 = $.game;
                            default:
                              if (state0 === 4 || state0 === 3 || state0 === 2 || state0 === 0 && t2.withinWorld$2(i, j))
                                switch (state0) {
                                  case 0:
                                    t2 = t2.tileSize;
                                    t3 = t1.x;
                                    if (typeof t3 !== "number")
                                      throw $.iae(t3);
                                    t3 = i * t2 + t2 / 2 - t3;
                                    t2 = Math.pow(t3, 2);
                                    t3 = $.game.tileSize;
                                    t4 = t1.y;
                                    if (typeof t4 !== "number")
                                      throw $.iae(t4);
                                    t4 = j * t3 + t3 / 2 - t4;
                                    t3 = Math.pow(t4, 2);
                                    t4 = $.game.tileSize * 4;
                                  default:
                                    if (state0 === 4 || state0 === 3 || state0 === 2 || state0 === 0 && t2 + t3 < Math.pow(t4, 2))
                                      switch (state0) {
                                        case 0:
                                          t2 = $.game.world.tiles;
                                          if (i >>> 0 !== i || i >= t2.length)
                                            throw $.ioore(i);
                                          t2 = t2[i];
                                        case 2:
                                          state0 = 0;
                                          t2 = $.$index$asx($.$index$asx(t2, j), 0);
                                          t2.set$creep($.$sub$n(t2.get$creep(), 10));
                                          t2 = $.game.world.tiles;
                                          if (i >= t2.length)
                                            throw $.ioore(i);
                                          t2 = t2[i];
                                        case 3:
                                          state0 = 0;
                                        case 4:
                                          if (state0 === 4 || state0 === 0 && $.$lt$n($.$index$asx($.$index$asx(t2, j), 0).get$creep(), 0))
                                            switch (state0) {
                                              case 0:
                                                t2 = $.game.world.tiles;
                                                if (i >= t2.length)
                                                  throw $.ioore(i);
                                                t2 = t2[i];
                                              case 4:
                                                state0 = 0;
                                                $.$index$asx($.$index$asx(t2, j), 0).set$creep(0);
                                            }
                                      }
                                }
                              ++j;
                          }
                      ++i;
                  }
          }
    }
  },
  draw$0: function() {
    var t1, context, position, t2, t3, t4;
    t1 = $.engine.canvas;
    context = t1.$index(t1, "buffer").get$context();
    position = $.Helper_real2screen(this.position);
    t1 = $.engine;
    t2 = $.game.zoom;
    if (typeof t2 !== "number")
      throw $.iae(t2);
    if (t1.isVisible$2(position, new $.Vector(16 * t2, 16 * t2))) {
      t1 = $.getInterceptor$x(context);
      t1.save$0(context);
      t2 = position.x;
      t3 = $.game.zoom;
      if (typeof t3 !== "number")
        throw $.iae(t3);
      t3 = $.$add$ns(t2, 8 * t3);
      t2 = position.y;
      t4 = $.game.zoom;
      if (typeof t4 !== "number")
        throw $.iae(t4);
      t1.translate$2(context, t3, $.$add$ns(t2, 8 * t4));
      t1.rotate$1(context, this.rotation * 0.017453292519943295);
      t4 = $.engine.images;
      t4 = t4.$index(t4, "shell");
      t2 = $.game.zoom;
      if (typeof t2 !== "number")
        throw $.iae(t2);
      t3 = 16 * t2;
      t1.drawImageScaled$5(context, t4, -8 * t2, -8 * t2, t3, t3);
      t1.restore$0(context);
    }
  }
},

Ship: {"": "Object;position>,speed,targetPosition,imageID<,type,status*,remove*,hovered<,selected*,angle,maxEnergy<,energy@,trailTimer,weaponTimer,scale,flightCounter,home",
  remove$0: function($receiver) {
    return this.remove.call$0();
  },
  getCenter$0: function() {
    return new $.Vector($.$add$ns(this.position.x, 24), $.$add$ns(this.position.y, 24));
  },
  updateHoverState$0: function() {
    var position, t1, t2, t3;
    position = $.Helper_real2screen(this.position);
    t1 = $.engine.mouse.x;
    t2 = position.x;
    t3 = $.getInterceptor$n(t1);
    if (t3.$gt(t1, t2))
      if (t3.$lt(t1, $.$add$ns(t2, 47))) {
        t1 = $.engine.mouse.y;
        t2 = position.y;
        t3 = $.getInterceptor$n(t1);
        t1 = t3.$gt(t1, t2) && t3.$lt(t1, $.$add$ns(t2, 47));
      } else
        t1 = false;
    else
      t1 = false;
    this.hovered = t1;
    return this.hovered;
  },
  turnToTarget$0: function() {
    var t1, delta, t2, angleToTarget, absoluteDelta, turnRate;
    t1 = this.targetPosition;
    delta = new $.Vector($.$sub$n(t1.x, this.position.x), $.$sub$n(t1.y, this.position.y));
    t1 = delta.y;
    t2 = delta.x;
    if (typeof t1 !== "number")
      $.throwExpression(new $.ArgumentError(t1));
    if (typeof t2 !== "number")
      $.throwExpression(new $.ArgumentError(t2));
    angleToTarget = Math.atan2(t1, t2) * 57.29577951308232;
    absoluteDelta = Math.abs(angleToTarget - this.angle);
    turnRate = absoluteDelta < 1.5 ? absoluteDelta : 1.5;
    if (absoluteDelta <= 180) {
      t1 = this.angle;
      if (angleToTarget < t1)
        this.angle = t1 - turnRate;
      else
        this.angle = t1 + turnRate;
    } else {
      t1 = this.angle;
      if (angleToTarget < t1)
        this.angle = t1 + turnRate;
      else
        this.angle = t1 - turnRate;
    }
    t1 = this.angle;
    if (t1 > 180)
      this.angle = t1 - 360;
    t1 = this.angle;
    if (t1 < -180)
      this.angle = t1 + 360;
  },
  calculateVector$0: function() {
    var t1, x, y, t2;
    t1 = this.angle * 0.017453292519943295;
    x = Math.cos(t1);
    t1 = this.angle * 0.017453292519943295;
    y = Math.sin(t1);
    t1 = this.speed;
    t2 = $.game;
    t1.x = x * t2.shipSpeed * t2.speed;
    this.speed.y = y * t2.shipSpeed * t2.speed;
  },
  control$1: function(_, position) {
    var t1, t2, t3;
    if (this.hovered)
      this.selected = true;
    if (this.selected) {
      $.game.mode = "SHIP_SELECTED";
      if (this.status === "IDLE") {
        t1 = this.home;
        t2 = $.getInterceptor$x(t1);
        if (!$.$eq($.$sub$n(position.x, 1), $.get$x$x(t2.get$position(t1))) && !$.$eq($.$sub$n(position.y, 1), $.get$y$x(t2.get$position(t1)))) {
          this.energy = t1.get$energy();
          t1.set$energy(0);
          t1 = this.targetPosition;
          t1.x = $.$mul$n(position.x, $.game.tileSize);
          t1.y = $.$mul$n(position.y, $.game.tileSize);
          this.status = "RISING";
        }
      }
      t1 = this.status;
      if (t1 === "ATTACKING" || t1 === "RETURNING") {
        t1 = this.home;
        t2 = $.getInterceptor$x(t1);
        t1 = $.$eq($.$sub$n(position.x, 1), $.get$x$x(t2.get$position(t1))) && $.$eq($.$sub$n(position.y, 1), $.get$y$x(t2.get$position(t1)));
        t2 = position.x;
        t3 = this.targetPosition;
        if (t1) {
          t3.x = $.$mul$n($.$sub$n(t2, 1), $.game.tileSize);
          t3.y = $.$mul$n($.$sub$n(position.y, 1), $.game.tileSize);
          this.status = "RETURNING";
        } else {
          t3.x = $.$mul$n($.$sub$n(t2, 1), $.game.tileSize);
          t3.y = $.$mul$n($.$sub$n(position.y, 1), $.game.tileSize);
          this.status = "ATTACKING";
        }
      }
    }
  },
  move$0: function() {
    var t1, t2, t3, truncated, i, j, t4;
    t1 = this.status;
    if (t1 === "ATTACKING" || t1 === "RETURNING") {
      this.trailTimer = this.trailTimer + 1;
      if (this.trailTimer === 10) {
        this.trailTimer = 0;
        t1 = $.game.smokes;
        t2 = new $.Vector($.$add$ns(this.position.x, 24), $.$add$ns(this.position.y, 24));
        t3 = new $.Smoke(null, null, null);
        t3.position = new $.Vector(t2.x, t2.y);
        t3.frame = 0;
        t3.imageID = "smoke";
        t1.push(t3);
      }
    }
    t1 = this.status;
    if (t1 === "RISING") {
      t1 = this.flightCounter;
      if (t1 < 25) {
        this.flightCounter = t1 + 1;
        this.scale = this.scale * 1.01;
      }
      if (this.flightCounter === 25)
        this.status = "ATTACKING";
    } else if (t1 === "FALLING") {
      t1 = this.flightCounter;
      if (t1 > 0) {
        this.flightCounter = t1 - 1;
        this.scale = this.scale / 1.01;
      }
      if (this.flightCounter === 0) {
        this.status = "IDLE";
        t1 = this.home;
        t2 = $.getInterceptor$x(t1);
        this.position.x = $.$mul$n($.get$x$x(t2.get$position(t1)), $.game.tileSize);
        this.position.y = $.$mul$n($.get$y$x(t2.get$position(t1)), $.game.tileSize);
        t1 = this.targetPosition;
        t1.x = 0;
        t1.y = 0;
        this.energy = 5;
        this.scale = 1;
      }
    } else if (t1 === "ATTACKING") {
      this.weaponTimer = this.weaponTimer + 1;
      this.turnToTarget$0();
      this.calculateVector$0();
      t1 = this.position;
      t2 = this.speed;
      this.position = new $.Vector($.$add$ns(t1.x, t2.x), $.$add$ns(t1.y, t2.y));
      t1 = this.targetPosition;
      if ($.$gt$n(this.position.x, $.$sub$n(t1.x, 2)) && $.$lt$n(this.position.x, $.$add$ns(t1.x, 2)) && $.$gt$n(this.position.y, $.$sub$n(t1.y, 2)) && $.$lt$n(this.position.y, $.$add$ns(t1.y, 2)))
        if (this.weaponTimer >= 10) {
          this.weaponTimer = 0;
          t2 = $.game.explosions;
          t3 = new $.Explosion(null, null, null);
          t3.position = new $.Vector(t1.x, t1.y);
          t3.frame = 0;
          t3.imageID = "explosion";
          t2.push(t3);
          this.energy = this.energy - 1;
          t2 = Math.floor($.$div$n(t1.x, $.game.tileSize));
          if (isNaN(t2))
            $.throwExpression(new $.UnsupportedError("NaN"));
          if (t2 == Infinity || t2 == -Infinity)
            $.throwExpression(new $.UnsupportedError("Infinity"));
          truncated = t2 < 0 ? Math.ceil(t2) : Math.floor(t2);
          i = (truncated == -0.0 ? 0 : truncated) - 3;
          if (i !== (i | 0))
            return this.move$0$bailout(1, t1, i);
          while (true) {
            t2 = Math.floor($.$div$n(t1.x, $.game.tileSize));
            if (isNaN(t2))
              $.throwExpression(new $.UnsupportedError("NaN"));
            if (t2 == Infinity || t2 == -Infinity)
              $.throwExpression(new $.UnsupportedError("Infinity"));
            truncated = t2 < 0 ? Math.ceil(t2) : Math.floor(t2);
            if (!(i < (truncated == -0.0 ? 0 : truncated) + 5))
              break;
            t2 = Math.floor($.$div$n(t1.y, $.game.tileSize));
            if (isNaN(t2))
              $.throwExpression(new $.UnsupportedError("NaN"));
            if (t2 == Infinity || t2 == -Infinity)
              $.throwExpression(new $.UnsupportedError("Infinity"));
            truncated = t2 < 0 ? Math.ceil(t2) : Math.floor(t2);
            j = (truncated == -0.0 ? 0 : truncated) - 3;
            while (true) {
              t2 = Math.floor($.$div$n(t1.y, $.game.tileSize));
              if (isNaN(t2))
                $.throwExpression(new $.UnsupportedError("NaN"));
              if (t2 == Infinity || t2 == -Infinity)
                $.throwExpression(new $.UnsupportedError("Infinity"));
              truncated = t2 < 0 ? Math.ceil(t2) : Math.floor(t2);
              if (!(j < (truncated == -0.0 ? 0 : truncated) + 5))
                break;
              t2 = $.game;
              if (t2.withinWorld$2(i, j)) {
                t2 = t2.tileSize;
                t3 = $.$add$ns(t1.x, t2);
                if (typeof t3 !== "number")
                  throw $.iae(t3);
                t3 = i * t2 + t2 / 2 - t3;
                t2 = Math.pow(t3, 2);
                t3 = $.game.tileSize;
                t4 = $.$add$ns(t1.y, t3);
                if (typeof t4 !== "number")
                  throw $.iae(t4);
                t4 = j * t3 + t3 / 2 - t4;
                t3 = Math.pow(t4, 2);
                t4 = $.game.tileSize * 3;
                if (t2 + t3 < Math.pow(t4, 2)) {
                  t2 = $.game.world.tiles;
                  if (i < 0 || i >= t2.length)
                    throw $.ioore(i);
                  t2 = t2[i];
                  if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !$.isJsIndexable(t2, t2[$.dispatchPropertyName])))
                    return this.move$0$bailout(2, t1, i, j, t2);
                  if (j >>> 0 !== j || j >= t2.length)
                    throw $.ioore(j);
                  t2 = $.$index$asx(t2[j], 0);
                  t2.set$creep($.$sub$n(t2.get$creep(), 5));
                  t2 = $.game.world.tiles;
                  if (i >= t2.length)
                    throw $.ioore(i);
                  t2 = t2[i];
                  if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !$.isJsIndexable(t2, t2[$.dispatchPropertyName])))
                    return this.move$0$bailout(3, t1, i, j, t2);
                  if (j >= t2.length)
                    throw $.ioore(j);
                  if ($.$lt$n($.$index$asx(t2[j], 0).get$creep(), 0)) {
                    t2 = $.game.world.tiles;
                    if (i >= t2.length)
                      throw $.ioore(i);
                    t2 = t2[i];
                    if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !$.isJsIndexable(t2, t2[$.dispatchPropertyName])))
                      return this.move$0$bailout(4, t1, i, j, t2);
                    if (j >= t2.length)
                      throw $.ioore(j);
                    $.$index$asx(t2[j], 0).set$creep(0);
                  }
                }
              }
              ++j;
            }
            ++i;
          }
          if (this.energy === 0) {
            this.status = "RETURNING";
            t2 = this.home;
            t3 = $.getInterceptor$x(t2);
            t1.x = $.$mul$n($.get$x$x(t3.get$position(t2)), $.game.tileSize);
            t1.y = $.$mul$n($.get$y$x(t3.get$position(t2)), $.game.tileSize);
          }
        }
    } else if (t1 === "RETURNING") {
      this.turnToTarget$0();
      this.calculateVector$0();
      t1 = this.position;
      t2 = this.speed;
      this.position = new $.Vector($.$add$ns(t1.x, t2.x), $.$add$ns(t1.y, t2.y));
      t1 = this.targetPosition;
      if ($.$gt$n(this.position.x, $.$sub$n(t1.x, 2)) && $.$lt$n(this.position.x, $.$add$ns(t1.x, 2)) && $.$gt$n(this.position.y, $.$sub$n(t1.y, 2)) && $.$lt$n(this.position.y, $.$add$ns(t1.y, 2)))
        this.status = "FALLING";
    }
  },
  move$0$bailout: function(state0, t1, i, j, t2) {
    switch (state0) {
      case 0:
        t1 = this.status;
        if (t1 === "ATTACKING" || t1 === "RETURNING") {
          this.trailTimer = this.trailTimer + 1;
          if (this.trailTimer === 10) {
            this.trailTimer = 0;
            t1 = $.game.smokes;
            t2 = new $.Vector($.$add$ns(this.position.x, 24), $.$add$ns(this.position.y, 24));
            t3 = new $.Smoke(null, null, null);
            t3.position = new $.Vector(t2.x, t2.y);
            t3.frame = 0;
            t3.imageID = "smoke";
            t1.push(t3);
          }
        }
        t1 = this.status;
      default:
        var t3, truncated, t4;
        if (state0 === 0 && t1 === "RISING") {
          t1 = this.flightCounter;
          if (t1 < 25) {
            this.flightCounter = t1 + 1;
            this.scale = this.scale * 1.01;
          }
          if (this.flightCounter === 25)
            this.status = "ATTACKING";
        } else
          switch (state0) {
            case 0:
            default:
              if (state0 === 0 && t1 === "FALLING") {
                t1 = this.flightCounter;
                if (t1 > 0) {
                  this.flightCounter = t1 - 1;
                  this.scale = this.scale / 1.01;
                }
                if (this.flightCounter === 0) {
                  this.status = "IDLE";
                  t1 = this.home;
                  t2 = $.getInterceptor$x(t1);
                  this.position.x = $.$mul$n($.get$x$x(t2.get$position(t1)), $.game.tileSize);
                  this.position.y = $.$mul$n($.get$y$x(t2.get$position(t1)), $.game.tileSize);
                  t1 = this.targetPosition;
                  t1.x = 0;
                  t1.y = 0;
                  this.energy = 5;
                  this.scale = 1;
                }
              } else
                switch (state0) {
                  case 0:
                  default:
                    if (state0 === 4 || state0 === 3 || state0 === 2 || state0 === 1 || state0 === 0 && t1 === "ATTACKING")
                      switch (state0) {
                        case 0:
                          this.weaponTimer = this.weaponTimer + 1;
                          this.turnToTarget$0();
                          this.calculateVector$0();
                          t1 = this.position;
                          t2 = this.speed;
                          this.position = new $.Vector($.$add$ns(t1.x, t2.x), $.$add$ns(t1.y, t2.y));
                          t1 = this.targetPosition;
                        default:
                          if (state0 === 4 || state0 === 3 || state0 === 2 || state0 === 1 || state0 === 0 && $.$gt$n(this.position.x, $.$sub$n(t1.x, 2)) && $.$lt$n(this.position.x, $.$add$ns(t1.x, 2)) && $.$gt$n(this.position.y, $.$sub$n(t1.y, 2)) && $.$lt$n(this.position.y, $.$add$ns(t1.y, 2)))
                            switch (state0) {
                              case 0:
                              default:
                                if (state0 === 4 || state0 === 3 || state0 === 2 || state0 === 1 || state0 === 0 && this.weaponTimer >= 10)
                                  switch (state0) {
                                    case 0:
                                      this.weaponTimer = 0;
                                      t2 = $.game.explosions;
                                      t3 = new $.Explosion(null, null, null);
                                      t3.position = new $.Vector(t1.x, t1.y);
                                      t3.frame = 0;
                                      t3.imageID = "explosion";
                                      t2.push(t3);
                                      this.energy = this.energy - 1;
                                      t2 = Math.floor($.$div$n(t1.x, $.game.tileSize));
                                      if (isNaN(t2))
                                        $.throwExpression(new $.UnsupportedError("NaN"));
                                      if (t2 == Infinity || t2 == -Infinity)
                                        $.throwExpression(new $.UnsupportedError("Infinity"));
                                      truncated = t2 < 0 ? Math.ceil(t2) : Math.floor(t2);
                                      i = (truncated == -0.0 ? 0 : truncated) - 3;
                                    case 1:
                                      state0 = 0;
                                    default:
                                      L0:
                                        while (true)
                                          switch (state0) {
                                            case 0:
                                              t2 = Math.floor($.$div$n(t1.x, $.game.tileSize));
                                              if (isNaN(t2))
                                                $.throwExpression(new $.UnsupportedError("NaN"));
                                              if (t2 == Infinity || t2 == -Infinity)
                                                $.throwExpression(new $.UnsupportedError("Infinity"));
                                              truncated = t2 < 0 ? Math.ceil(t2) : Math.floor(t2);
                                              if (!(i < (truncated == -0.0 ? 0 : truncated) + 5))
                                                break L0;
                                              t2 = Math.floor($.$div$n(t1.y, $.game.tileSize));
                                              if (isNaN(t2))
                                                $.throwExpression(new $.UnsupportedError("NaN"));
                                              if (t2 == Infinity || t2 == -Infinity)
                                                $.throwExpression(new $.UnsupportedError("Infinity"));
                                              truncated = t2 < 0 ? Math.ceil(t2) : Math.floor(t2);
                                              j = (truncated == -0.0 ? 0 : truncated) - 3;
                                            default:
                                              L1:
                                                while (true)
                                                  switch (state0) {
                                                    case 0:
                                                      t2 = Math.floor($.$div$n(t1.y, $.game.tileSize));
                                                      if (isNaN(t2))
                                                        $.throwExpression(new $.UnsupportedError("NaN"));
                                                      if (t2 == Infinity || t2 == -Infinity)
                                                        $.throwExpression(new $.UnsupportedError("Infinity"));
                                                      truncated = t2 < 0 ? Math.ceil(t2) : Math.floor(t2);
                                                      if (!(j < (truncated == -0.0 ? 0 : truncated) + 5))
                                                        break L1;
                                                      t2 = $.game;
                                                    default:
                                                      if (state0 === 4 || state0 === 3 || state0 === 2 || state0 === 0 && t2.withinWorld$2(i, j))
                                                        switch (state0) {
                                                          case 0:
                                                            t2 = t2.tileSize;
                                                            t3 = $.$add$ns(t1.x, t2);
                                                            if (typeof t3 !== "number")
                                                              throw $.iae(t3);
                                                            t3 = i * t2 + t2 / 2 - t3;
                                                            t2 = Math.pow(t3, 2);
                                                            t3 = $.game.tileSize;
                                                            t4 = $.$add$ns(t1.y, t3);
                                                            if (typeof t4 !== "number")
                                                              throw $.iae(t4);
                                                            t4 = j * t3 + t3 / 2 - t4;
                                                            t3 = Math.pow(t4, 2);
                                                            t4 = $.game.tileSize * 3;
                                                          default:
                                                            if (state0 === 4 || state0 === 3 || state0 === 2 || state0 === 0 && t2 + t3 < Math.pow(t4, 2))
                                                              switch (state0) {
                                                                case 0:
                                                                  t2 = $.game.world.tiles;
                                                                  if (i >>> 0 !== i || i >= t2.length)
                                                                    throw $.ioore(i);
                                                                  t2 = t2[i];
                                                                case 2:
                                                                  state0 = 0;
                                                                  t2 = $.$index$asx($.$index$asx(t2, j), 0);
                                                                  t2.set$creep($.$sub$n(t2.get$creep(), 5));
                                                                  t2 = $.game.world.tiles;
                                                                  if (i >= t2.length)
                                                                    throw $.ioore(i);
                                                                  t2 = t2[i];
                                                                case 3:
                                                                  state0 = 0;
                                                                case 4:
                                                                  if (state0 === 4 || state0 === 0 && $.$lt$n($.$index$asx($.$index$asx(t2, j), 0).get$creep(), 0))
                                                                    switch (state0) {
                                                                      case 0:
                                                                        t2 = $.game.world.tiles;
                                                                        if (i >= t2.length)
                                                                          throw $.ioore(i);
                                                                        t2 = t2[i];
                                                                      case 4:
                                                                        state0 = 0;
                                                                        $.$index$asx($.$index$asx(t2, j), 0).set$creep(0);
                                                                    }
                                                              }
                                                        }
                                                      ++j;
                                                  }
                                              ++i;
                                          }
                                      if (this.energy === 0) {
                                        this.status = "RETURNING";
                                        t2 = this.home;
                                        t3 = $.getInterceptor$x(t2);
                                        t1.x = $.$mul$n($.get$x$x(t3.get$position(t2)), $.game.tileSize);
                                        t1.y = $.$mul$n($.get$y$x(t3.get$position(t2)), $.game.tileSize);
                                      }
                                  }
                            }
                      }
                    else if (t1 === "RETURNING") {
                      this.turnToTarget$0();
                      this.calculateVector$0();
                      t1 = this.position;
                      t2 = this.speed;
                      this.position = new $.Vector($.$add$ns(t1.x, t2.x), $.$add$ns(t1.y, t2.y));
                      t1 = this.targetPosition;
                      if ($.$gt$n(this.position.x, $.$sub$n(t1.x, 2)) && $.$lt$n(this.position.x, $.$add$ns(t1.x, 2)) && $.$gt$n(this.position.y, $.$sub$n(t1.y, 2)) && $.$lt$n(this.position.y, $.$add$ns(t1.y, 2)))
                        this.status = "FALLING";
                    }
                }
          }
    }
  },
  draw$0: function() {
    var t1, context, position, t2, t3, t4, cursorPosition, t5, t6;
    t1 = $.engine.canvas;
    context = t1.$index(t1, "buffer").get$context();
    position = $.Helper_real2screen(this.position);
    if (this.hovered) {
      t1 = $.getInterceptor$x(context);
      t1.set$strokeStyle(context, "#f00");
      t1.beginPath$0(context);
      t2 = position.x;
      t3 = $.game.zoom;
      if (typeof t3 !== "number")
        throw $.iae(t3);
      t3 = $.$add$ns(t2, 24 * t3);
      t2 = position.y;
      t4 = $.game.zoom;
      if (typeof t4 !== "number")
        throw $.iae(t4);
      t4 = $.$add$ns(t2, 24 * t4);
      t2 = $.game.zoom;
      if (typeof t2 !== "number")
        throw $.iae(t2);
      t1.arc$6(context, t3, t4, 24 * t2 * this.scale, 0, 6.283185307179586, true);
      t1.closePath$0(context);
      t1.stroke$0(context);
    }
    if (this.selected) {
      t1 = $.getInterceptor$x(context);
      t1.set$strokeStyle(context, "#fff");
      t1.beginPath$0(context);
      t2 = position.x;
      t3 = $.game.zoom;
      if (typeof t3 !== "number")
        throw $.iae(t3);
      t3 = $.$add$ns(t2, 24 * t3);
      t2 = position.y;
      t4 = $.game.zoom;
      if (typeof t4 !== "number")
        throw $.iae(t4);
      t4 = $.$add$ns(t2, 24 * t4);
      t2 = $.game.zoom;
      if (typeof t2 !== "number")
        throw $.iae(t2);
      t1.arc$6(context, t3, t4, 24 * t2 * this.scale, 0, 6.283185307179586, true);
      t1.closePath$0(context);
      t1.stroke$0(context);
      t2 = this.status;
      if (t2 === "ATTACKING" || t2 === "IDLE") {
        cursorPosition = $.Helper_real2screen(this.targetPosition);
        t1.save$0(context);
        t1.set$globalAlpha(context, 0.5);
        t2 = $.engine.images;
        t2 = t2.$index(t2, "targetcursor");
        t3 = cursorPosition.x;
        t4 = $.game;
        t5 = t4.tileSize;
        t4 = t4.zoom;
        if (typeof t4 !== "number")
          throw $.iae(t4);
        t4 = $.$sub$n(t3, t5 * t4);
        t5 = cursorPosition.y;
        t3 = $.game;
        t6 = t3.tileSize;
        t3 = t3.zoom;
        if (typeof t3 !== "number")
          throw $.iae(t3);
        t3 = $.$sub$n(t5, t6 * t3);
        t6 = $.game.zoom;
        if (typeof t6 !== "number")
          throw $.iae(t6);
        t1.drawImageScaled$5(context, t2, t4, t3, 48 * t6, 48 * t6);
        t1.restore$0(context);
      }
    }
    t1 = $.engine;
    t2 = $.game.zoom;
    if (typeof t2 !== "number")
      throw $.iae(t2);
    if (t1.isVisible$2(position, new $.Vector(48 * t2, 48 * t2))) {
      t1 = $.getInterceptor$x(context);
      t1.save$0(context);
      t2 = position.x;
      t3 = $.game.zoom;
      if (typeof t3 !== "number")
        throw $.iae(t3);
      t3 = $.$add$ns(t2, 24 * t3);
      t2 = position.y;
      t4 = $.game.zoom;
      if (typeof t4 !== "number")
        throw $.iae(t4);
      t1.translate$2(context, t3, $.$add$ns(t2, 24 * t4));
      t1.rotate$1(context, (this.angle + 90) * 0.017453292519943295);
      t4 = $.engine.images;
      t4 = t4.$index(t4, this.imageID);
      t2 = $.game.zoom;
      if (typeof t2 !== "number")
        throw $.iae(t2);
      t3 = this.scale;
      t5 = 48 * t2 * t3;
      t1.drawImageScaled$5(context, t4, -24 * t2 * t3, -24 * t2 * t3, t5, t5);
      t1.restore$0(context);
      t1.set$fillStyle(context, "#f00");
      t5 = $.$add$ns(position.x, 2);
      t3 = $.$add$ns(position.y, 1);
      t2 = $.game.zoom;
      if (typeof t2 !== "number")
        throw $.iae(t2);
      t1.fillRect$4(context, t5, t3, 44 * t2 / this.maxEnergy * this.energy, 3);
    }
  }
},

Spore: {"": "Object;position>,targetPosition,speed,imageID<,remove*,rotation,health@,trailTimer",
  remove$0: function($receiver) {
    return this.remove.call$0();
  },
  init$0: function() {
    var t1, delta, t2, t3, distance;
    t1 = this.targetPosition;
    delta = new $.Vector($.$sub$n(t1.x, this.position.x), $.$sub$n(t1.y, this.position.y));
    t2 = this.position;
    t3 = $.$sub$n(t1.x, t2.x);
    if (typeof t3 !== "number")
      $.throwExpression(new $.ArgumentError(t3));
    t3 = Math.pow(t3, 2);
    t2 = $.$sub$n(t1.y, t2.y);
    if (typeof t2 !== "number")
      $.throwExpression(new $.ArgumentError(t2));
    t1 = t3 + Math.pow(t2, 2);
    distance = Math.sqrt(t1);
    t1 = this.speed;
    t2 = $.$div$n(delta.x, distance);
    t3 = $.game;
    t1.x = t2 * t3.sporeSpeed * t3.speed;
    this.speed.y = $.$div$n(delta.y, distance) * t3.sporeSpeed * t3.speed;
  },
  getCenter$0: function() {
    return new $.Vector($.$sub$n(this.position.x, 16), $.$sub$n(this.position.y, 16));
  },
  move$0: function() {
    var t1, t2, t3, truncated, t4, i, j;
    this.trailTimer = this.trailTimer + 1;
    if (this.trailTimer === 10) {
      this.trailTimer = 0;
      t1 = $.game.smokes;
      t2 = new $.Vector($.$sub$n(this.position.x, 16), $.$sub$n(this.position.y, 16));
      t3 = new $.Smoke(null, null, null);
      t3.position = new $.Vector(t2.x, t2.y);
      t3.frame = 0;
      t3.imageID = "smoke";
      t1.push(t3);
    }
    this.rotation = this.rotation + 10;
    t1 = this.rotation;
    if (t1 > 359)
      this.rotation = t1 - 359;
    t1 = this.position;
    t2 = this.speed;
    this.position = new $.Vector($.$add$ns(t1.x, t2.x), $.$add$ns(t1.y, t2.y));
    t1 = this.targetPosition;
    if ($.$gt$n(this.position.x, $.$sub$n(t1.x, 2)) && $.$lt$n(this.position.x, $.$add$ns(t1.x, 2)) && $.$gt$n(this.position.y, $.$sub$n(t1.y, 2)) && $.$lt$n(this.position.y, $.$add$ns(t1.y, 2))) {
      this.remove = true;
      t2 = $.engine;
      t3 = Math.floor($.$div$n(t1.x, $.game.tileSize));
      if (isNaN(t3))
        $.throwExpression(new $.UnsupportedError("NaN"));
      if (t3 == Infinity || t3 == -Infinity)
        $.throwExpression(new $.UnsupportedError("Infinity"));
      truncated = t3 < 0 ? $.JSNumber_methods.ceilToDouble$0(t3) : $.JSNumber_methods.floorToDouble$0(t3);
      t3 = truncated == -0.0 ? 0 : truncated;
      t4 = Math.floor($.$div$n(t1.y, $.game.tileSize));
      if (isNaN(t4))
        $.throwExpression(new $.UnsupportedError("NaN"));
      if (t4 == Infinity || t4 == -Infinity)
        $.throwExpression(new $.UnsupportedError("Infinity"));
      truncated = t4 < 0 ? $.JSNumber_methods.ceilToDouble$0(t4) : $.JSNumber_methods.floorToDouble$0(t4);
      t4 = truncated == -0.0 ? 0 : truncated;
      t2.playSound$2("explosion", new $.Vector(t3, t4));
      t2 = Math.floor($.$div$n(t1.x, $.game.tileSize));
      if (isNaN(t2))
        $.throwExpression(new $.UnsupportedError("NaN"));
      if (t2 == Infinity || t2 == -Infinity)
        $.throwExpression(new $.UnsupportedError("Infinity"));
      truncated = t2 < 0 ? Math.ceil(t2) : Math.floor(t2);
      i = (truncated == -0.0 ? 0 : truncated) - 2;
      if (i !== (i | 0))
        return this.move$0$bailout(1, t1, i);
      while (true) {
        t2 = Math.floor($.$div$n(t1.x, $.game.tileSize));
        if (isNaN(t2))
          $.throwExpression(new $.UnsupportedError("NaN"));
        if (t2 == Infinity || t2 == -Infinity)
          $.throwExpression(new $.UnsupportedError("Infinity"));
        truncated = t2 < 0 ? Math.ceil(t2) : Math.floor(t2);
        if (!(i < (truncated == -0.0 ? 0 : truncated) + 2))
          break;
        t2 = Math.floor($.$div$n(t1.y, $.game.tileSize));
        if (isNaN(t2))
          $.throwExpression(new $.UnsupportedError("NaN"));
        if (t2 == Infinity || t2 == -Infinity)
          $.throwExpression(new $.UnsupportedError("Infinity"));
        truncated = t2 < 0 ? Math.ceil(t2) : Math.floor(t2);
        j = (truncated == -0.0 ? 0 : truncated) - 2;
        while (true) {
          t2 = Math.floor($.$div$n(t1.y, $.game.tileSize));
          if (isNaN(t2))
            $.throwExpression(new $.UnsupportedError("NaN"));
          if (t2 == Infinity || t2 == -Infinity)
            $.throwExpression(new $.UnsupportedError("Infinity"));
          truncated = t2 < 0 ? Math.ceil(t2) : Math.floor(t2);
          if (!(j < (truncated == -0.0 ? 0 : truncated) + 2))
            break;
          t2 = $.game;
          if (t2.withinWorld$2(i, j)) {
            t2 = t2.tileSize;
            t3 = $.$add$ns(t1.x, t2);
            if (typeof t3 !== "number")
              throw $.iae(t3);
            t3 = i * t2 + t2 / 2 - t3;
            t2 = Math.pow(t3, 2);
            t3 = $.game.tileSize;
            t4 = $.$add$ns(t1.y, t3);
            if (typeof t4 !== "number")
              throw $.iae(t4);
            t4 = j * t3 + t3 / 2 - t4;
            t3 = Math.pow(t4, 2);
            t4 = $.game.tileSize;
            if (t2 + t3 < Math.pow(t4, 2)) {
              t2 = $.game.world.tiles;
              if (i < 0 || i >= t2.length)
                throw $.ioore(i);
              t2 = t2[i];
              if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !$.isJsIndexable(t2, t2[$.dispatchPropertyName])))
                return this.move$0$bailout(2, t1, i, j, t2);
              if (j >>> 0 !== j || j >= t2.length)
                throw $.ioore(j);
              t2 = $.$index$asx(t2[j], 0);
              t2.set$creep($.$add$ns(t2.get$creep(), 0.05));
            }
          }
          ++j;
        }
        ++i;
      }
    }
  },
  move$0$bailout: function(state0, t1, i, j, t2) {
    switch (state0) {
      case 0:
        this.trailTimer = this.trailTimer + 1;
        if (this.trailTimer === 10) {
          this.trailTimer = 0;
          t1 = $.game.smokes;
          t2 = new $.Vector($.$sub$n(this.position.x, 16), $.$sub$n(this.position.y, 16));
          t3 = new $.Smoke(null, null, null);
          t3.position = new $.Vector(t2.x, t2.y);
          t3.frame = 0;
          t3.imageID = "smoke";
          t1.push(t3);
        }
        this.rotation = this.rotation + 10;
        t1 = this.rotation;
        if (t1 > 359)
          this.rotation = t1 - 359;
        t1 = this.position;
        t2 = this.speed;
        this.position = new $.Vector($.$add$ns(t1.x, t2.x), $.$add$ns(t1.y, t2.y));
        t1 = this.targetPosition;
      default:
        var t3, truncated, t4;
        if (state0 === 2 || state0 === 1 || state0 === 0 && $.$gt$n(this.position.x, $.$sub$n(t1.x, 2)) && $.$lt$n(this.position.x, $.$add$ns(t1.x, 2)) && $.$gt$n(this.position.y, $.$sub$n(t1.y, 2)) && $.$lt$n(this.position.y, $.$add$ns(t1.y, 2)))
          switch (state0) {
            case 0:
              this.remove = true;
              t2 = $.engine;
              t3 = Math.floor($.$div$n(t1.x, $.game.tileSize));
              if (isNaN(t3))
                $.throwExpression(new $.UnsupportedError("NaN"));
              if (t3 == Infinity || t3 == -Infinity)
                $.throwExpression(new $.UnsupportedError("Infinity"));
              truncated = t3 < 0 ? $.JSNumber_methods.ceilToDouble$0(t3) : $.JSNumber_methods.floorToDouble$0(t3);
              t3 = truncated == -0.0 ? 0 : truncated;
              t4 = Math.floor($.$div$n(t1.y, $.game.tileSize));
              if (isNaN(t4))
                $.throwExpression(new $.UnsupportedError("NaN"));
              if (t4 == Infinity || t4 == -Infinity)
                $.throwExpression(new $.UnsupportedError("Infinity"));
              truncated = t4 < 0 ? $.JSNumber_methods.ceilToDouble$0(t4) : $.JSNumber_methods.floorToDouble$0(t4);
              t4 = truncated == -0.0 ? 0 : truncated;
              t2.playSound$2("explosion", new $.Vector(t3, t4));
              t2 = Math.floor($.$div$n(t1.x, $.game.tileSize));
              if (isNaN(t2))
                $.throwExpression(new $.UnsupportedError("NaN"));
              if (t2 == Infinity || t2 == -Infinity)
                $.throwExpression(new $.UnsupportedError("Infinity"));
              truncated = t2 < 0 ? Math.ceil(t2) : Math.floor(t2);
              i = (truncated == -0.0 ? 0 : truncated) - 2;
            case 1:
              state0 = 0;
            case 2:
              L0:
                while (true)
                  switch (state0) {
                    case 0:
                      t2 = Math.floor($.$div$n(t1.x, $.game.tileSize));
                      if (isNaN(t2))
                        $.throwExpression(new $.UnsupportedError("NaN"));
                      if (t2 == Infinity || t2 == -Infinity)
                        $.throwExpression(new $.UnsupportedError("Infinity"));
                      truncated = t2 < 0 ? Math.ceil(t2) : Math.floor(t2);
                      if (!(i < (truncated == -0.0 ? 0 : truncated) + 2))
                        break L0;
                      t2 = Math.floor($.$div$n(t1.y, $.game.tileSize));
                      if (isNaN(t2))
                        $.throwExpression(new $.UnsupportedError("NaN"));
                      if (t2 == Infinity || t2 == -Infinity)
                        $.throwExpression(new $.UnsupportedError("Infinity"));
                      truncated = t2 < 0 ? Math.ceil(t2) : Math.floor(t2);
                      j = (truncated == -0.0 ? 0 : truncated) - 2;
                    case 2:
                      L1:
                        while (true)
                          switch (state0) {
                            case 0:
                              t2 = Math.floor($.$div$n(t1.y, $.game.tileSize));
                              if (isNaN(t2))
                                $.throwExpression(new $.UnsupportedError("NaN"));
                              if (t2 == Infinity || t2 == -Infinity)
                                $.throwExpression(new $.UnsupportedError("Infinity"));
                              truncated = t2 < 0 ? Math.ceil(t2) : Math.floor(t2);
                              if (!(j < (truncated == -0.0 ? 0 : truncated) + 2))
                                break L1;
                              t2 = $.game;
                            case 2:
                              if (state0 === 2 || state0 === 0 && t2.withinWorld$2(i, j))
                                switch (state0) {
                                  case 0:
                                    t2 = t2.tileSize;
                                    t3 = $.$add$ns(t1.x, t2);
                                    if (typeof t3 !== "number")
                                      throw $.iae(t3);
                                    t3 = i * t2 + t2 / 2 - t3;
                                    t2 = Math.pow(t3, 2);
                                    t3 = $.game.tileSize;
                                    t4 = $.$add$ns(t1.y, t3);
                                    if (typeof t4 !== "number")
                                      throw $.iae(t4);
                                    t4 = j * t3 + t3 / 2 - t4;
                                    t3 = Math.pow(t4, 2);
                                    t4 = $.game.tileSize;
                                  case 2:
                                    if (state0 === 2 || state0 === 0 && t2 + t3 < Math.pow(t4, 2))
                                      switch (state0) {
                                        case 0:
                                          t2 = $.game.world.tiles;
                                          if (i >>> 0 !== i || i >= t2.length)
                                            throw $.ioore(i);
                                          t2 = t2[i];
                                        case 2:
                                          state0 = 0;
                                          t2 = $.$index$asx($.$index$asx(t2, j), 0);
                                          t2.set$creep($.$add$ns(t2.get$creep(), 0.05));
                                      }
                                }
                              ++j;
                          }
                      ++i;
                  }
          }
    }
  },
  draw$0: function() {
    var t1, context, position, t2, t3, t4;
    t1 = $.engine.canvas;
    context = t1.$index(t1, "buffer").get$context();
    position = $.Helper_real2screen(this.position);
    t1 = $.engine;
    t2 = $.game.zoom;
    if (typeof t2 !== "number")
      throw $.iae(t2);
    if (t1.isVisible$2(position, new $.Vector(32 * t2, 32 * t2))) {
      t1 = $.getInterceptor$x(context);
      t1.save$0(context);
      t1.translate$2(context, position.x, position.y);
      t1.rotate$1(context, this.rotation * 0.017453292519943295);
      t2 = $.engine.images;
      t2 = t2.$index(t2, this.imageID);
      t3 = $.game.zoom;
      if (typeof t3 !== "number")
        throw $.iae(t3);
      t4 = 32 * t3;
      t1.drawImageScaled$5(context, t2, -16 * t3, -16 * t3, t4, t4);
      t1.restore$0(context);
    }
  },
  Spore$2: function(position, targetPosition) {
    this.imageID = "spore";
  }
},

UISymbol: {"": "Object;position>,imageID<,key>,width*,height*,size>,packets,radius<,active@,hovered<",
  checkHovered$0: function() {
    var t1, t2, t3;
    t1 = $.engine.mouseGUI.x;
    t2 = this.position.x;
    t3 = $.getInterceptor$n(t1);
    if (t3.$gt(t1, t2))
      if (t3.$lt(t1, $.$add$ns(t2, this.width))) {
        t1 = $.engine.mouseGUI.y;
        t2 = this.position.y;
        t3 = $.getInterceptor$n(t1);
        t1 = t3.$gt(t1, t2) && t3.$lt(t1, $.$add$ns(t2, this.height));
      } else
        t1 = false;
    else
      t1 = false;
    this.hovered = t1;
  },
  setActive$0: function() {
    var t1, t2, truncated, t3;
    if (this.hovered) {
      t1 = $.game;
      t2 = Math.floor($.$div$n(this.position.x, 81));
      if (isNaN(t2))
        $.throwExpression(new $.UnsupportedError("NaN"));
      if (t2 == Infinity || t2 == -Infinity)
        $.throwExpression(new $.UnsupportedError("Infinity"));
      truncated = t2 < 0 ? Math.ceil(t2) : Math.floor(t2);
      t2 = truncated == -0.0 ? 0 : truncated;
      t3 = Math.floor($.$div$n(this.position.y, 56));
      if (isNaN(t3))
        $.throwExpression(new $.UnsupportedError("NaN"));
      if (t3 == Infinity || t3 == -Infinity)
        $.throwExpression(new $.UnsupportedError("Infinity"));
      truncated = t3 < 0 ? Math.ceil(t3) : Math.floor(t3);
      t1.activeSymbol = t2 + (truncated == -0.0 ? 0 : truncated) * 6;
      this.active = true;
    } else
      this.active = false;
  },
  draw$0: function() {
    var t1, context, t2;
    t1 = $.engine.canvas;
    context = t1.$index(t1, "gui").get$context();
    if (this.active)
      $.set$fillStyle$x(context, "#696");
    else {
      t1 = $.getInterceptor$x(context);
      if (this.hovered)
        t1.set$fillStyle(context, "#232");
      else
        t1.set$fillStyle(context, "#454");
    }
    t1 = $.getInterceptor$x(context);
    t1.fillRect$4(context, $.$add$ns(this.position.x, 1), $.$add$ns(this.position.y, 1), this.width, this.height);
    t2 = $.engine.images;
    t1.drawImageScaled$5(context, t2.$index(t2, this.imageID), $.$add$ns(this.position.x, 24), $.$add$ns(this.position.y, 20), 32, 32);
    if (this.imageID === "cannon") {
      t2 = $.engine.images;
      t1.drawImageScaled$5(context, t2.$index(t2, "cannongun"), $.$add$ns(this.position.x, 24), $.$add$ns(this.position.y, 20), 32, 32);
    }
    if (this.imageID === "bomber") {
      t2 = $.engine.images;
      t1.drawImageScaled$5(context, t2.$index(t2, "bombership"), $.$add$ns(this.position.x, 24), $.$add$ns(this.position.y, 20), 32, 32);
    }
    t1.set$fillStyle(context, "#fff");
    t1.set$font(context, "10px");
    t1.set$textAlign(context, "center");
    t1.fillText$3(context, $.JSString_methods.$add($.JSString_methods.substring$2(this.imageID, 0, 1).toUpperCase(), $.JSString_methods.substring$1(this.imageID, 1)), $.$add$ns(this.position.x, this.width / 2), $.$add$ns(this.position.y, 15));
    t1.set$textAlign(context, "left");
    t1.fillText$3(context, $.JSString_methods.$add($.JSString_methods.$add("(", this.key), ")"), $.$add$ns(this.position.x, 5), $.$add$ns(this.position.y, 50));
    t1.set$textAlign(context, "right");
    t1.fillText$3(context, $.JSInt_methods.toString$0(this.packets), $.$sub$n($.$add$ns(this.position.x, this.width), 5), $.$add$ns(this.position.y, 50));
  }
},

Vector$: function(x, y) {
  return new $.Vector(x, y);
},

onMouseMove: function(evt) {
  var t1, t2;
  $.engine.updateMouse$1(evt);
  t1 = $.game;
  if (t1 != null) {
    t1.scrollingLeft = $.$eq($.engine.mouse.x, 0);
    t1 = $.game;
    t2 = $.engine;
    t1.scrollingRight = $.$eq(t2.mouse.x, $.$sub$n(t2.width, 1));
    $.game.scrollingUp = $.$eq($.engine.mouse.y, 0);
    t2 = $.game;
    t1 = $.engine;
    t2.scrollingDown = $.$eq(t1.mouse.y, $.$sub$n(t1.height, 1));
  }
},

onMouseMoveGUI: function(evt) {
  var i, t1;
  $.engine.updateMouseGUI$1(evt);
  for (i = 0; t1 = $.game.symbols, i < t1.length; ++i)
    t1[i].checkHovered$0();
},

onKeyDown: function(evt) {
  var t1, t2, key, i, t3, t4, position, height, tilesToRedraw, k;
  t1 = $.game.keyMap;
  t2 = $.getInterceptor$x(evt);
  key = t1.$index(t1, "k" + $.S(t2.get$keyCode(evt)));
  for (i = 0; t1 = $.game, t3 = t1.symbols, i < t3.length; ++i) {
    t3[i].set$active(false);
    t1 = $.game;
    t3 = t1.symbols;
    if (i >= t3.length)
      throw $.ioore(i);
    t3 = $.get$key$x(t3[i]);
    if (t3 == null ? key == null : t3 === key) {
      t1.activeSymbol = i;
      t1 = t1.symbols;
      if (i >= t1.length)
        throw $.ioore(i);
      t1[i].set$active(true);
    }
  }
  if (t1.activeSymbol !== -1) {
    t1 = $.engine.canvas;
    t1 = t1.$index(t1, "main").get$element().style;
    t1.set$cursor;
    $.setProperty$3$x(t1, "cursor", "none", "");
  }
  if (t2.get$keyCode(evt) === 112)
    $.game.faster$0();
  if (t2.get$keyCode(evt) === 113)
    $.game.slower$0();
  if (t2.get$keyCode(evt) === 46)
    for (i = 0; t1 = $.game.buildings, i < t1.length; ++i) {
      t1 = t1[i];
      if ($.get$selected$x(t1) === true)
        if (!$.$eq(t1.get$imageID(), "base")) {
          t1 = $.game;
          t3 = t1.buildings;
          if (i >= t3.length)
            throw $.ioore(i);
          t1.removeBuilding$1(t3[i]);
        }
    }
  if (t2.get$keyCode(evt) === 19) {
    t1 = $.game;
    t3 = t1.paused;
    t4 = t1.stopwatch;
    if (t3) {
      t1.resume$0;
      t3 = document.querySelector("#paused").style;
      t3.set$display;
      $.setProperty$3$x(t3, "display", "none", "");
      t1.paused = false;
      t4.start$0(t4);
    } else {
      t1.pause$0;
      t3 = document.querySelector("#paused").style;
      t3.set$display;
      $.setProperty$3$x(t3, "display", "block", "");
      t1.paused = true;
      t4.stop$0(t4);
    }
  }
  if (t2.get$keyCode(evt) === 27) {
    $.game.activeSymbol = -1;
    for (i = 0; t1 = $.game.symbols, i < t1.length; ++i)
      t1[i].set$active(false);
    for (i = 0; t1 = $.game.buildings, i < t1.length; ++i)
      $.set$selected$x(t1[i], false);
    for (i = 0; t1 = $.game.ships, i < t1.length; ++i)
      $.set$selected$x(t1[i], false);
    t1 = $.engine.canvas;
    t1 = t1.$index(t1, "main").get$element().style;
    t1.set$cursor;
    $.setProperty$3$x(t1, "cursor", "default", "");
  }
  if (t2.get$keyCode(evt) === 37)
    $.game.scrollingLeft = true;
  if (t2.get$keyCode(evt) === 38)
    $.game.scrollingUp = true;
  if (t2.get$keyCode(evt) === 39)
    $.game.scrollingRight = true;
  if (t2.get$keyCode(evt) === 40)
    $.game.scrollingDown = true;
  position = $.game.getHoveredTilePosition$0();
  if (t2.get$keyCode(evt) === 78) {
    height = $.game.getHighestTerrain$1(position);
    if (height > -1) {
      t1 = $.game.world.tiles;
      t3 = position.x;
      if (t3 >>> 0 !== t3 || t3 >= t1.length)
        throw $.ioore(t3);
      $.$index$asx($.$index$asx(t1[t3], position.y), height).set$full(false);
      tilesToRedraw = $.List_List($);
      tilesToRedraw.push(new $.Vector3(position.x, position.y, height));
      tilesToRedraw.push(new $.Vector3($.$sub$n(position.x, 1), position.y, height));
      tilesToRedraw.push(new $.Vector3(position.x, $.$sub$n(position.y, 1), height));
      tilesToRedraw.push(new $.Vector3($.$add$ns(position.x, 1), position.y, height));
      tilesToRedraw.push(new $.Vector3(position.x, $.$add$ns(position.y, 1), height));
      $.game.redrawTile$1(tilesToRedraw);
    }
  }
  if (t2.get$keyCode(evt) === 77) {
    height = $.game.getHighestTerrain$1(position);
    if (height < 9) {
      t1 = $.game.world.tiles;
      t3 = position.x;
      if (t3 >>> 0 !== t3 || t3 >= t1.length)
        throw $.ioore(t3);
      t4 = height + 1;
      $.$index$asx($.$index$asx(t1[t3], position.y), t4).set$full(true);
      tilesToRedraw = $.List_List($);
      tilesToRedraw.push(new $.Vector3(position.x, position.y, t4));
      tilesToRedraw.push(new $.Vector3($.$sub$n(position.x, 1), position.y, t4));
      tilesToRedraw.push(new $.Vector3(position.x, $.$sub$n(position.y, 1), t4));
      tilesToRedraw.push(new $.Vector3($.$add$ns(position.x, 1), position.y, t4));
      tilesToRedraw.push(new $.Vector3(position.x, $.$add$ns(position.y, 1), t4));
      $.game.redrawTile$1(tilesToRedraw);
    }
  }
  if (t2.get$keyCode(evt) === 66) {
    tilesToRedraw = $.List_List($);
    for (k = 0; t1 = position.x, t3 = position.y, k < 10; ++k) {
      t4 = $.game.world.tiles;
      if (t1 >>> 0 !== t1 || t1 >= t4.length)
        throw $.ioore(t1);
      $.$index$asx($.$index$asx(t4[t1], t3), k).set$full(false);
    }
    tilesToRedraw.push(new $.Vector3(t1, t3, 0));
    tilesToRedraw.push(new $.Vector3($.$sub$n(position.x, 1), position.y, 0));
    tilesToRedraw.push(new $.Vector3(position.x, $.$sub$n(position.y, 1), 0));
    tilesToRedraw.push(new $.Vector3($.$add$ns(position.x, 1), position.y, 0));
    tilesToRedraw.push(new $.Vector3(position.x, $.$add$ns(position.y, 1), 0));
    $.game.redrawTile$1(tilesToRedraw);
  }
  t1 = $.game;
  if (t1.mode === "TERRAFORM") {
    if (t2.get$keyCode(evt) === 46) {
      t1 = t1.world.terraform;
      t3 = position.x;
      if (t3 >>> 0 !== t3 || t3 >= t1.length)
        throw $.ioore(t3);
      $.$indexSet$ax($.$index$asx(t1[t3], position.y), "target", -1);
      t3 = $.game.world.terraform;
      t1 = position.x;
      if (t1 >>> 0 !== t1 || t1 >= t3.length)
        throw $.ioore(t1);
      $.$indexSet$ax($.$index$asx(t3[t1], position.y), "progress", 0);
    }
    if ($.$ge$n(t2.get$keyCode(evt), 48) && $.$le$n(t2.get$keyCode(evt), 57)) {
      t1 = $.game;
      t1.terraformingHeight = $.$sub$n(t2.get$keyCode(evt), 49);
      if (t1.terraformingHeight === -1)
        t1.terraformingHeight = 9;
    }
  }
},

onKeyUp: function(evt) {
  var t1 = $.getInterceptor$x(evt);
  if (t1.get$keyCode(evt) === 37)
    $.game.scrollingLeft = false;
  if (t1.get$keyCode(evt) === 38)
    $.game.scrollingUp = false;
  if (t1.get$keyCode(evt) === 39)
    $.game.scrollingRight = false;
  if (t1.get$keyCode(evt) === 40)
    $.game.scrollingDown = false;
},

onClickGUI: function(evt) {
  var i, t1, t2;
  for (i = 0; t1 = $.game.buildings, i < t1.length; ++i)
    $.set$selected$x(t1[i], false);
  for (i = 0; t1 = $.game.ships, i < t1.length; ++i)
    $.set$selected$x(t1[i], false);
  $.engine.playSound$1("click");
  for (i = 0; t1 = $.game, t2 = t1.symbols, i < t2.length; ++i)
    t2[i].setActive$0();
  if (t1.activeSymbol !== -1) {
    t1 = $.engine.canvas;
    t1 = t1.$index(t1, "main").get$element().style;
    t1.set$cursor;
    $.setProperty$3$x(t1, "cursor", "none", "");
  }
},

onDoubleClick: function(evt) {
  var t1, i, t2, selectShips;
  for (t1 = $.game, i = 0; t2 = t1.ships, selectShips = false, i < t2.length; ++i)
    if (t2[i].get$hovered()) {
      selectShips = true;
      break;
    }
  if (selectShips)
    for (i = 0; t1 = $.game.ships, i < t1.length; ++i)
      $.set$selected$x(t1[i], true);
},

onMouseDown: function(evt) {
  var position, t1;
  if ($.get$which$x(evt) === 1) {
    position = $.game.getHoveredTilePosition$0();
    t1 = $.engine.mouse;
    if (t1.dragStart == null)
      t1.dragStart = new $.Vector(position.x, position.y);
  }
},

onMouseUp: function(evt) {
  var t1, position, t2, i, t3, buildingSelected, buildingSelected0, soundSuccess, t4;
  t1 = $.get$which$x(evt);
  if (t1 === 1) {
    position = $.game.getHoveredTilePosition$0();
    t1 = $.game;
    if (t1.mode === "TERRAFORM") {
      t1 = t1.world.terraform;
      t2 = position.x;
      if (t2 >>> 0 !== t2 || t2 >= t1.length)
        throw $.ioore(t2);
      $.$indexSet$ax($.$index$asx(t1[t2], position.y), "target", $.game.terraformingHeight);
      t2 = $.game.world.terraform;
      t1 = position.x;
      if (t1 >>> 0 !== t1 || t1 >= t2.length)
        throw $.ioore(t1);
      $.$indexSet$ax($.$index$asx(t2[t1], position.y), "progress", 0);
    }
    for (i = 0; t1 = $.game.ships, i < t1.length; ++i)
      $.control$1$x(t1[i], position);
    for (i = 0; t1 = $.game, t2 = t1.buildings, i < t2.length; ++i) {
      t2 = t2[i];
      if (t2.get$built() && $.get$selected$x(t2) === true && t2.get$canMove()) {
        t2 = $.get$size$x(t2);
        t3 = $.game.buildings;
        if (i >= t3.length)
          throw $.ioore(i);
        if (t1.canBePlaced$3(position, t2, t3[i])) {
          t1 = $.game.buildings;
          if (i >= t1.length)
            throw $.ioore(i);
          t1[i].set$operating(false);
          t1 = $.game.buildings;
          if (i >= t1.length)
            throw $.ioore(i);
          t1[i].set$weaponTargetPosition(null);
          t1 = $.game.buildings;
          if (i >= t1.length)
            throw $.ioore(i);
          $.set$status$x(t1[i], "RISING");
          t1 = $.game.buildings;
          if (i >= t1.length)
            throw $.ioore(i);
          t1[i].set$moveTargetPosition(position);
          t1 = $.game.buildings;
          if (i >= t1.length)
            throw $.ioore(i);
          t1[i].calculateVector$0();
        }
      }
    }
    if (t1.mode === "DEFAULT") {
      for (buildingSelected = null, i = 0; t1 = $.game.buildings, i < t1.length; ++i) {
        t1 = t1[i];
        $.set$selected$x(t1, t1.get$hovered());
        t1 = $.game.buildings;
        if (i >= t1.length)
          throw $.ioore(i);
        buildingSelected0 = t1[i];
        if ($.get$selected$x(buildingSelected0) === true)
          buildingSelected = buildingSelected0;
      }
      if (buildingSelected != null)
        if (buildingSelected.get$active()) {
          t1 = document.querySelector("#deactivate").style;
          t1.set$display;
          $.setProperty$3$x(t1, "display", "block", "");
          t1 = document.querySelector("#activate").style;
          t1.set$display;
          $.setProperty$3$x(t1, "display", "none", "");
        } else {
          t1 = document.querySelector("#deactivate").style;
          t1.set$display;
          $.setProperty$3$x(t1, "display", "none", "");
          t1 = document.querySelector("#activate").style;
          t1.set$display;
          $.setProperty$3$x(t1, "display", "block", "");
        }
      else {
        t1 = document.querySelector("#deactivate").style;
        t1.set$display;
        $.setProperty$3$x(t1, "display", "none", "");
        t1 = document.querySelector("#activate").style;
        t1.set$display;
        $.setProperty$3$x(t1, "display", "none", "");
      }
    }
    $.engine.mouse.dragStart = null;
    t1 = $.game;
    t2 = t1.activeSymbol;
    if (t2 !== -1) {
      t1 = t1.symbols;
      if (t2 >>> 0 !== t2 || t2 >= t1.length)
        throw $.ioore(t2);
      t2 = $.substring$2$s(t1[t2].get$imageID(), 0, 1).toUpperCase();
      t1 = $.game;
      t3 = t1.symbols;
      t1 = t1.activeSymbol;
      if (t1 >>> 0 !== t1 || t1 >= t3.length)
        throw $.ioore(t1);
      $.JSString_methods.$add(t2, $.substring$1$s(t3[t1].get$imageID(), 1));
      for (soundSuccess = false, i = 0; t1 = $.game, t2 = t1.ghosts, i < t2.length; ++i) {
        t2 = t2[i];
        t3 = t1.symbols;
        t4 = t1.activeSymbol;
        if (t4 >>> 0 !== t4 || t4 >= t3.length)
          throw $.ioore(t4);
        if (t1.canBePlaced$3(t2, $.get$size$x(t3[t4]), null)) {
          t1 = $.game;
          t2 = t1.ghosts;
          if (i >= t2.length)
            throw $.ioore(i);
          t2 = t2[i];
          t3 = t1.symbols;
          t4 = t1.activeSymbol;
          if (t4 >>> 0 !== t4 || t4 >= t3.length)
            throw $.ioore(t4);
          t1.addBuilding$2(t2, t3[t4].get$imageID());
          soundSuccess = true;
        }
      }
      t1 = $.engine;
      if (soundSuccess)
        t1.playSound$1("click");
      else
        t1.playSound$1("failure");
    }
  } else if (t1 === 3) {
    $.game.mode = "DEFAULT";
    for (i = 0; t1 = $.game.buildings, i < t1.length; ++i) {
      $.set$selected$x(t1[i], false);
      t1 = document.querySelector("#deactivate").style;
      t1.set$display;
      $.setProperty$3$x(t1, "display", "none", "");
      t1 = document.querySelector("#activate").style;
      t1.set$display;
      $.setProperty$3$x(t1, "display", "none", "");
    }
    for (i = 0; t1 = $.game.ships, i < t1.length; ++i)
      $.set$selected$x(t1[i], false);
    t1 = document.querySelector("#terraform");
    t1.get$attributes;
    new $._ElementAttributeMap(t1)._element.setAttribute("value", "Terraform Off");
    $.game.clearSymbols$0();
  }
},

doneResizing: function() {
  var width, height, t1, t2, truncated;
  width = window.innerWidth;
  height = window.innerHeight;
  t1 = $.engine;
  t1.width = width;
  t1.height = height;
  t2 = Math.floor($.$div$n(width, 2));
  if (isNaN(t2))
    $.throwExpression(new $.UnsupportedError("NaN"));
  if (t2 == Infinity || t2 == -Infinity)
    $.throwExpression(new $.UnsupportedError("Infinity"));
  truncated = t2 < 0 ? Math.ceil(t2) : Math.floor(t2);
  t1.halfWidth = truncated == -0.0 ? 0 : truncated;
  t1 = $.engine;
  t2 = Math.floor($.$div$n(height, 2));
  if (isNaN(t2))
    $.throwExpression(new $.UnsupportedError("NaN"));
  if (t2 == Infinity || t2 == -Infinity)
    $.throwExpression(new $.UnsupportedError("Infinity"));
  truncated = t2 < 0 ? Math.ceil(t2) : Math.floor(t2);
  t1.halfHeight = truncated == -0.0 ? 0 : truncated;
  t1 = $.engine.canvas;
  t1.$index(t1, "main").updateRect$2(width, height);
  t1 = $.engine.canvas;
  t1.$index(t1, "levelfinal").updateRect$2(width, height);
  t1 = $.engine.canvas;
  t1.$index(t1, "buffer").updateRect$2(width, height);
  t1 = $.engine.canvas;
  t1.$index(t1, "collection").updateRect$2(width, height);
  t1 = $.engine.canvas;
  t1.$index(t1, "creeper").updateRect$2(width, height);
  t1 = $.engine.canvas;
  t1 = t1.$index(t1, "gui");
  t2 = $.engine.canvas;
  $.set$top$x(t1, t2.$index(t2, "gui").get$element().offsetTop);
  t2 = $.engine.canvas;
  t2 = t2.$index(t2, "gui");
  t1 = $.engine.canvas;
  $.set$left$x(t2, t1.$index(t1, "gui").get$element().offsetLeft);
  t1 = $.game;
  if (t1 != null) {
    t1.copyTerrain$0();
    $.game.drawCollection$0();
    $.game.drawCreeper$0();
  }
},

HeightMap$: function(seed, size, low_value, high_value) {
  var t1 = new $.HeightMap(seed, size, low_value, high_value, null, null, $.List_List($), null);
  t1.HeightMap$4(seed, size, low_value, high_value);
  return t1;
},

Helper_tiled2screen: function(pVector) {
  var t1, t2, t3, t4, t5, t6, t7, t8;
  t1 = $.engine;
  t2 = t1.halfWidth;
  t3 = $.getInterceptor$x(pVector);
  t4 = t3.get$x(pVector);
  if (typeof t4 !== "number")
    return $.Helper_tiled2screen$bailout(1, pVector, t2, t3, t4);
  t5 = $.game;
  t6 = t5.scroll;
  t7 = t6.x;
  if (typeof t7 !== "number")
    return $.Helper_tiled2screen$bailout(2, pVector, t2, t3, t4, t7);
  t8 = t5.tileSize;
  t7 = (t4 - t7) * t8;
  t5 = t5.zoom;
  if (typeof t5 !== "number")
    return $.Helper_tiled2screen$bailout(3, pVector, t2, t3, t5, t7);
  if (typeof t2 !== "number")
    throw t2.$add();
  t7 = t2 + t7 * t5;
  t1 = t1.halfHeight;
  t3 = t3.get$y(pVector);
  if (typeof t3 !== "number")
    return $.Helper_tiled2screen$bailout(4, 0, t1, t3, t7);
  t6 = t6.y;
  if (typeof t6 !== "number")
    return $.Helper_tiled2screen$bailout(5, 0, t1, t3, t7, t6);
  if (typeof t1 !== "number")
    throw t1.$add();
  return new $.Vector(t7, t1 + (t3 - t6) * t8 * t5);
},

Helper_tiled2screen$bailout: function(state0, pVector, t1, t2, t3, t4) {
  switch (state0) {
    case 0:
      t1 = $.engine.halfWidth;
      t2 = $.getInterceptor$x(pVector);
      t3 = t2.get$x(pVector);
    case 1:
      state0 = 0;
      t4 = $.game.scroll.x;
    case 2:
      state0 = 0;
      t4 = $.$mul$n($.$sub$n(t3, t4), $.game.tileSize);
      t3 = $.game.zoom;
    case 3:
      state0 = 0;
      t3 = $.$mul$n(t4, t3);
      if (typeof t1 !== "number")
        throw t1.$add();
      t3 = $.$add$ns(t1, t3);
      t1 = $.engine.halfHeight;
      t2 = t2.get$y(pVector);
    case 4:
      state0 = 0;
      t4 = $.game.scroll.y;
    case 5:
      state0 = 0;
      t4 = $.$mul$n($.$sub$n(t2, t4), $.game.tileSize);
      t2 = $.game.zoom;
    case 6:
      state0 = 0;
      t2 = $.$mul$n(t4, t2);
      if (typeof t1 !== "number")
        throw t1.$add();
      return new $.Vector(t3, $.$add$ns(t1, t2));
  }
},

Helper_real2screen: function(pVector) {
  var t1, t2, t3, t4, t5, t6, t7, t8;
  t1 = $.engine;
  t2 = t1.halfWidth;
  t3 = $.getInterceptor$x(pVector);
  t4 = t3.get$x(pVector);
  if (typeof t4 !== "number")
    return $.Helper_real2screen$bailout(1, pVector, t2, t3, t4);
  t5 = $.game;
  t6 = t5.scroll;
  t7 = t6.x;
  if (typeof t7 !== "number")
    return $.Helper_real2screen$bailout(2, pVector, t2, t3, t4, t5, t7);
  t8 = t5.tileSize;
  t7 = t4 - t7 * t8;
  t4 = t5.zoom;
  if (typeof t4 !== "number")
    return $.Helper_real2screen$bailout(3, pVector, t2, t3, 0, t7, t4);
  if (typeof t2 !== "number")
    throw t2.$add();
  t7 = t2 + t7 * t4;
  t1 = t1.halfHeight;
  t3 = t3.get$y(pVector);
  if (typeof t3 !== "number")
    return $.Helper_real2screen$bailout(4, 0, t1, t3, 0, 0, t7);
  t6 = t6.y;
  if (typeof t6 !== "number")
    return $.Helper_real2screen$bailout(5, 0, t1, t3, t6, t5, t7);
  if (typeof t1 !== "number")
    throw t1.$add();
  return new $.Vector(t7, t1 + (t3 - t6 * t8) * t4);
},

Helper_real2screen$bailout: function(state0, pVector, t1, t2, t3, t4, t5) {
  switch (state0) {
    case 0:
      t1 = $.engine.halfWidth;
      t2 = $.getInterceptor$x(pVector);
      t3 = t2.get$x(pVector);
    case 1:
      state0 = 0;
      t4 = $.game;
      t5 = t4.scroll.x;
    case 2:
      state0 = 0;
      t4 = $.$sub$n(t3, $.$mul$n(t5, t4.tileSize));
      t5 = $.game.zoom;
    case 3:
      state0 = 0;
      t5 = $.$mul$n(t4, t5);
      if (typeof t1 !== "number")
        throw t1.$add();
      t5 = $.$add$ns(t1, t5);
      t1 = $.engine.halfHeight;
      t2 = t2.get$y(pVector);
    case 4:
      state0 = 0;
      t4 = $.game;
      t3 = t4.scroll.y;
    case 5:
      state0 = 0;
      t4 = $.$sub$n(t2, $.$mul$n(t3, t4.tileSize));
      t3 = $.game.zoom;
    case 6:
      state0 = 0;
      t3 = $.$mul$n(t4, t3);
      if (typeof t1 !== "number")
        throw t1.$add();
      return new $.Vector(t5, $.$add$ns(t1, t3));
  }
},

Helper_clone: function(pObject) {
  var newObject, i;
  if (typeof pObject !== "object" || pObject === null || pObject.constructor !== Array || !!pObject.fixed$length)
    return $.Helper_clone$bailout(1, pObject);
  newObject = $.List_List($);
  for (i = 0; i < pObject.length; ++i)
    newObject.push(pObject[i]);
  return newObject;
},

Helper_clone$bailout: function(state0, pObject) {
  var newObject, t1, i;
  newObject = $.List_List($);
  for (t1 = $.getInterceptor$asx(pObject), i = 0; $.JSNumber_methods.$lt(i, t1.get$length(pObject)); ++i)
    newObject.push(t1.$index(pObject, i));
  return newObject;
},

Helper_randomInt: function(from, to, seed) {
  var max;
  if (typeof to !== "number")
    return $.Helper_randomInt$bailout(1, from, to);
  max = to - from + 1;
  if (max < 0)
    $.throwExpression(new $.ArgumentError("negative max: " + $.S(max)));
  if (max > 4294967295)
    max = 4294967295;
  return (Math.random() * max >>> 0) + from;
},

Helper_randomInt$bailout: function(state0, from, to) {
  var max, t1;
  max = $.$add$ns($.$sub$n(to, from), 1);
  t1 = $.getInterceptor$n(max);
  if (t1.$lt(max, 0))
    $.throwExpression(new $.ArgumentError("negative max: " + $.S(max)));
  if (t1.$gt(max, 4294967295))
    max = 4294967295;
  return (Math.random() * max >>> 0) + from;
},

Helper_shuffle: function(list) {
  var len, max, i, i0, max0, p, t1, t;
  len = list.length;
  for (max = len - 1 - 0 + 1, i = len; i0 = i - 1, i > 0; i = i0) {
    max0 = max > 4294967295 ? 4294967295 : max;
    p = (Math.random() * max0 >>> 0) + 0;
    t1 = list.length;
    if (i0 < 0 || i0 >= t1)
      throw $.ioore(i0);
    t = list[i0];
    if (p < 0 || p >= t1)
      throw $.ioore(p);
    list[i0] = list[p];
    list[p] = t;
  }
},

main: function() {
  var t1 = new $.Engine(60, 16.666666666666668, null, null, null, null, null, null, null, null, null, null, null, [], new $.Mouse(0, 0, true, null, null), new $.Mouse(0, 0, true, null, null), null, null, null, null);
  t1.canvas = new $.HashMap(0, null, null, null, null);
  t1.sounds = new $.HashMap(0, null, null, null, null);
  t1.images = new $.HashMap(0, null, null, null, null);
  t1.init$0();
  $.engine = t1;
  $.engine.loadImages$1(new $.main_closure());
}}],
["dart._collection.dev", {
ListIterable: {"": "IterableBase;",
  get$iterator: function(_) {
    return new $.ListIterator(this, this.get$length(this), 0, null);
  },
  $asIterable: null
},

SubListIterable: {"": "ListIterable;_iterable,_liblib0$_start,_endOrLength",
  get$_endIndex: function() {
    var $length, t1;
    $length = $.get$length$asx(this._iterable);
    t1 = this._endOrLength;
    if (t1 == null || $.$gt$n(t1, $length))
      return $length;
    return t1;
  },
  get$_startIndex: function() {
    var $length, t1;
    $length = $.get$length$asx(this._iterable);
    t1 = this._liblib0$_start;
    if ($.$gt$n(t1, $length))
      return $length;
    return t1;
  },
  get$length: function(_) {
    var $length, t1, t2;
    $length = $.get$length$asx(this._iterable);
    if (typeof $length !== "number")
      return this.get$length$bailout2(1, $length);
    t1 = this._liblib0$_start;
    if (typeof t1 !== "number")
      return this.get$length$bailout2(2, $length, t1);
    if (t1 >= $length)
      return 0;
    t2 = this._endOrLength;
    if (typeof t2 !== "number")
      return this.get$length$bailout2(3, $length, t1, t2);
    if (t2 >= $length)
      return $length - t1;
    return t2 - t1;
  },
  get$length$bailout2: function(state0, $length, t1, t2) {
    switch (state0) {
      case 0:
        $length = $.get$length$asx(this._iterable);
      case 1:
        state0 = 0;
        t1 = this._liblib0$_start;
      case 2:
        state0 = 0;
        if ($.$ge$n(t1, $length))
          return 0;
        t2 = this._endOrLength;
      case 3:
        state0 = 0;
        if (t2 == null || $.$ge$n(t2, $length))
          return $.$sub$n($length, t1);
        return $.$sub$n(t2, t1);
    }
  },
  elementAt$1: function(_, index) {
    var t1, realIndex;
    if (typeof index !== "number")
      return this.elementAt$1$bailout2(1, index);
    t1 = this.get$_startIndex();
    if (typeof t1 !== "number")
      return this.elementAt$1$bailout2(2, index, t1);
    realIndex = t1 + index;
    if (!(index < 0)) {
      t1 = this.get$_endIndex();
      if (typeof t1 !== "number")
        return this.elementAt$1$bailout2(3, index, t1, realIndex);
      t1 = realIndex >= t1;
    } else
      t1 = true;
    if (t1) {
      t1 = this.get$length(this);
      throw $.wrapException(new $.RangeError("value " + $.S(index) + " not in range 0.." + $.S(t1)));
    }
    return $.elementAt$1$ax(this._iterable, realIndex);
  },
  elementAt$1$bailout2: function(state0, index, t1, realIndex) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = this.get$_startIndex();
      case 2:
        state0 = 0;
        realIndex = $.$add$ns(t1, index);
      case 3:
        if (state0 === 3 || state0 === 0 && !$.$lt$n(index, 0))
          switch (state0) {
            case 0:
              t1 = this.get$_endIndex();
            case 3:
              state0 = 0;
              t1 = $.$ge$n(realIndex, t1);
          }
        else
          t1 = true;
        if (t1) {
          t1 = this.get$length(this);
          throw $.wrapException(new $.RangeError("value " + $.S(index) + " not in range 0.." + $.S(t1)));
        }
        return $.elementAt$1$ax(this._iterable, realIndex);
    }
  },
  $asIterable: null
},

ListIterator: {"": "Object;_iterable,_liblib0$_length,_index,_liblib0$_current",
  get$current: function() {
    return this._liblib0$_current;
  },
  moveNext$0: function() {
    var t1, $length, t2;
    t1 = this._iterable;
    $length = $.get$length$asx(t1);
    if (typeof $length !== "number")
      return this.moveNext$0$bailout(1, t1, $length);
    t2 = this._liblib0$_length;
    if (typeof t2 !== "number")
      return this.moveNext$0$bailout(2, t1, $length, t2);
    if (t2 !== $length)
      throw $.wrapException(new $.ConcurrentModificationError(t1));
    t2 = this._index;
    if (t2 >= $length) {
      this._liblib0$_current = null;
      return false;
    }
    this._liblib0$_current = $.elementAt$1$ax(t1, t2);
    this._index = this._index + 1;
    return true;
  },
  moveNext$0$bailout: function(state0, t1, $length, t2) {
    switch (state0) {
      case 0:
        t1 = this._iterable;
        $length = $.get$length$asx(t1);
      case 1:
        state0 = 0;
        t2 = this._liblib0$_length;
      case 2:
        state0 = 0;
        if (!$.$eq(t2, $length))
          throw $.wrapException(new $.ConcurrentModificationError(t1));
        t2 = this._index;
        if ($.JSNumber_methods.$ge(t2, $length)) {
          this._liblib0$_current = null;
          return false;
        }
        this._liblib0$_current = $.elementAt$1$ax(t1, t2);
        this._index = this._index + 1;
        return true;
    }
  }
},

MappedIterable: {"": "IterableBase;_iterable,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  get$iterator: function(_) {
    var t1 = this._iterable;
    return new $.MappedIterator(null, t1.get$iterator(t1), this._f);
  },
  get$length: function(_) {
    var t1 = this._iterable;
    return t1.get$length(t1);
  },
  elementAt$1: function(_, index) {
    var t1 = this._iterable;
    return this._f$1(t1.elementAt$1(t1, index));
  },
  $asIterable: function (S, T) { return [T]; }
},

MappedIterator: {"": "Iterator;_liblib0$_current,_iterator,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  moveNext$0: function() {
    var t1 = this._iterator;
    if (t1.moveNext$0() === true) {
      this._liblib0$_current = this._f$1(t1.get$current());
      return true;
    }
    this._liblib0$_current = null;
    return false;
  },
  get$current: function() {
    return this._liblib0$_current;
  }
},

MappedListIterable: {"": "ListIterable;_liblib0$_source,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  get$length: function(_) {
    return $.get$length$asx(this._liblib0$_source);
  },
  elementAt$1: function(_, index) {
    return this._f$1($.elementAt$1$ax(this._liblib0$_source, index));
  },
  $asIterable: function (S, T) { return [T]; }
},

WhereIterable: {"": "IterableBase;_iterable,_f",
  get$iterator: function(_) {
    return new $.WhereIterator($.get$iterator$ax(this._iterable), this._f);
  },
  $asIterable: null
},

WhereIterator: {"": "Iterator;_iterator,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  moveNext$0: function() {
    for (var t1 = this._iterator; t1.moveNext$0() === true;)
      if (this._f$1(t1.get$current()) === true)
        return true;
    return false;
  },
  get$current: function() {
    return this._iterator.get$current();
  }
},

SkipIterable: {"": "IterableBase;_iterable,_skipCount",
  get$iterator: function(_) {
    return new $.SkipIterator($.get$iterator$ax(this._iterable), this._skipCount);
  },
  $asIterable: null
},

SkipIterator: {"": "Iterator;_iterator,_skipCount",
  moveNext$0: function() {
    var t1, i, t2;
    t1 = this._iterator;
    i = 0;
    while (true) {
      t2 = this._skipCount;
      if (typeof t2 !== "number")
        throw $.iae(t2);
      if (!(i < t2))
        break;
      t1.moveNext$0();
      ++i;
    }
    this._skipCount = 0;
    return t1.moveNext$0();
  },
  get$current: function() {
    return this._iterator.get$current();
  },
  SkipIterator$2: function(_iterator, _skipCount) {
  }
},

ToString__emitPair_closure: {"": "Closure;box_0,result_1,visiting_2",
  call$2: function(k, v) {
    var t1, t2;
    t1 = this.box_0;
    if (!t1.first_0)
      this.result_1.write$1(", ");
    t1.first_0 = false;
    t1 = this.result_1;
    t2 = this.visiting_2;
    $.ToString__emitObject(k, t1, t2);
    t1.write$1(": ");
    $.ToString__emitObject(v, t1, t2);
  }
},

Arrays_copy: function(src, srcStart, dst, dstStart, count) {
  var i, j, t1, t2, t3;
  if (typeof src !== "string" && (typeof src !== "object" || src === null || src.constructor !== Array && !$.isJsIndexable(src, src[$.dispatchPropertyName])))
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (srcStart < dstStart)
    for (i = srcStart + count - 1, j = dstStart + count - 1, t1 = dst.length, t2 = src.length; i >= srcStart; --i, --j) {
      if (i < 0 || i >= t2)
        throw $.ioore(i);
      t3 = src[i];
      if (j < 0 || j >= t1)
        throw $.ioore(j);
      dst[j] = t3;
    }
  else
    for (t1 = dst.length, t2 = src.length, j = dstStart, i = srcStart; i < srcStart + count; ++i, ++j) {
      if (i < 0 || i >= t2)
        throw $.ioore(i);
      t3 = src[i];
      if (j < 0 || j >= t1)
        throw $.ioore(j);
      dst[j] = t3;
    }
},

Arrays_copy$bailout: function(state0, src, srcStart, dst, dstStart, count) {
  var i, j, t1, t2, t3;
  if (srcStart < dstStart)
    for (i = srcStart + count - 1, j = dstStart + count - 1, t1 = $.getInterceptor$asx(src), t2 = dst.length; i >= srcStart; --i, --j) {
      t3 = t1.$index(src, i);
      if (j < 0 || j >= t2)
        throw $.ioore(j);
      dst[j] = t3;
    }
  else
    for (t1 = $.getInterceptor$asx(src), t2 = dst.length, j = dstStart, i = srcStart; i < srcStart + count; ++i, ++j) {
      t3 = t1.$index(src, i);
      if (j < 0 || j >= t2)
        throw $.ioore(j);
      dst[j] = t3;
    }
},

Arrays_indexOf: function(a, element, startIndex, endIndex) {
  var i;
  if (startIndex >= a.length)
    return -1;
  if (startIndex < 0)
    startIndex = 0;
  for (i = startIndex; i < endIndex; ++i) {
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    if ($.$eq(a[i], element))
      return i;
  }
  return -1;
},

IterableMixinWorkaround_forEach: function(iterable, f) {
  var t1;
  for (t1 = $.get$iterator$ax(iterable); t1.moveNext$0();)
    f.call$1(t1.get$current());
},

IterableMixinWorkaround__rangeCheck: function(list, start, end) {
  if (start < 0 || start > list.length)
    throw $.wrapException(new $.RangeError("value " + start + " not in range 0.." + list.length));
  if (end < start || end > list.length)
    throw $.wrapException(new $.RangeError("value " + end + " not in range " + start + ".." + list.length));
},

IterableMixinWorkaround_setRangeList: function(list, start, end, from, skipCount) {
  var $length, otherStart, otherList;
  $.IterableMixinWorkaround__rangeCheck(list, start, end);
  $length = end - start;
  if ($length === 0)
    return;
  if (skipCount < 0)
    throw $.wrapException(new $.ArgumentError(skipCount));
  otherStart = skipCount;
  otherList = from;
  if ($.JSNumber_methods.$gt(otherStart + $length, $.get$length$asx(otherList)))
    throw $.wrapException(new $.StateError("Not enough elements"));
  $.Arrays_copy(otherList, otherStart, list, start, $length);
},

Sort_insertionSort_: function(a, left, right, compare) {
  var i, el, j, t1, t2, j0;
  for (i = left + 1; i <= right; ++i) {
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    el = a[i];
    j = i;
    while (true) {
      if (j > left) {
        t1 = j - 1;
        if (t1 < 0 || t1 >= a.length)
          throw $.ioore(t1);
        t1 = $.$gt$n(compare.call$2(a[t1], el), 0);
      } else
        t1 = false;
      t2 = a.length;
      if (!t1)
        break;
      j0 = j - 1;
      if (j0 < 0 || j0 >= t2)
        throw $.ioore(j0);
      t1 = a[j0];
      if (j < 0 || j >= t2)
        throw $.ioore(j);
      a[j] = t1;
      j = j0;
    }
    if (j < 0 || j >= t2)
      throw $.ioore(j);
    a[j] = el;
  }
},

Sort__dualPivotQuicksort: function(a, left, right, compare) {
  var sixth, index1, index5, index3, index2, index4, t1, el1, el2, el3, el4, el5, t0, t2, less, great, pivots_are_equal, k, ak, comp, great0, less0, t3;
  sixth = $.JSNumber_methods.$tdiv(right - left + 1, 6);
  index1 = left + sixth;
  index5 = right - sixth;
  index3 = $.JSInt_methods.$tdiv(left + right, 2);
  index2 = index3 - sixth;
  index4 = index3 + sixth;
  t1 = a.length;
  if (index1 >>> 0 !== index1 || index1 >= t1)
    throw $.ioore(index1);
  el1 = a[index1];
  if (index2 >>> 0 !== index2 || index2 >= t1)
    throw $.ioore(index2);
  el2 = a[index2];
  if (index3 >>> 0 !== index3 || index3 >= t1)
    throw $.ioore(index3);
  el3 = a[index3];
  if (index4 >>> 0 !== index4 || index4 >= t1)
    throw $.ioore(index4);
  el4 = a[index4];
  if (index5 >>> 0 !== index5 || index5 >= t1)
    throw $.ioore(index5);
  el5 = a[index5];
  if ($.$gt$n(compare.call$2(el1, el2), 0)) {
    t0 = el2;
    el2 = el1;
    el1 = t0;
  }
  if ($.$gt$n(compare.call$2(el4, el5), 0)) {
    t0 = el5;
    el5 = el4;
    el4 = t0;
  }
  if ($.$gt$n(compare.call$2(el1, el3), 0)) {
    t0 = el3;
    el3 = el1;
    el1 = t0;
  }
  if ($.$gt$n(compare.call$2(el2, el3), 0)) {
    t0 = el3;
    el3 = el2;
    el2 = t0;
  }
  if ($.$gt$n(compare.call$2(el1, el4), 0)) {
    t0 = el4;
    el4 = el1;
    el1 = t0;
  }
  if ($.$gt$n(compare.call$2(el3, el4), 0)) {
    t0 = el4;
    el4 = el3;
    el3 = t0;
  }
  if ($.$gt$n(compare.call$2(el2, el5), 0)) {
    t0 = el5;
    el5 = el2;
    el2 = t0;
  }
  if ($.$gt$n(compare.call$2(el2, el3), 0)) {
    t0 = el3;
    el3 = el2;
    el2 = t0;
  }
  if ($.$gt$n(compare.call$2(el4, el5), 0)) {
    t0 = el5;
    el5 = el4;
    el4 = t0;
  }
  t1 = a.length;
  if (index1 >= t1)
    throw $.ioore(index1);
  a[index1] = el1;
  if (index3 >= t1)
    throw $.ioore(index3);
  a[index3] = el3;
  if (index5 >= t1)
    throw $.ioore(index5);
  a[index5] = el5;
  if (left < 0 || left >= t1)
    throw $.ioore(left);
  t2 = a[left];
  if (index2 >= t1)
    throw $.ioore(index2);
  a[index2] = t2;
  if (right < 0 || right >= t1)
    throw $.ioore(right);
  t2 = a[right];
  if (index4 >= t1)
    throw $.ioore(index4);
  a[index4] = t2;
  less = left + 1;
  great = right - 1;
  pivots_are_equal = $.$eq(compare.call$2(el2, el4), 0);
  if (pivots_are_equal)
    for (k = less; k <= great; ++k) {
      if (k >= a.length)
        throw $.ioore(k);
      ak = a[k];
      comp = compare.call$2(ak, el2);
      t1 = $.getInterceptor(comp);
      if (t1.$eq(comp, 0))
        continue;
      if (t1.$lt(comp, 0)) {
        if (k !== less) {
          t1 = a.length;
          if (less >= t1)
            throw $.ioore(less);
          t2 = a[less];
          if (k >= t1)
            throw $.ioore(k);
          a[k] = t2;
          a[less] = ak;
        }
        ++less;
      } else
        for (; true;) {
          if (great < 0 || great >= a.length)
            throw $.ioore(great);
          comp = compare.call$2(a[great], el2);
          t1 = $.getInterceptor$n(comp);
          if (t1.$gt(comp, 0)) {
            --great;
            continue;
          } else {
            t1 = t1.$lt(comp, 0);
            t2 = a.length;
            great0 = great - 1;
            if (t1) {
              if (less >= t2)
                throw $.ioore(less);
              t1 = a[less];
              if (k >= t2)
                throw $.ioore(k);
              a[k] = t1;
              less0 = less + 1;
              if (great >= t2)
                throw $.ioore(great);
              a[less] = a[great];
              a[great] = ak;
              great = great0;
              less = less0;
              break;
            } else {
              if (great >= t2)
                throw $.ioore(great);
              t1 = a[great];
              if (k >= t2)
                throw $.ioore(k);
              a[k] = t1;
              a[great] = ak;
              great = great0;
              break;
            }
          }
        }
    }
  else
    for (k = less; k <= great; ++k) {
      if (k >= a.length)
        throw $.ioore(k);
      ak = a[k];
      if ($.$lt$n(compare.call$2(ak, el2), 0)) {
        if (k !== less) {
          t1 = a.length;
          if (less >= t1)
            throw $.ioore(less);
          t2 = a[less];
          if (k >= t1)
            throw $.ioore(k);
          a[k] = t2;
          a[less] = ak;
        }
        ++less;
      } else if ($.$gt$n(compare.call$2(ak, el4), 0))
        for (; true;) {
          if (great < 0 || great >= a.length)
            throw $.ioore(great);
          if ($.$gt$n(compare.call$2(a[great], el4), 0)) {
            --great;
            if (great < k)
              break;
            continue;
          } else {
            if (great >= a.length)
              throw $.ioore(great);
            t1 = $.$lt$n(compare.call$2(a[great], el2), 0);
            great0 = great - 1;
            t2 = a.length;
            if (t1) {
              if (less >= t2)
                throw $.ioore(less);
              t1 = a[less];
              if (k >= t2)
                throw $.ioore(k);
              a[k] = t1;
              less0 = less + 1;
              if (great >= t2)
                throw $.ioore(great);
              a[less] = a[great];
              a[great] = ak;
              great = great0;
              less = less0;
            } else {
              if (great >= t2)
                throw $.ioore(great);
              t1 = a[great];
              if (k >= t2)
                throw $.ioore(k);
              a[k] = t1;
              a[great] = ak;
              great = great0;
            }
            break;
          }
        }
    }
  t1 = less - 1;
  t2 = a.length;
  if (t1 >= t2)
    throw $.ioore(t1);
  t3 = a[t1];
  if (left >= t2)
    throw $.ioore(left);
  a[left] = t3;
  a[t1] = el2;
  t1 = great + 1;
  if (t1 < 0 || t1 >= t2)
    throw $.ioore(t1);
  t3 = a[t1];
  if (right >= t2)
    throw $.ioore(right);
  a[right] = t3;
  a[t1] = el4;
  t1 = less - 2;
  if (t1 - left <= 32)
    $.Sort_insertionSort_(a, left, t1, compare);
  else
    $.Sort__dualPivotQuicksort(a, left, t1, compare);
  t1 = great + 2;
  if (right - t1 <= 32)
    $.Sort_insertionSort_(a, t1, right, compare);
  else
    $.Sort__dualPivotQuicksort(a, t1, right, compare);
  if (pivots_are_equal)
    return;
  if (less < index1 && great > index5) {
    while (true) {
      if (less >= a.length)
        throw $.ioore(less);
      if (!$.$eq(compare.call$2(a[less], el2), 0))
        break;
      ++less;
    }
    while (true) {
      if (great < 0 || great >= a.length)
        throw $.ioore(great);
      if (!$.$eq(compare.call$2(a[great], el4), 0))
        break;
      --great;
    }
    for (k = less; k <= great; ++k) {
      if (k >= a.length)
        throw $.ioore(k);
      ak = a[k];
      if ($.$eq(compare.call$2(ak, el2), 0)) {
        if (k !== less) {
          t1 = a.length;
          if (less >= t1)
            throw $.ioore(less);
          t2 = a[less];
          if (k >= t1)
            throw $.ioore(k);
          a[k] = t2;
          a[less] = ak;
        }
        ++less;
      } else if ($.$eq(compare.call$2(ak, el4), 0))
        for (; true;) {
          if (great < 0 || great >= a.length)
            throw $.ioore(great);
          if ($.$eq(compare.call$2(a[great], el4), 0)) {
            --great;
            if (great < k)
              break;
            continue;
          } else {
            if (great >= a.length)
              throw $.ioore(great);
            t1 = $.$lt$n(compare.call$2(a[great], el2), 0);
            great0 = great - 1;
            t2 = a.length;
            if (t1) {
              if (less >= t2)
                throw $.ioore(less);
              t1 = a[less];
              if (k >= t2)
                throw $.ioore(k);
              a[k] = t1;
              less0 = less + 1;
              if (great >= t2)
                throw $.ioore(great);
              a[less] = a[great];
              a[great] = ak;
              great = great0;
              less = less0;
            } else {
              if (great >= t2)
                throw $.ioore(great);
              t1 = a[great];
              if (k >= t2)
                throw $.ioore(k);
              a[k] = t1;
              a[great] = ak;
              great = great0;
            }
            break;
          }
        }
    }
    if (great - less <= 32)
      $.Sort_insertionSort_(a, less, great, compare);
    else
      $.Sort__dualPivotQuicksort(a, less, great, compare);
  } else if (great - less <= 32)
    $.Sort_insertionSort_(a, less, great, compare);
  else
    $.Sort__dualPivotQuicksort(a, less, great, compare);
},

ToString__emitValue: function(i, result, visiting) {
  var t1, isList, t2, first, e;
  t1 = $.getInterceptor$ax(visiting);
  t1.add$1(visiting, i);
  isList = typeof i === "object" && i !== null && (i.constructor === Array || !!$.getInterceptor(i).$isList);
  result.write$1(isList ? "[" : "{");
  for (t2 = $.get$iterator$ax(i), first = true; t2.moveNext$0() === true; first = false) {
    e = t2.get$current();
    if (!first)
      result.write$1(", ");
    $.ToString__emitObject(e, result, visiting);
  }
  result.write$1(isList ? "]" : "}");
  t1.removeLast$0(visiting);
},

ToString__emitObject: function(o, result, visiting) {
  if (typeof o === "object" && o !== null && (o.constructor === Array || !!$.getInterceptor(o).$isIterable)) {
    o;
    if ($.ToString__containsRef(visiting, o))
      result.write$1(typeof o === "object" && o !== null && (o.constructor === Array || !!$.getInterceptor(o).$isList) ? "[...]" : "{...}");
    else
      $.ToString__emitValue(o, result, visiting);
  } else if (typeof o === "object" && o !== null && !!$.getInterceptor(o).$isMap)
    if ($.ToString__containsRef(visiting, o))
      result.write$1("{...}");
    else
      $.ToString__emitPair(o, result, visiting);
  else
    result.write$1(o);
},

ToString__containsRef: function(i, ref) {
  var t1;
  for (t1 = $.get$iterator$ax(i); t1.moveNext$0() === true;)
    if (t1.get$current() === ref)
      return true;
  return false;
},

ToString__emitPair: function(m, result, visiting) {
  var t1, t2;
  t1 = {};
  t2 = $.getInterceptor$ax(visiting);
  t2.add$1(visiting, m);
  result.write$1("{");
  t1.first_0 = true;
  m.forEach$1(m, new $.ToString__emitPair_closure(t1, result, visiting));
  result.write$1("}");
  t2.removeLast$0(visiting);
}}],
["dart.async", {
_Completer: {"": "Object;"},

_AsyncCompleter: {"": "_Completer;future,_isComplete",
  _setFutureValue$1: function(value) {
    var milliseconds;
    $.get$_asyncCallbacks().push(new $._AsyncCompleter__setFutureValue_closure(value, this.future));
    if (!$._callbacksAreEnqueued) {
      milliseconds = $.Duration_0.get$inMilliseconds();
      $.TimerImpl$(milliseconds < 0 ? 0 : milliseconds, $._asyncRunCallback$closure);
      $._callbacksAreEnqueued = true;
    }
  },
  _setFutureError$1: function(error) {
    var milliseconds;
    $.get$_asyncCallbacks().push(new $._AsyncCompleter__setFutureError_closure(error, this.future));
    if (!$._callbacksAreEnqueued) {
      milliseconds = $.Duration_0.get$inMilliseconds();
      $.TimerImpl$(milliseconds < 0 ? 0 : milliseconds, $._asyncRunCallback$closure);
      $._callbacksAreEnqueued = true;
    }
  }
},

_AsyncCompleter__setFutureValue_closure: {"": "Closure;value_0,future_1",
  call$0: function() {
    this.future_1._setValue$1(this.value_0);
  }
},

_AsyncCompleter__setFutureError_closure: {"": "Closure;error_0,future_1",
  call$0: function() {
    this.future_1._setError$1(this.error_0);
  }
},

_FutureListenerWrapper: {"": "Object;future,_nextListener@",
  _sendValue$1: function(value) {
    this.future._setValue$1(value);
  },
  _sendError$1: function(error) {
    this.future._setError$1(error);
  }
},

_FutureImpl: {"": "Object;_state@,_resultOrListeners<",
  then$2$onError: function(f, onError) {
    var t1;
    if (onError == null) {
      t1 = new $._ThenFuture(f, null, 0, null);
      t1._subscribeTo$1(this);
      return t1;
    }
    t1 = new $._SubscribeFuture(onError, f, null, 0, null);
    t1._subscribeTo$1(this);
    return t1;
  },
  then$1: function(f) {
    return this.then$2$onError(f, null);
  },
  catchError$2$test: function(f, test) {
    var t1 = new $._CatchErrorFuture(test, f, null, 0, null);
    t1._subscribeTo$1(this);
    return t1;
  },
  catchError$1: function(f) {
    return this.catchError$2$test(f, null);
  },
  _setValue$1: function(value) {
    var listeners, listeners0;
    if (this._state !== 0)
      throw $.wrapException(new $.StateError("Future already completed"));
    listeners = this._removeListeners$0();
    this._state = 1;
    this._resultOrListeners = value;
    for (; listeners != null; listeners = listeners0) {
      listeners0 = listeners.get$_nextListener();
      listeners.set$_nextListener(null);
      listeners._sendValue$1(value);
    }
  },
  get$_setValue: function() {
    return new $.BoundClosure$1(this, "_setValue$1");
  },
  _setError$1: function(error) {
    var listeners, listeners0;
    if (this._state !== 0)
      throw $.wrapException(new $.StateError("Future already completed"));
    listeners = this._removeListeners$0();
    this._state = 2;
    this._resultOrListeners = error;
    if (listeners == null) {
      this._scheduleUnhandledError$0();
      return;
    }
    do {
      listeners0 = listeners.get$_nextListener();
      listeners.set$_nextListener(null);
      listeners._sendError$1(error);
      if (listeners0 != null) {
        listeners = listeners0;
        continue;
      } else
        break;
    } while (true);
  },
  get$_setError: function() {
    return new $.BoundClosure$1(this, "_setError$1");
  },
  _scheduleUnhandledError$0: function() {
    this._state = (this._state | 4) >>> 0;
    $.get$_asyncCallbacks().push(new $._FutureImpl__scheduleUnhandledError_closure(this));
    if (!$._callbacksAreEnqueued) {
      var milliseconds = $.Duration_0.get$inMilliseconds();
      $.TimerImpl$(milliseconds < 0 ? 0 : milliseconds, $._asyncRunCallback$closure);
      $._callbacksAreEnqueued = true;
    }
  },
  _addListener$1: function(listener) {
    var t1, milliseconds;
    t1 = this._state;
    if (t1 !== 0) {
      this._state = (t1 & 4294967291) >>> 0;
      $.get$_asyncCallbacks().push(new $._FutureImpl__addListener_closure(this, listener));
      if (!$._callbacksAreEnqueued) {
        milliseconds = $.Duration_0.get$inMilliseconds();
        $.TimerImpl$(milliseconds < 0 ? 0 : milliseconds, $._asyncRunCallback$closure);
        $._callbacksAreEnqueued = true;
      }
    } else {
      listener.set$_nextListener(this._resultOrListeners);
      this._resultOrListeners = listener;
    }
  },
  _removeListeners$0: function() {
    var current, prev, next;
    current = this._resultOrListeners;
    this._resultOrListeners = null;
    for (prev = null; current != null; prev = current, current = next) {
      next = current.get$_nextListener();
      current.set$_nextListener(prev);
    }
    return prev;
  },
  _chain$1: function(future) {
    var t1 = this._state;
    if (t1 === 0)
      this._addListener$1(new $._FutureListenerWrapper(future, null));
    else if (t1 === 1)
      future._setValue$1(this._resultOrListeners);
    else {
      this._state = (t1 & 4294967291) >>> 0;
      future._setError$1(this._resultOrListeners);
    }
  },
  _setOrChainValue$1: function(result) {
    if (typeof result === "object" && result !== null && !!$.getInterceptor(result).$isFuture) {
      result;
      if (!!$.getInterceptor(result).$is_FutureImpl) {
        result._chain$1(this);
        return;
      } else {
        result.then$2$onError(this.get$_setValue(), this.get$_setError());
        return;
      }
    } else
      this._setValue$1(result);
  },
  _FutureImpl$immediate$1: function(value) {
    this._state = 1;
    this._resultOrListeners = value;
  },
  $is_FutureImpl: true,
  $isFuture: true
},

_FutureImpl__FutureImpl$wait_handleError: {"": "Closure;box_0",
  call$1: function(error) {
    var t1 = this.box_0;
    if (t1.values_1 != null) {
      t1.values_1 = null;
      t1 = t1.completer_0;
      t1.completeError$2;
      if (t1._isComplete)
        $.throwExpression(new $.StateError("Future already completed"));
      t1._isComplete = true;
      t1._setFutureError$1(error);
    }
  }
},

_FutureImpl__FutureImpl$wait_closure: {"": "Closure;box_0,pos_1",
  call$1: function(value) {
    var t1, t2, t3;
    t1 = this.box_0;
    t2 = t1.values_1;
    if (t2 == null)
      return;
    t3 = this.pos_1;
    if (t3 >>> 0 !== t3 || t3 >= t2.length)
      throw $.ioore(t3);
    t2[t3] = value;
    t1.remaining_2 = $.$sub$n(t1.remaining_2, 1);
    if ($.$eq(t1.remaining_2, 0)) {
      t2 = t1.completer_0;
      t1 = t1.values_1;
      t2.complete$1;
      if (t2._isComplete)
        $.throwExpression(new $.StateError("Future already completed"));
      t2._isComplete = true;
      t2._setFutureValue$1(t1);
    }
  }
},

_FutureImpl__scheduleUnhandledError_closure: {"": "Closure;this_0",
  call$0: function() {
    var t1, t2, error, trace;
    t1 = this.this_0;
    t2 = t1.get$_state();
    if ((t2 & 4) !== 0) {
      t1.set$_state((t2 & 4294967291) >>> 0);
      error = t1.get$_resultOrListeners();
      $.Primitives_printString("Uncaught Error: " + $.S(error));
      trace = $.getAttachedStackTrace(error);
      if (trace != null)
        $.Primitives_printString("Stack Trace:\n" + $.S(trace) + "\n");
      throw $.wrapException(error);
    }
  }
},

_FutureImpl__addListener_closure: {"": "Closure;this_0,listener_1",
  call$0: function() {
    var t1, t2, value;
    t1 = this.this_0;
    t2 = t1.get$_state();
    value = t1.get$_resultOrListeners();
    t1 = this.listener_1;
    if (t2 === 1)
      t1._sendValue$1(value);
    else
      t1._sendError$1(value);
  }
},

_TransformFuture: {"": "_FutureImpl;_nextListener@",
  _subscribeTo$1: function(future) {
    future._addListener$1(this);
  },
  $as_FutureImpl: function (S, T) { return [T]; },
  $asFuture: function (S, T) { return [T]; }
},

_ThenFuture: {"": "_TransformFuture;_onValue,_nextListener,_state,_resultOrListeners",
  _onValue$1: function(arg0) {
    return this._onValue.call$1(arg0);
  },
  _sendValue$1: function(value) {
    var result, e, s, exception, t1;
    result = null;
    try {
      result = this._onValue$1(value);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      s = $.getTraceFromException(exception);
      this._setError$1($._asyncError(e, s));
      return;
    }

    this._setOrChainValue$1(result);
  },
  _sendError$1: function(error) {
    this._setError$1(error);
  },
  $as_FutureImpl: function (S, T) { return [T]; },
  $asFuture: function (S, T) { return [T]; }
},

_CatchErrorFuture: {"": "_TransformFuture;_test,_onError,_nextListener,_state,_resultOrListeners",
  _test$1: function(arg0) {
    return this._test.call$1(arg0);
  },
  _onError$1: function(arg0) {
    return this._onError.call$1(arg0);
  },
  _sendValue$1: function(value) {
    this._setValue$1(value);
  },
  _sendError$1: function(error) {
    var matchesTest, e, s, result, e0, s0, exception, t1;
    if (this._test != null) {
      matchesTest = null;
      try {
        matchesTest = this._test$1(error);
      } catch (exception) {
        t1 = $.unwrapException(exception);
        e = t1;
        s = $.getTraceFromException(exception);
        this._setError$1($._asyncError(e, s));
        return;
      }

      if (matchesTest !== true) {
        this._setError$1(error);
        return;
      }
    }
    result = null;
    try {
      result = this._onError$1(error);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e0 = t1;
      s0 = $.getTraceFromException(exception);
      this._setError$1($._asyncError(e0, s0));
      return;
    }

    this._setOrChainValue$1(result);
  },
  $as_FutureImpl: null,
  $asFuture: null
},

_SubscribeFuture: {"": "_ThenFuture;_onError,_onValue,_nextListener,_state,_resultOrListeners",
  _onError$1: function(arg0) {
    return this._onError.call$1(arg0);
  },
  _sendError$1: function(error) {
    var result, e, s, exception, t1;
    result = null;
    try {
      result = this._onError$1(error);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      s = $.getTraceFromException(exception);
      this._setError$1($._asyncError(e, s));
      return;
    }

    this._setOrChainValue$1(result);
  },
  $as_FutureImpl: function (S, T) { return [T]; },
  $asFuture: function (S, T) { return [T]; }
},

_WhenFuture: {"": "_TransformFuture;_action,_nextListener,_state,_resultOrListeners",
  _action$0: function() {
    return this._action.call$0();
  },
  _sendValue$1: function(value) {
    var result, resultFuture, e, s, t1, exception;
    try {
      result = this._action$0();
      t1 = result;
      if (typeof t1 === "object" && t1 !== null && !!$.getInterceptor(t1).$isFuture) {
        resultFuture = result;
        resultFuture.then$2$onError(new $._WhenFuture__sendValue_closure(this, value), this.get$_setError());
        return;
      }
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      s = $.getTraceFromException(exception);
      this._setError$1($._asyncError(e, s));
      return;
    }

    this._setValue$1(value);
  },
  _sendError$1: function(error) {
    var t1, result, resultFuture, e, s, t2, exception;
    t1 = {};
    t1.error_0 = error;
    try {
      result = this._action$0();
      t2 = result;
      if (typeof t2 === "object" && t2 !== null && !!$.getInterceptor(t2).$isFuture) {
        resultFuture = result;
        resultFuture.then$2$onError(new $._WhenFuture__sendError_closure(t1, this), this.get$_setError());
        return;
      }
    } catch (exception) {
      t2 = $.unwrapException(exception);
      e = t2;
      s = $.getTraceFromException(exception);
      t1.error_0 = $._asyncError(e, s);
    }

    this._setError$1(t1.error_0);
  },
  $as_FutureImpl: null,
  $asFuture: null
},

_WhenFuture__sendValue_closure: {"": "Closure;this_0,value_1",
  call$1: function(_) {
    this.this_0._setValue$1(this.value_1);
  }
},

_WhenFuture__sendError_closure: {"": "Closure;box_0,this_1",
  call$1: function(_) {
    this.this_1._setError$1(this.box_0.error_0);
  }
},

Stream: {"": "Object;",
  get$length: function(_) {
    var t1, future;
    t1 = {};
    future = new $._FutureImpl(0, null);
    t1.count_0 = 0;
    this.listen$4$cancelOnError$onDone$onError(new $.Stream_length_closure(t1), true, new $.Stream_length_closure0(t1, future), future.get$_setError());
    return future;
  },
  elementAt$1: function(_, index) {
    var t1, t2, future;
    t1 = {};
    t1.index_0 = index;
    t2 = t1.index_0;
    if (typeof t2 !== "number" || Math.floor(t2) !== t2 || $.$lt$n(t2, 0))
      throw $.wrapException(new $.ArgumentError(t2));
    future = new $._FutureImpl(0, null);
    t1.subscription_1 = null;
    t1.subscription_1 = this.listen$4$cancelOnError$onDone$onError(new $.Stream_elementAt_closure(t1, future), true, new $.Stream_elementAt_closure0(future), future.get$_setError());
    return future;
  }
},

Stream_length_closure: {"": "Closure;box_0",
  call$1: function(_) {
    var t1 = this.box_0;
    t1.count_0 = $.$add$ns(t1.count_0, 1);
  }
},

Stream_length_closure0: {"": "Closure;box_0,future_1",
  call$0: function() {
    this.future_1._setValue$1(this.box_0.count_0);
  }
},

Stream_elementAt_closure: {"": "Closure;box_0,future_1",
  call$1: function(value) {
    var t1 = this.box_0;
    if ($.$eq(t1.index_0, 0)) {
      t1.subscription_1.cancel$0();
      this.future_1._setValue$1(value);
      return;
    }
    t1.index_0 = $.$sub$n(t1.index_0, 1);
  }
},

Stream_elementAt_closure0: {"": "Closure;future_2",
  call$0: function() {
    this.future_2._setError$1(new $.StateError("Not enough elements for elementAt"));
  }
},

StreamSubscription: {"": "Object;"},

EventSink: {"": "Object;"},

_throwDelayed_closure: {"": "Closure;error_0,stackTrace_1",
  call$0: function() {
    var t1, t2, trace, t3;
    t1 = this.stackTrace_1;
    if (t1 != null)
      $.Primitives_printString($.JSNull_methods.toString$0(t1));
    t2 = this.error_0;
    trace = $.getAttachedStackTrace(t2);
    t3 = $.getInterceptor(trace);
    if (trace != null && !t3.$eq(trace, t1))
      $.Primitives_printString(t3.toString$0(trace));
    throw $.wrapException(t2);
  }
},

_ForwardingStream: {"": "Stream;",
  listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
    var t1, t2, t3;
    t1 = new $._ForwardingStreamSubscription(this, true === cancelOnError, null, onData, onError, onDone);
    t2 = t1.get$_handleData();
    t3 = t1.get$_handleError();
    t1._subscription = t1._stream._source.listen$3$onDone$onError(t2, t1.get$_handleDone(), t3);
    return t1;
  },
  listen$3$onDone$onError: function(onData, onDone, onError) {
    return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
  },
  _handleData$2: function(data, sink) {
    sink._liblib2$_onData$1(data);
  }
},

_BaseStreamSubscription: {"": "Object;",
  _liblib2$_onData$1: function(arg0) {
    return this._liblib2$_onData.call$1(arg0);
  },
  _onError$1: function(arg0) {
    return this._onError.call$1(arg0);
  },
  _onDone$0: function() {
    return this._onDone.call$0();
  },
  _BaseStreamSubscription$3: function(_onData, _onError, _onDone) {
  }
},

_ForwardingStreamSubscription: {"": "_BaseStreamSubscription;_stream,_cancelOnError<,_subscription@,_liblib2$_onData,_onError,_onDone",
  cancel$0: function() {
    var t1 = this._subscription;
    if (t1 != null) {
      t1.cancel$0();
      this._subscription = null;
    }
  },
  _sendError$1: function(error) {
    this._onError$1(error);
    if (this._cancelOnError) {
      this._subscription.cancel$0();
      this._subscription = null;
    }
  },
  _handleData$1: function(data) {
    this._stream._handleData$2(data, this);
  },
  get$_handleData: function() {
    return new $.BoundClosure$1(this, "_handleData$1");
  },
  _handleError$1: function(error) {
    this._onError$1(error);
    if (this._cancelOnError) {
      this._subscription.cancel$0();
      this._subscription = null;
    }
  },
  get$_handleError: function() {
    return new $.BoundClosure$1(this, "_handleError$1");
  },
  _handleDone$0: function() {
    this._subscription = null;
    var t1 = this._subscription;
    if (t1 != null) {
      t1.cancel$0();
      this._subscription = null;
    }
    this._onDone$0();
  },
  get$_handleDone: function() {
    return new $.BoundClosure$0(this, "_handleDone$0");
  },
  _ForwardingStreamSubscription$5: function(_stream, onData, onError, onDone, _cancelOnError) {
    var t1, t2;
    t1 = this.get$_handleData();
    t2 = this.get$_handleError();
    this._subscription = this._stream._source.listen$3$onDone$onError(t1, this.get$_handleDone(), t2);
  }
},

_WhereStream: {"": "_ForwardingStream;_test,_source",
  _test$1: function(arg0) {
    return this._test.call$1(arg0);
  },
  _handleData$2: function(inputEvent, sink) {
    var satisfies, e, s, exception, t1;
    satisfies = null;
    try {
      satisfies = this._test$1(inputEvent);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      s = $.getTraceFromException(exception);
      t1 = sink;
      t1._onError$1($._asyncError(e, s));
      if (t1.get$_cancelOnError()) {
        t1.get$_subscription().cancel$0();
        t1.set$_subscription(null);
      }
      return;
    }

    if (satisfies === true)
      sink._liblib2$_onData$1(inputEvent);
  }
},

_MapStream: {"": "_ForwardingStream;_transform,_source",
  _transform$1: function(arg0) {
    return this._transform.call$1(arg0);
  },
  _handleData$2: function(inputEvent, sink) {
    var outputEvent, e, s, exception, t1;
    outputEvent = null;
    try {
      outputEvent = this._transform$1(inputEvent);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      s = $.getTraceFromException(exception);
      t1 = sink;
      t1._onError$1($._asyncError(e, s));
      if (t1.get$_cancelOnError()) {
        t1.get$_subscription().cancel$0();
        t1.set$_subscription(null);
      }
      return;
    }

    sink._liblib2$_onData$1(outputEvent);
  }
},

_SkipStream: {"": "_ForwardingStream;_remaining,_source",
  _handleData$2: function(inputEvent, sink) {
    var t1, t2;
    t1 = this._remaining;
    t2 = $.getInterceptor$n(t1);
    if (t2.$gt(t1, 0)) {
      this._remaining = t2.$sub(t1, 1);
      return;
    }
    sink._liblib2$_onData$1(inputEvent);
    return;
  }
},

_attachStackTrace: function(o, st) {
  var t1;
  if (o == null || typeof o === "boolean" || typeof o === "number" || typeof o === "string")
    return;
  t1 = $.get$_stackTraceExpando();
  t1.$indexSet(t1, o, st);
},

getAttachedStackTrace: function(o) {
  var t1, values;
  if (o == null || typeof o === "boolean" || typeof o === "number" || typeof o === "string")
    return;
  t1 = $.get$_stackTraceExpando();
  values = $.Primitives_getProperty(o, "expando$values");
  return values == null ? null : $.Primitives_getProperty(values, t1._getKey$0());
},

_asyncRunCallback: function() {
  var callbacks, i, callback, remainingCallbacks, newCallbacks, exception, milliseconds;
  for (; $.get$_asyncCallbacks().length !== 0;) {
    callbacks = $.get$_asyncCallbacks();
    $._asyncCallbacks = [];
    for (i = 0; $.$lt$n(i, $.get$length$asx(callbacks)); i = $.$add$ns(i, 1)) {
      callback = $.$index$asx(callbacks, i);
      $.$indexSet$ax(callbacks, i, null);
      try {
        callback.call$0();
      } catch (exception) {
        $.unwrapException(exception);
        i = $.$add$ns(i, 1);
        remainingCallbacks = $.sublist$1$ax(callbacks, i);
        newCallbacks = $.get$_asyncCallbacks();
        $._asyncCallbacks = [];
        $.JSArray_methods.addAll$1($.get$_asyncCallbacks(), remainingCallbacks);
        $.JSArray_methods.addAll$1($.get$_asyncCallbacks(), newCallbacks);
        milliseconds = $.JSNumber_methods.$tdiv($.Duration_0._duration, 1000);
        $.TimerImpl$(milliseconds < 0 ? 0 : milliseconds, $._asyncRunCallback$closure);
        throw exception;
      }

    }
  }
  $._callbacksAreEnqueued = false;
},

_AsyncCompleter$: function() {
  return new $._AsyncCompleter(new $._FutureImpl(0, null), false);
},

_FutureImpl__FutureImpl$wait: function(futures) {
  var t1, t2, t3, future, pos;
  t1 = {};
  t1.completer_0 = null;
  t1.values_1 = null;
  t2 = new $._FutureImpl__FutureImpl$wait_handleError(t1);
  t1.remaining_2 = 0;
  for (t3 = $.JSArray_methods.get$iterator(futures); t3.moveNext$0();) {
    future = t3.get$current();
    pos = t1.remaining_2;
    t1.remaining_2 = $.$add$ns(pos, 1);
    future.catchError$1(t2).then$1(new $._FutureImpl__FutureImpl$wait_closure(t1, pos));
  }
  if ($.$eq(t1.remaining_2, 0)) {
    t1 = new $._FutureImpl(0, null);
    t1._state = 1;
    t1._resultOrListeners = $.List_empty;
    return t1;
  }
  t1.values_1 = $.List_List(t1.remaining_2);
  t1.completer_0 = $._AsyncCompleter$();
  return t1.completer_0.future;
},

_throwDelayed: function(error, stackTrace) {
  var milliseconds;
  $.get$_asyncCallbacks().push(new $._throwDelayed_closure(error, stackTrace));
  if (!$._callbacksAreEnqueued) {
    milliseconds = $.Duration_0.get$inMilliseconds();
    $.TimerImpl$(milliseconds < 0 ? 0 : milliseconds, $._asyncRunCallback$closure);
    $._callbacksAreEnqueued = true;
  }
},

_nullDataHandler: function(value) {
},

_nullErrorHandler: function(error) {
  $._throwDelayed(error, null);
},

_nullDoneHandler: function() {
},

_asyncError: function(error, stackTrace) {
  if (stackTrace == null)
    return error;
  if ($.getAttachedStackTrace(error) != null)
    return error;
  $._attachStackTrace(error, stackTrace);
  return error;
}}],
["dart.collection", {
HashMap_values_closure: {"": "Closure;this_0",
  call$1: function(each) {
    return $.$index$asx(this.this_0, each);
  }
},

HashMapKeyIterable: {"": "IterableBase;_map",
  get$length: function(_) {
    return this._map._length;
  },
  get$iterator: function(_) {
    var t1 = this._map;
    return new $.HashMapKeyIterator(t1, t1._computeKeys$0(), 0, null);
  },
  $asIterable: null
},

HashMapKeyIterator: {"": "Object;_map,_keys,_offset,_liblib1$_current",
  get$current: function() {
    return this._liblib1$_current;
  },
  moveNext$0: function() {
    var keys, offset, t1;
    keys = this._keys;
    offset = this._offset;
    t1 = this._map;
    if (keys !== t1._keys)
      throw $.wrapException(new $.ConcurrentModificationError(t1));
    else if (offset >= keys.length) {
      this._liblib1$_current = null;
      return false;
    } else {
      this._liblib1$_current = keys[offset];
      this._offset = offset + 1;
      return true;
    }
  }
},

LinkedHashMap_values_closure: {"": "Closure;this_0",
  call$1: function(each) {
    return $.$index$asx(this.this_0, each);
  }
},

LinkedHashMapCell: {"": "Object;_key<,_value@,_next@,_previous@"},

LinkedHashMapKeyIterable: {"": "IterableBase;_map",
  get$length: function(_) {
    return this._map._length;
  },
  get$iterator: function(_) {
    var t1 = this._map;
    t1 = new $.LinkedHashMapKeyIterator(t1, t1._modifications, null, null);
    t1._cell = t1._map._first;
    return t1;
  },
  $asIterable: null
},

LinkedHashMapKeyIterator: {"": "Object;_map,_modifications,_cell,_liblib1$_current",
  get$current: function() {
    return this._liblib1$_current;
  },
  moveNext$0: function() {
    var t1 = this._map;
    if (this._modifications !== t1._modifications)
      throw $.wrapException(new $.ConcurrentModificationError(t1));
    else {
      t1 = this._cell;
      if (t1 == null) {
        this._liblib1$_current = null;
        return false;
      } else {
        this._liblib1$_current = t1.get$_key();
        this._cell = this._cell.get$_next();
        return true;
      }
    }
  },
  LinkedHashMapKeyIterator$2: function(_map, _modifications) {
    this._cell = this._map._first;
  }
},

HashMap: {"": "Object;_length,_strings,_nums,_rest,_keys",
  get$length: function(_) {
    return this._length;
  },
  get$keys: function() {
    return new $.HashMapKeyIterable(this);
  },
  get$values: function(_) {
    return new $.MappedIterable(new $.HashMapKeyIterable(this), new $.HashMap_values_closure(this));
  },
  containsKey$1: function(key) {
    var strings, nums, rest;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      return strings == null ? false : strings[key] != null;
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      return nums == null ? false : nums[key] != null;
    } else {
      rest = this._rest;
      if (rest == null)
        return false;
      return $.HashMap__findBucketIndex(rest[$.get$hashCode$(key) & 0x3ffffff], key) >= 0;
    }
  },
  $index: function(_, key) {
    var strings, t1, entry, nums, rest, bucket, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null)
        t1 = null;
      else {
        entry = strings[key];
        t1 = entry === strings ? null : entry;
      }
      return t1;
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null)
        t1 = null;
      else {
        entry = nums[key];
        t1 = entry === nums ? null : entry;
      }
      return t1;
    } else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[$.get$hashCode$(key) & 0x3ffffff];
      index = $.HashMap__findBucketIndex(bucket, key);
      return index < 0 ? null : bucket[index + 1];
    }
  },
  $indexSet: function(_, key, value) {
    var strings, table, nums, rest, hash, bucket, t1, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null) {
        table = Object.create(null);
        if (table == null)
          table["<non-identifier-key>"] = table;
        else
          table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._strings = table;
        strings = table;
      }
      if (strings[key] == null) {
        this._length = this._length + 1;
        this._keys = null;
      }
      if (value == null)
        strings[key] = strings;
      else
        strings[key] = value;
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null) {
        table = Object.create(null);
        if (table == null)
          table["<non-identifier-key>"] = table;
        else
          table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._nums = table;
        nums = table;
      }
      if (nums[key] == null) {
        this._length = this._length + 1;
        this._keys = null;
      }
      if (value == null)
        nums[key] = nums;
      else
        nums[key] = value;
    } else {
      rest = this._rest;
      if (rest == null) {
        table = Object.create(null);
        if (table == null)
          table["<non-identifier-key>"] = table;
        else
          table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._rest = table;
        rest = table;
      }
      hash = $.get$hashCode$(key) & 0x3ffffff;
      bucket = rest[hash];
      if (bucket == null) {
        t1 = [key, value];
        if (t1 == null)
          rest[hash] = rest;
        else
          rest[hash] = t1;
        this._length = this._length + 1;
        this._keys = null;
      } else {
        index = $.HashMap__findBucketIndex(bucket, key);
        if (index >= 0)
          bucket[index + 1] = value;
        else {
          bucket.push(key, value);
          this._length = this._length + 1;
          this._keys = null;
        }
      }
    }
  },
  remove$1: function(_, key) {
    var rest, bucket, index;
    if (typeof key === "string" && key !== "__proto__")
      return this._removeHashTableEntry$2(this._strings, key);
    else if (typeof key === "number" && (key & 0x3ffffff) === key)
      return this._removeHashTableEntry$2(this._nums, key);
    else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[$.get$hashCode$(key) & 0x3ffffff];
      index = $.HashMap__findBucketIndex(bucket, key);
      if (index < 0)
        return;
      this._length = this._length - 1;
      this._keys = null;
      return bucket.splice(index, 2)[1];
    }
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i1(this, "remove$1", receiver);
  },
  clear$0: function(_) {
    if (this._length > 0) {
      this._keys = null;
      this._rest = null;
      this._nums = null;
      this._strings = null;
      this._length = 0;
    }
  },
  forEach$1: function(_, action) {
    var keys, $length, i, key;
    keys = this._computeKeys$0();
    for ($length = keys.length, i = 0; i < $length; ++i) {
      key = keys[i];
      action.call$2(key, this.$index(this, key));
      if (keys !== this._keys)
        throw $.wrapException(new $.ConcurrentModificationError(this));
    }
  },
  toString$0: function(_) {
    var result = new $.StringBuffer("");
    result._contents = "";
    $.ToString__emitPair(this, result, $.List_List($));
    return result._contents;
  },
  _computeKeys$0: function() {
    var t1, result, strings, names, entries, index, i, nums, rest, bucket, $length, i0;
    t1 = this._keys;
    if (t1 != null)
      return t1;
    result = $.List_List(this._length);
    strings = this._strings;
    if (strings != null) {
      names = Object.getOwnPropertyNames(strings);
      entries = names.length;
      for (index = 0, i = 0; i < entries; ++i) {
        result[index] = names[i];
        ++index;
      }
    } else
      index = 0;
    nums = this._nums;
    if (nums != null) {
      names = Object.getOwnPropertyNames(nums);
      entries = names.length;
      for (i = 0; i < entries; ++i) {
        result[index] = +names[i];
        ++index;
      }
    }
    rest = this._rest;
    if (rest != null) {
      names = Object.getOwnPropertyNames(rest);
      entries = names.length;
      for (i = 0; i < entries; ++i) {
        bucket = rest[names[i]];
        $length = bucket.length;
        for (i0 = 0; i0 < $length; i0 += 2) {
          result[index] = bucket[i0];
          ++index;
        }
      }
    }
    this._keys = result;
    return result;
  },
  _removeHashTableEntry$2: function(table, key) {
    var entry, value;
    if (table != null && table[key] != null) {
      entry = table[key];
      value = entry === table ? null : entry;
      delete table[key];
      this._length = this._length - 1;
      this._keys = null;
      return value;
    } else
      return;
  },
  $isMap: true
},

IterableBase: {"": "Object;",
  forEach$1: function(_, f) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
  },
  toList$1$growable: function(_, growable) {
    return $.List_List$from(this, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$length: function(_) {
    var it, count;
    it = this.get$iterator(this);
    for (count = 0; it.moveNext$0() === true;)
      ++count;
    return count;
  },
  elementAt$1: function(_, index) {
    var t1, remaining, element;
    if (typeof index !== "number")
      return this.elementAt$1$bailout(1, index);
    if (typeof index !== "number" || Math.floor(index) !== index || index < 0)
      throw $.wrapException(new $.RangeError("value " + $.S(index)));
    for (t1 = this.get$iterator(this), remaining = index; t1.moveNext$0() === true;) {
      element = t1.get$current();
      if (remaining === 0)
        return element;
      --remaining;
    }
    throw $.wrapException(new $.RangeError("value " + $.S(index)));
  },
  elementAt$1$bailout: function(state0, index) {
    var t1, remaining, element, t2;
    if (typeof index !== "number" || Math.floor(index) !== index || index < 0)
      throw $.wrapException(new $.RangeError("value " + $.S(index)));
    for (t1 = this.get$iterator(this), remaining = index; t1.moveNext$0() === true;) {
      element = t1.get$current();
      t2 = $.getInterceptor(remaining);
      if (t2.$eq(remaining, 0))
        return element;
      remaining = t2.$sub(remaining, 1);
    }
    throw $.wrapException(new $.RangeError("value " + $.S(index)));
  },
  $isIterable: true,
  $asIterable: null
},

LinkedHashMap: {"": "Object;_length,_strings,_nums,_rest,_first,_last,_modifications",
  $index: function(_, key) {
    var strings, cell, nums, rest, bucket, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null)
        return;
      cell = strings[key];
      return cell == null ? null : cell.get$_value();
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null)
        return;
      cell = nums[key];
      return cell == null ? null : cell.get$_value();
    } else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[$.get$hashCode$(key) & 0x3ffffff];
      index = $.LinkedHashMap__findBucketIndex(bucket, key);
      if (index < 0)
        return;
      return bucket[index].get$_value();
    }
  },
  $indexSet: function(_, key, value) {
    var strings, table, nums, rest, hash, bucket, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._strings = table;
        strings = table;
      }
      this._addHashTableEntry$3(strings, key, value);
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._nums = table;
        nums = table;
      }
      this._addHashTableEntry$3(nums, key, value);
    } else {
      rest = this._rest;
      if (rest == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._rest = table;
        rest = table;
      }
      hash = $.get$hashCode$(key) & 0x3ffffff;
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [this._newLinkedCell$2(key, value)];
      else {
        index = $.LinkedHashMap__findBucketIndex(bucket, key);
        if (index >= 0)
          bucket[index].set$_value(value);
        else
          bucket.push(this._newLinkedCell$2(key, value));
      }
    }
  },
  remove$1: function(_, key) {
    var rest, bucket, index, cell;
    if (typeof key === "string" && key !== "__proto__")
      return this._removeHashTableEntry$2(this._strings, key);
    else if (typeof key === "number" && (key & 0x3ffffff) === key)
      return this._removeHashTableEntry$2(this._nums, key);
    else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[$.get$hashCode$(key) & 0x3ffffff];
      index = $.LinkedHashMap__findBucketIndex(bucket, key);
      if (index < 0)
        return;
      cell = bucket.splice(index, 1)[0];
      this._unlinkCell$1(cell);
      return cell.get$_value();
    }
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i1(this, "remove$1", receiver);
  },
  clear$0: function(_) {
    if (this._length > 0) {
      this._last = null;
      this._first = null;
      this._rest = null;
      this._nums = null;
      this._strings = null;
      this._length = 0;
      this._modifications = this._modifications + 1 & 67108863;
    }
  },
  forEach$1: function(_, action) {
    var cell, modifications;
    cell = this._first;
    modifications = this._modifications;
    for (; cell != null;) {
      action.call$2(cell.get$_key(), cell.get$_value());
      if (modifications !== this._modifications)
        throw $.wrapException(new $.ConcurrentModificationError(this));
      cell = cell.get$_next();
    }
  },
  get$keys: function() {
    return new $.LinkedHashMapKeyIterable(this);
  },
  get$values: function(_) {
    return new $.MappedIterable(new $.LinkedHashMapKeyIterable(this), new $.LinkedHashMap_values_closure(this));
  },
  get$length: function(_) {
    return this._length;
  },
  toString$0: function(_) {
    var result = new $.StringBuffer("");
    result._contents = "";
    $.ToString__emitPair(this, result, $.List_List($));
    return result._contents;
  },
  _addHashTableEntry$3: function(table, key, value) {
    var cell = table[key];
    if (cell == null)
      table[key] = this._newLinkedCell$2(key, value);
    else
      cell.set$_value(value);
  },
  _removeHashTableEntry$2: function(table, key) {
    var cell;
    if (table == null)
      return;
    cell = table[key];
    if (cell == null)
      return;
    this._unlinkCell$1(cell);
    delete table[key];
    return cell.get$_value();
  },
  _newLinkedCell$2: function(key, value) {
    var cell, last;
    cell = new $.LinkedHashMapCell(key, value, null, null);
    if (this._first == null) {
      this._last = cell;
      this._first = cell;
    } else {
      last = this._last;
      cell._previous = last;
      last.set$_next(cell);
      this._last = cell;
    }
    this._length = this._length + 1;
    this._modifications = this._modifications + 1 & 67108863;
    return cell;
  },
  _unlinkCell$1: function(cell) {
    var previous, next;
    previous = cell.get$_previous();
    next = cell.get$_next();
    if (previous == null)
      this._first = next;
    else
      previous.set$_next(next);
    if (next == null)
      this._last = previous;
    else
      next.set$_previous(previous);
    this._length = this._length - 1;
    this._modifications = this._modifications + 1 & 67108863;
  },
  $isMap: true
},

ListBase: {"": "Object+ListMixin;", $isList: true, $asList: null, $isIterable: true, $asIterable: null},

ListMixin: {"": "Object;",
  get$iterator: function(receiver) {
    return new $.ListIterator(receiver, this.get$length(receiver), 0, null);
  },
  elementAt$1: function(receiver, index) {
    return this.$index(receiver, index);
  },
  forEach$1: function(receiver, action) {
    var $length, i;
    if (typeof receiver !== "string" && (typeof receiver !== "object" || receiver === null || receiver.constructor !== Array && !$.isJsIndexable(receiver, receiver[$.dispatchPropertyName])))
      return this.forEach$1$bailout(1, action, receiver);
    $length = receiver.length;
    for (i = 0; i < $length; ++i) {
      if (i >= receiver.length)
        throw $.ioore(i);
      action.call$1(receiver[i]);
      if ($length !== receiver.length)
        throw $.wrapException(new $.ConcurrentModificationError(receiver));
    }
  },
  forEach$1$bailout: function(state0, action, receiver) {
    var $length, t1, i;
    $length = this.get$length(receiver);
    for (t1 = $.getInterceptor($length), i = 0; $.JSNumber_methods.$lt(i, $length); ++i) {
      action.call$1(this.$index(receiver, i));
      if (!t1.$eq($length, this.get$length(receiver)))
        throw $.wrapException(new $.ConcurrentModificationError(receiver));
    }
  },
  get$last: function(receiver) {
    if ($.$eq(this.get$length(receiver), 0))
      throw $.wrapException(new $.StateError("No elements"));
    return this.$index(receiver, $.$sub$n(this.get$length(receiver), 1));
  },
  where$1: function(receiver, test) {
    return new $.WhereIterable(receiver, test);
  },
  toList$1$growable: function(receiver, growable) {
    var result, t1, t2, i, t3;
    if (typeof receiver !== "string" && (typeof receiver !== "object" || receiver === null || receiver.constructor !== Array && !$.isJsIndexable(receiver, receiver[$.dispatchPropertyName])))
      return this.toList$1$growable$bailout(1, growable, receiver);
    if (growable) {
      result = $.List_List($);
      $.JSArray_methods.set$length(result, receiver.length);
    } else
      result = $.List_List(receiver.length);
    for (t1 = receiver.length, t2 = result.length, i = 0; i < t1; ++i) {
      t3 = receiver[i];
      if (i >= t2)
        throw $.ioore(i);
      result[i] = t3;
    }
    return result;
  },
  toList$1$growable$bailout: function(state0, growable, receiver) {
    var result, i, t1;
    if (growable) {
      result = $.List_List($);
      $.JSArray_methods.set$length(result, this.get$length(receiver));
    } else
      result = $.List_List(this.get$length(receiver));
    for (i = 0; $.JSNumber_methods.$lt(i, this.get$length(receiver)); ++i) {
      t1 = this.$index(receiver, i);
      if (i >= result.length)
        throw $.ioore(i);
      result[i] = t1;
    }
    return result;
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  add$1: function(receiver, element) {
    var t1 = this.get$length(receiver);
    this.set$length(receiver, $.$add$ns(t1, 1));
    this.$indexSet(receiver, t1, element);
  },
  remove$1: function(receiver, element) {
    var i;
    for (i = 0; $.JSNumber_methods.$lt(i, this.get$length(receiver)); ++i)
      if ($.$eq(this.$index(receiver, i), element)) {
        this.setRange$4(receiver, i, $.$sub$n(this.get$length(receiver), 1), receiver, i + 1);
        this.set$length(receiver, $.$sub$n(this.get$length(receiver), 1));
        return true;
      }
    return false;
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i1(this, "remove$1", receiver);
  },
  clear$0: function(receiver) {
    this.set$length(receiver, 0);
  },
  removeLast$0: function(receiver) {
    var result;
    if ($.$eq(this.get$length(receiver), 0))
      throw $.wrapException(new $.StateError("No elements"));
    result = this.$index(receiver, $.$sub$n(this.get$length(receiver), 1));
    this.set$length(receiver, $.$sub$n(this.get$length(receiver), 1));
    return result;
  },
  _rangeCheck$2: function(receiver, start, end) {
    var t1 = $.getInterceptor$n(start);
    if (t1.$lt(start, 0) || t1.$gt(start, this.get$length(receiver))) {
      t1 = this.get$length(receiver);
      throw $.wrapException(new $.RangeError("value " + $.S(start) + " not in range 0.." + $.S(t1)));
    }
    t1 = $.getInterceptor$n(end);
    if (t1.$lt(end, start) || t1.$gt(end, this.get$length(receiver))) {
      t1 = this.get$length(receiver);
      throw $.wrapException(new $.RangeError("value " + $.S(end) + " not in range " + $.S(start) + ".." + $.S(t1)));
    }
  },
  sublist$2: function(receiver, start, end) {
    var $length, result, i, t1;
    if (typeof start !== "number")
      return this.sublist$2$bailout(1, start, end, receiver);
    if (end == null)
      end = this.get$length(receiver);
    this._rangeCheck$2(receiver, start, end);
    $length = $.$sub$n(end, start);
    if (typeof $length !== "number")
      return this.sublist$2$bailout(2, start, 0, receiver, $length);
    result = $.List_List($);
    $.JSArray_methods.set$length(result, $length);
    for (i = 0; i < $length; ++i) {
      t1 = this.$index(receiver, start + i);
      if (i >= result.length)
        throw $.ioore(i);
      result[i] = t1;
    }
    return result;
  },
  sublist$2$bailout: function(state0, start, end, receiver, $length) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        if (end == null)
          end = this.get$length(receiver);
        this._rangeCheck$2(receiver, start, end);
        $length = $.$sub$n(end, start);
      case 2:
        var result, t1, i, t2;
        state0 = 0;
        result = $.List_List($);
        $.JSArray_methods.set$length(result, $length);
        for (t1 = $.getInterceptor$ns(start), i = 0; $.JSNumber_methods.$lt(i, $length); ++i) {
          t2 = this.$index(receiver, t1.$add(start, i));
          if (i >= result.length)
            throw $.ioore(i);
          result[i] = t2;
        }
        return result;
    }
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  setRange$4: function(receiver, start, end, iterable, skipCount) {
    var $length, otherStart, otherList, i, t1;
    if (typeof start !== "number")
      return this.setRange$4$bailout(1, start, end, iterable, skipCount, receiver);
    if (typeof end !== "number")
      return this.setRange$4$bailout(1, start, end, iterable, skipCount, receiver);
    if (typeof skipCount !== "number")
      return this.setRange$4$bailout(1, start, end, iterable, skipCount, receiver);
    this._rangeCheck$2(receiver, start, end);
    $length = end - start;
    if ($length === 0)
      return;
    if (skipCount < 0)
      throw $.wrapException(new $.ArgumentError(skipCount));
    otherStart = skipCount;
    otherList = iterable;
    if (typeof otherList !== "string" && (typeof otherList !== "object" || otherList === null || otherList.constructor !== Array && !$.isJsIndexable(otherList, otherList[$.dispatchPropertyName])))
      return this.setRange$4$bailout(3, start, 0, 0, 0, receiver, $length, $.JSNumber_methods, otherList, otherStart);
    if (otherStart + $length > otherList.length)
      throw $.wrapException(new $.StateError("Not enough elements"));
    if (otherStart < start)
      for (i = $length - 1; i >= 0; --i) {
        t1 = otherStart + i;
        if (t1 >>> 0 !== t1 || t1 >= otherList.length)
          throw $.ioore(t1);
        this.$indexSet(receiver, start + i, otherList[t1]);
      }
    else
      for (i = 0; i < $length; ++i) {
        t1 = otherStart + i;
        if (t1 >>> 0 !== t1 || t1 >= otherList.length)
          throw $.ioore(t1);
        this.$indexSet(receiver, start + i, otherList[t1]);
      }
  },
  setRange$4$bailout: function(state0, start, end, iterable, skipCount, receiver, $length, t1, otherList, otherStart) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        this._rangeCheck$2(receiver, start, end);
        $length = $.$sub$n(end, start);
        t1 = $.getInterceptor($length);
        if (t1.$eq($length, 0))
          return;
        if ($.$lt$n(skipCount, 0))
          throw $.wrapException(new $.ArgumentError(skipCount));
        otherStart = skipCount;
        otherList = iterable;
      case 3:
        var t2, t3, i, t4;
        state0 = 0;
        t2 = $.getInterceptor$ns(otherStart);
        t3 = $.getInterceptor$asx(otherList);
        if ($.$gt$n(t2.$add(otherStart, $length), t3.get$length(otherList)))
          throw $.wrapException(new $.StateError("Not enough elements"));
        if (t2.$lt(otherStart, start))
          for (i = t1.$sub($length, 1), t1 = $.getInterceptor$ns(start); t4 = $.getInterceptor$n(i), t4.$ge(i, 0); i = t4.$sub(i, 1))
            this.$indexSet(receiver, t1.$add(start, i), t3.$index(otherList, t2.$add(otherStart, i)));
        else
          for (t1 = $.getInterceptor$ns(start), i = 0; $.JSNumber_methods.$lt(i, $length); ++i)
            this.$indexSet(receiver, t1.$add(start, i), t3.$index(otherList, t2.$add(otherStart, i)));
    }
  },
  toString$0: function(receiver) {
    var result = new $.StringBuffer("");
    result._contents = "";
    $.ToString__emitValue(receiver, result, $.List_List($));
    return result._contents;
  },
  $isList: true,
  $asList: null,
  $isIterable: true,
  $asIterable: null
},

ListQueue: {"": "IterableBase;_table,_head,_tail,_modificationCount",
  get$iterator: function(_) {
    return new $._ListQueueIterator(this, this._tail, this._modificationCount, this._head, null);
  },
  get$length: function(_) {
    return (this._tail - this._head & this._table.length - 1) >>> 0;
  },
  elementAt$1: function(_, index) {
    var t1, t2, t3;
    t1 = $.getInterceptor$n(index);
    if (t1.$lt(index, 0) || t1.$gt(index, (this._tail - this._head & this._table.length - 1) >>> 0)) {
      t1 = this._tail;
      t2 = this._head;
      t3 = this._table;
      throw $.wrapException(new $.RangeError("value " + $.S(index) + " not in range 0.." + ((t1 - t2 & t3.length - 1) >>> 0)));
    }
    t1 = this._table;
    t2 = this._head;
    if (typeof index !== "number")
      throw $.iae(index);
    t3 = t1.length;
    t2 = (t2 + index & t3 - 1) >>> 0;
    if (t2 < 0 || t2 >= t3)
      throw $.ioore(t2);
    return t1[t2];
  },
  add$1: function(_, element) {
    this._add$1(element);
  },
  remove$1: function(_, object) {
    var i, t1;
    for (i = this._head; i !== this._tail; i = (i + 1 & this._table.length - 1) >>> 0) {
      t1 = this._table;
      if (i < 0 || i >= t1.length)
        throw $.ioore(i);
      if ($.$eq(t1[i], object)) {
        this._remove$1(i);
        this._modificationCount = this._modificationCount + 1;
        return true;
      }
    }
    return false;
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i1(this, "remove$1", receiver);
  },
  clear$0: function(_) {
    var i, t1, t2, t3, t4;
    i = this._head;
    t1 = this._tail;
    if (i !== t1) {
      for (t2 = this._table, t3 = t2.length, t4 = t3 - 1; i !== t1; i = (i + 1 & t4) >>> 0) {
        if (i < 0 || i >= t3)
          throw $.ioore(i);
        t2[i] = null;
      }
      this._tail = 0;
      this._head = 0;
      this._modificationCount = this._modificationCount + 1;
    }
  },
  toString$0: function(_) {
    var result = new $.StringBuffer("");
    result._contents = "";
    $.ToString__emitValue(this, result, $.List_List($));
    return result._contents;
  },
  removeFirst$0: function() {
    var t1, t2, t3, result;
    if (this._head === this._tail)
      throw $.wrapException(new $.StateError("No elements"));
    this._modificationCount = this._modificationCount + 1;
    t1 = this._table;
    t2 = this._head;
    t3 = t1.length;
    if (t2 < 0 || t2 >= t3)
      throw $.ioore(t2);
    result = t1[t2];
    this._head = (t2 + 1 & t3 - 1) >>> 0;
    return result;
  },
  removeLast$0: function(_) {
    var t1, t2;
    if (this._head === this._tail)
      throw $.wrapException(new $.StateError("No elements"));
    this._modificationCount = this._modificationCount + 1;
    this._tail = (this._tail - 1 & this._table.length - 1) >>> 0;
    t1 = this._table;
    t2 = this._tail;
    if (t2 < 0 || t2 >= t1.length)
      throw $.ioore(t2);
    return t1[t2];
  },
  _add$1: function(element) {
    var t1, t2, t3;
    t1 = this._table;
    t2 = this._tail;
    t3 = t1.length;
    if (t2 < 0 || t2 >= t3)
      throw $.ioore(t2);
    t1[t2] = element;
    this._tail = (t2 + 1 & t3 - 1) >>> 0;
    if (this._head === this._tail)
      this._grow$0();
    this._modificationCount = this._modificationCount + 1;
  },
  _remove$1: function(offset) {
    var t1, t2, mask, t3, t4, i, prevOffset, nextOffset;
    t1 = this._table;
    t2 = t1.length;
    mask = t2 - 1;
    t3 = this._head;
    t4 = this._tail;
    if ((offset - t3 & mask) >>> 0 < (t4 - offset & mask) >>> 0) {
      for (i = offset; i !== t3; i = prevOffset) {
        prevOffset = (i - 1 & mask) >>> 0;
        if (prevOffset < 0 || prevOffset >= t2)
          throw $.ioore(prevOffset);
        t4 = t1[prevOffset];
        if (i < 0 || i >= t2)
          throw $.ioore(i);
        t1[i] = t4;
      }
      if (t3 < 0 || t3 >= t2)
        throw $.ioore(t3);
      t1[t3] = null;
      this._head = (t3 + 1 & mask) >>> 0;
      return (offset + 1 & mask) >>> 0;
    } else {
      this._tail = (t4 - 1 & mask) >>> 0;
      for (t1 = this._table, t2 = t1.length, i = offset; t3 = this._tail, i !== t3; i = nextOffset) {
        nextOffset = (i + 1 & mask) >>> 0;
        if (nextOffset < 0 || nextOffset >= t2)
          throw $.ioore(nextOffset);
        t3 = t1[nextOffset];
        if (i < 0 || i >= t2)
          throw $.ioore(i);
        t1[i] = t3;
      }
      if (t3 < 0 || t3 >= t2)
        throw $.ioore(t3);
      t1[t3] = null;
      return offset;
    }
  },
  _grow$0: function() {
    var newTable, t1, t2, split;
    newTable = $.List_List(this._table.length * 2);
    t1 = this._table;
    t2 = this._head;
    split = t1.length - t2;
    if (!!newTable.immutable$list)
      $.throwExpression(new $.UnsupportedError("set range"));
    $.IterableMixinWorkaround_setRangeList(newTable, 0, split, t1, t2);
    t1 = this._head;
    t2 = this._table;
    if (!!newTable.immutable$list)
      $.throwExpression(new $.UnsupportedError("set range"));
    $.IterableMixinWorkaround_setRangeList(newTable, split, split + t1, t2, 0);
    this._head = 0;
    this._tail = this._table.length;
    this._table = newTable;
  },
  ListQueue$1: function(initialCapacity) {
    if (initialCapacity == null || $.JSNull_methods.$lt(initialCapacity, 8))
      initialCapacity = 8;
    else if ($.JSNull_methods.$and(initialCapacity, $.JSNull_methods.$sub(initialCapacity, 1)) !== 0)
      initialCapacity = $.ListQueue__nextPowerOf2(initialCapacity);
    this._table = $.List_List(initialCapacity);
  },
  $asIterable: null,
  $isIterable: true
},

_ListQueueIterator: {"": "Object;_queue,_end,_modificationCount,_liblib1$_position,_liblib1$_current",
  get$current: function() {
    return this._liblib1$_current;
  },
  moveNext$0: function() {
    var t1, t2, t3;
    t1 = this._queue;
    if (this._modificationCount !== t1._modificationCount)
      $.throwExpression(new $.ConcurrentModificationError(t1));
    t2 = this._liblib1$_position;
    if (t2 === this._end) {
      this._liblib1$_current = null;
      return false;
    }
    t3 = t1._table;
    if (t2 < 0 || t2 >= t3.length)
      throw $.ioore(t2);
    this._liblib1$_current = t3[t2];
    this._liblib1$_position = (this._liblib1$_position + 1 & t1._table.length - 1) >>> 0;
    return true;
  }
},

HashMap__findBucketIndex: function(bucket, key) {
  var $length, i;
  if (bucket == null)
    return -1;
  $length = bucket.length;
  for (i = 0; i < $length; i += 2)
    if ($.$eq(bucket[i], key))
      return i;
  return -1;
},

LinkedHashMap__findBucketIndex: function(bucket, key) {
  var $length, i;
  if (bucket == null)
    return -1;
  $length = bucket.length;
  for (i = 0; i < $length; ++i)
    if ($.$eq(bucket[i].get$_key(), key))
      return i;
  return -1;
},

ListQueue$: function(initialCapacity) {
  var t1 = new $.ListQueue(null, 0, 0, 0);
  t1.ListQueue$1(initialCapacity);
  return t1;
},

ListQueue__nextPowerOf2: function(number) {
  var nextNumber;
  number = $.JSNull_methods.$shl(number, 2) - 1;
  for (; true; number = nextNumber) {
    nextNumber = (number & number - 1) >>> 0;
    if (nextNumber === 0)
      return number;
  }
}}],
["dart.core", {
NoSuchMethodError_toString_closure: {"": "Closure;box_0",
  call$2: function(key, value) {
    var t1, t2, str, t3;
    t1 = this.box_0;
    if ($.$gt$n(t1.i_1, 0)) {
      t2 = t1.sb_0;
      t2._contents = t2._contents + ", ";
    }
    t2 = t1.sb_0;
    str = typeof key === "string" ? key : $.S(key);
    t2._contents = t2._contents + str;
    t2 = t1.sb_0;
    t2._contents = t2._contents + ": ";
    t2 = t1.sb_0;
    t3 = $.Error_safeToString(value);
    t2._contents = t2._contents + t3;
    t1.i_1 = $.$add$ns(t1.i_1, 1);
  }
},

DateTime: {"": "Object;millisecondsSinceEpoch<,isUtc",
  $eq: function(_, other) {
    if (other == null)
      return false;
    if (typeof other !== "object" || other === null || !$.getInterceptor(other).$isDateTime)
      return false;
    else
      other;
    return $.$eq(this.millisecondsSinceEpoch, other.millisecondsSinceEpoch) && $.$eq(this.isUtc, other.isUtc);
  },
  compareTo$1: function(_, other) {
    return $.compareTo$1$ns(this.millisecondsSinceEpoch, other.get$millisecondsSinceEpoch());
  },
  get$hashCode: function(_) {
    return this.millisecondsSinceEpoch;
  },
  toString$0: function(_) {
    var t1, t2, t3, y, m, d, h, min, sec, ms;
    t1 = new $.DateTime_toString_twoDigits();
    t2 = this.isUtc === true;
    if (t2) {
      if (this.date === void 0)
        this.date = new Date(this.millisecondsSinceEpoch);
      t3 = this.date.getUTCFullYear() + 0;
    } else {
      if (this.date === void 0)
        this.date = new Date(this.millisecondsSinceEpoch);
      t3 = this.date.getFullYear() + 0;
    }
    y = new $.DateTime_toString_fourDigits().call$1(t3);
    if (t2) {
      if (this.date === void 0)
        this.date = new Date(this.millisecondsSinceEpoch);
      t3 = this.date.getUTCMonth() + 1;
    } else {
      if (this.date === void 0)
        this.date = new Date(this.millisecondsSinceEpoch);
      t3 = this.date.getMonth() + 1;
    }
    m = t1.call$1(t3);
    if (t2) {
      if (this.date === void 0)
        this.date = new Date(this.millisecondsSinceEpoch);
      t3 = this.date.getUTCDate() + 0;
    } else {
      if (this.date === void 0)
        this.date = new Date(this.millisecondsSinceEpoch);
      t3 = this.date.getDate() + 0;
    }
    d = t1.call$1(t3);
    if (t2) {
      if (this.date === void 0)
        this.date = new Date(this.millisecondsSinceEpoch);
      t3 = this.date.getUTCHours() + 0;
    } else {
      if (this.date === void 0)
        this.date = new Date(this.millisecondsSinceEpoch);
      t3 = this.date.getHours() + 0;
    }
    h = t1.call$1(t3);
    if (t2) {
      if (this.date === void 0)
        this.date = new Date(this.millisecondsSinceEpoch);
      t3 = this.date.getUTCMinutes() + 0;
    } else {
      if (this.date === void 0)
        this.date = new Date(this.millisecondsSinceEpoch);
      t3 = this.date.getMinutes() + 0;
    }
    min = t1.call$1(t3);
    if (t2) {
      if (this.date === void 0)
        this.date = new Date(this.millisecondsSinceEpoch);
      t3 = this.date.getUTCSeconds() + 0;
    } else {
      if (this.date === void 0)
        this.date = new Date(this.millisecondsSinceEpoch);
      t3 = this.date.getSeconds() + 0;
    }
    sec = t1.call$1(t3);
    if (t2) {
      if (this.date === void 0)
        this.date = new Date(this.millisecondsSinceEpoch);
      t1 = this.date.getUTCMilliseconds() + 0;
    } else {
      if (this.date === void 0)
        this.date = new Date(this.millisecondsSinceEpoch);
      t1 = this.date.getMilliseconds() + 0;
    }
    ms = new $.DateTime_toString_threeDigits().call$1(t1);
    if (t2)
      return $.S(y) + "-" + $.S(m) + "-" + $.S(d) + " " + $.S(h) + ":" + $.S(min) + ":" + $.S(sec) + "." + $.S(ms) + "Z";
    else
      return $.S(y) + "-" + $.S(m) + "-" + $.S(d) + " " + $.S(h) + ":" + $.S(min) + ":" + $.S(sec) + "." + $.S(ms);
  },
  add$1: function(_, duration) {
    var t1, t2;
    t1 = $.$add$ns(this.millisecondsSinceEpoch, duration.get$inMilliseconds());
    t2 = this.isUtc;
    if ($.abs$0$n(t1) > 8640000000000000)
      $.throwExpression(new $.ArgumentError(t1));
    if (t2 == null)
      $.throwExpression(new $.ArgumentError(t2));
    return new $.DateTime(t1, t2);
  },
  DateTime$fromMillisecondsSinceEpoch$2$isUtc: function(millisecondsSinceEpoch, isUtc) {
    if ($.abs$0$n(millisecondsSinceEpoch) > 8640000000000000)
      throw $.wrapException(new $.ArgumentError(millisecondsSinceEpoch));
    if (isUtc == null)
      throw $.wrapException(new $.ArgumentError(isUtc));
  },
  DateTime$_now$0: function() {
    if (this.date === void 0)
      this.date = new Date(this.millisecondsSinceEpoch);
    this.date;
  },
  $isDateTime: true
},

DateTime_toString_fourDigits: {"": "Closure;",
  call$1: function(n) {
    var t1, absN, sign;
    t1 = $.getInterceptor$n(n);
    absN = t1.abs$0(n);
    sign = t1.$lt(n, 0) ? "-" : "";
    if (absN >= 1000)
      return $.S(n);
    if (absN >= 100)
      return sign + "0" + $.S(absN);
    if (absN >= 10)
      return sign + "00" + $.S(absN);
    return sign + "000" + $.S(absN);
  }
},

DateTime_toString_threeDigits: {"": "Closure;",
  call$1: function(n) {
    var t1 = $.getInterceptor$n(n);
    if (t1.$ge(n, 100))
      return $.S(n);
    if (t1.$ge(n, 10))
      return "0" + $.S(n);
    return "00" + $.S(n);
  }
},

DateTime_toString_twoDigits: {"": "Closure;",
  call$1: function(n) {
    if ($.$ge$n(n, 10))
      return $.S(n);
    return "0" + $.S(n);
  }
},

Duration: {"": "Object;_duration<",
  $add: function(_, other) {
    return $.Duration$(0, 0, this._duration + other.get$_duration(), 0, 0, 0);
  },
  $sub: function(_, other) {
    return $.Duration$(0, 0, this._duration - other.get$_duration(), 0, 0, 0);
  },
  $mul: function(_, factor) {
    if (typeof factor !== "number")
      throw $.iae(factor);
    return $.Duration$(0, 0, this._duration * factor, 0, 0, 0);
  },
  $lt: function(_, other) {
    return this._duration < other.get$_duration();
  },
  $gt: function(_, other) {
    return this._duration > other.get$_duration();
  },
  $le: function(_, other) {
    return this._duration <= other.get$_duration();
  },
  $ge: function(_, other) {
    return this._duration >= other.get$_duration();
  },
  get$inMilliseconds: function() {
    return $.JSNumber_methods.$tdiv(this._duration, 1000);
  },
  $eq: function(_, other) {
    if (other == null)
      return false;
    if (typeof other !== "object" || other === null || !$.getInterceptor(other).$isDuration)
      return false;
    return this._duration === other._duration;
  },
  get$hashCode: function(_) {
    return this._duration & 0x1FFFFFFF;
  },
  compareTo$1: function(_, other) {
    return $.JSNumber_methods.compareTo$1(this._duration, other.get$_duration());
  },
  toString$0: function(_) {
    var t1, t2, t3, twoDigitMinutes, twoDigitSeconds, sixDigitUs;
    t1 = new $.Duration_toString_twoDigits();
    t2 = this._duration;
    if (t2 < 0)
      return "-" + $.S($.Duration$(0, 0, -t2, 0, 0, 0));
    t3 = $.JSNumber_methods.$tdiv(t2, 60000000);
    twoDigitMinutes = t1.call$1(t3 % 60);
    t3 = $.JSNumber_methods.$tdiv(t2, 1000000);
    twoDigitSeconds = t1.call$1(t3 % 60);
    sixDigitUs = new $.Duration_toString_sixDigits().call$1(t2 % 1000000);
    return $.S($.JSNumber_methods.$tdiv(t2, 3600000000)) + ":" + $.S(twoDigitMinutes) + ":" + $.S(twoDigitSeconds) + "." + $.S(sixDigitUs);
  },
  $isDuration: true
},

Duration_toString_sixDigits: {"": "Closure;",
  call$1: function(n) {
    var t1 = $.getInterceptor$n(n);
    if (t1.$ge(n, 100000))
      return $.S(n);
    if (t1.$ge(n, 10000))
      return "0" + $.S(n);
    if (t1.$ge(n, 1000))
      return "00" + $.S(n);
    if (t1.$ge(n, 100))
      return "000" + $.S(n);
    if (t1.$gt(n, 10))
      return "0000" + $.S(n);
    return "00000" + $.S(n);
  }
},

Duration_toString_twoDigits: {"": "Closure;",
  call$1: function(n) {
    if ($.$ge$n(n, 10))
      return $.S(n);
    return "0" + $.S(n);
  }
},

Error: {"": "Object;"},

AssertionError: {"": "Object;"},

TypeError: {"": "Object;"},

NullThrownError: {"": "Object;",
  toString$0: function(_) {
    return "Throw of null.";
  }
},

ArgumentError: {"": "Object;message",
  toString$0: function(_) {
    var t1 = this.message;
    if (t1 != null)
      return "Illegal argument(s): " + $.S(t1);
    return "Illegal argument(s)";
  }
},

RangeError: {"": "ArgumentError;message",
  toString$0: function(_) {
    return "RangeError: " + $.S(this.message);
  }
},

FallThroughError: {"": "Object;"},

AbstractClassInstantiationError: {"": "Object;_className",
  toString$0: function(_) {
    return "Cannot instantiate abstract class: '" + $.S(this._className) + "'";
  }
},

NoSuchMethodError: {"": "Object;_receiver,_memberName,_arguments,_namedArguments,_existingArgumentNames",
  toString$0: function(_) {
    var t1, sb, t2, t3, t4, actualParameters, i, str, formalParameters;
    t1 = {};
    sb = new $.StringBuffer("");
    sb._contents = "";
    t1.sb_0 = sb;
    t1.i_1 = 0;
    t2 = this._arguments;
    for (; t3 = t1.i_1, t4 = $.getInterceptor$n(t3), t4.$lt(t3, t2.length); t1.i_1 = $.$add$ns(t1.i_1, 1)) {
      if (t4.$gt(t3, 0)) {
        t3 = t1.sb_0;
        t3._contents = t3._contents + ", ";
      }
      t3 = t1.sb_0;
      t4 = t1.i_1;
      if (t4 >>> 0 !== t4 || t4 >= t2.length)
        throw $.ioore(t4);
      t4 = $.Error_safeToString(t2[t4]);
      t3._contents = t3._contents + t4;
    }
    t2 = this._namedArguments;
    t2.forEach$1(t2, new $.NoSuchMethodError_toString_closure(t1));
    t2 = this._existingArgumentNames;
    if (t2 == null)
      return "NoSuchMethodError : method not found: '" + $.S(this._memberName) + "'\nReceiver: " + $.Error_safeToString(this._receiver) + "\nArguments: [" + $.S(t1.sb_0) + "]";
    else {
      actualParameters = t1.sb_0._contents;
      sb = new $.StringBuffer("");
      sb._contents = "";
      t1.sb_0 = sb;
      for (i = 0; i < t2.length; ++i) {
        if (i > 0) {
          t3 = t1.sb_0;
          t3._contents = t3._contents + ", ";
        }
        t3 = t1.sb_0;
        if (i >= t2.length)
          throw $.ioore(i);
        str = t2[i];
        str = typeof str === "string" ? str : $.S(str);
        t3._contents = t3._contents + str;
      }
      formalParameters = t1.sb_0._contents;
      t1 = this._memberName;
      return "NoSuchMethodError: incorrect number of arguments passed to method named '" + $.S(t1) + "'\nReceiver: " + $.Error_safeToString(this._receiver) + "\nTried calling: " + $.S(t1) + "(" + actualParameters + ")\nFound: " + $.S(t1) + "(" + formalParameters + ")";
    }
  }
},

UnsupportedError: {"": "Object;message",
  toString$0: function(_) {
    return "Unsupported operation: " + this.message;
  }
},

UnimplementedError: {"": "Object;message",
  toString$0: function(_) {
    var t1 = this.message;
    return t1 != null ? "UnimplementedError: " + $.S(t1) : "UnimplementedError";
  }
},

StateError: {"": "Object;message",
  toString$0: function(_) {
    return "Bad state: " + this.message;
  }
},

ConcurrentModificationError: {"": "Object;modifiedObject",
  toString$0: function(_) {
    var t1 = this.modifiedObject;
    if (t1 == null)
      return "Concurrent modification during iteration.";
    return "Concurrent modification during iteration: " + $.Error_safeToString(t1) + ".";
  }
},

StackOverflowError: {"": "Object;",
  toString$0: function(_) {
    return "Stack Overflow";
  }
},

RuntimeError: {"": "Object;message",
  toString$0: function(_) {
    return "RuntimeError: " + this.message;
  }
},

_ExceptionImplementation: {"": "Object;message",
  toString$0: function(_) {
    var t1 = this.message;
    if (t1 == null)
      return "Exception";
    return "Exception: " + $.S(t1);
  },
  $isException: true
},

FormatException: {"": "Object;message",
  toString$0: function(_) {
    return "FormatException: " + $.S(this.message);
  },
  $isException: true
},

IntegerDivisionByZeroException: {"": "Object;",
  toString$0: function(_) {
    return "IntegerDivisionByZeroException";
  },
  $isException: true
},

Expando: {"": "Object;name",
  toString$0: function(_) {
    return "Expando:" + $.S(this.name);
  },
  $index: function(_, object) {
    var values = $.Primitives_getProperty(object, "expando$values");
    return values == null ? null : $.Primitives_getProperty(values, this._getKey$0());
  },
  $indexSet: function(_, object, value) {
    var values = $.Primitives_getProperty(object, "expando$values");
    if (values == null) {
      values = new $.Object();
      $.Primitives_setProperty(object, "expando$values", values);
    }
    $.Primitives_setProperty(values, this._getKey$0(), value);
  },
  _getKey$0: function() {
    var key, t1;
    key = $.Primitives_getProperty(this, "expando$key");
    if (key == null) {
      t1 = $.Expando__keyCount;
      $.Expando__keyCount = $.$add$ns(t1, 1);
      key = "expando$key$" + $.S(t1);
      $.Primitives_setProperty(this, "expando$key", key);
    }
    return key;
  }
},

Iterator: {"": "Object;"},

Object: {"": ";",
  $eq: function(_, other) {
    return this === other;
  },
  get$hashCode: function(_) {
    return $.Primitives_objectHashCode(this);
  },
  toString$0: function(_) {
    return "Instance of '" + $.Primitives_objectTypeName(this) + "'";
  }
},

Match: {"": "Object;"},

Stopwatch: {"": "Object;_start,_stop",
  start$0: function(_) {
    var t1 = this._start == null;
    if (!t1 && this._stop == null)
      return;
    if (t1)
      this._start = $.Primitives_numMicroseconds();
    else {
      this._start = $.Primitives_numMicroseconds() - $.$sub$n(this._stop, this._start);
      this._stop = null;
    }
  },
  stop$0: function(_) {
    if (!(this._start != null && this._stop == null))
      return;
    this._stop = $.Primitives_numMicroseconds();
  },
  reset$0: function(_) {
    if (this._start == null)
      return;
    this._start = $.Primitives_numMicroseconds();
    if (this._stop != null)
      this._stop = this._start;
  },
  get$elapsedTicks: function() {
    var t1, t2;
    t1 = this._start;
    if (t1 == null)
      return 0;
    t2 = this._stop;
    if (t2 == null) {
      t1 = $.Primitives_numMicroseconds();
      t2 = this._start;
      if (typeof t2 !== "number")
        throw $.iae(t2);
      t2 = t1 - t2;
      t1 = t2;
    } else
      t1 = $.$sub$n(t2, t1);
    return t1;
  }
},

StringBuffer: {"": "Object;_contents",
  get$length: function(_) {
    return this._contents.length;
  },
  write$1: function(obj) {
    if (typeof obj !== "string")
      return this.write$1$bailout(1, obj);
    this._contents = this._contents + obj;
  },
  write$1$bailout: function(state0, obj) {
    var str = typeof obj === "string" ? obj : $.S(obj);
    this._contents = this._contents + str;
  },
  writeAll$2: function(objects, separator) {
    var iterator, str;
    iterator = $.get$iterator$ax(objects);
    if (!iterator.moveNext$0())
      return;
    if (separator.length === 0)
      do {
        str = iterator._liblib0$_current;
        str = typeof str === "string" ? str : $.S(str);
        this._contents = this._contents + str;
      } while (iterator.moveNext$0());
    else {
      str = iterator._liblib0$_current;
      str = typeof str === "string" ? str : $.S(str);
      this._contents = this._contents + str;
      for (; iterator.moveNext$0();) {
        this._contents = this._contents + separator;
        str = iterator._liblib0$_current;
        str = typeof str === "string" ? str : $.S(str);
        this._contents = this._contents + str;
      }
    }
  },
  clear$0: function(_) {
    this._contents = "";
  },
  toString$0: function(_) {
    return this._contents;
  },
  StringBuffer$1: function($content) {
    this._contents = $content;
  }
},

Comparable_compare: function(a, b) {
  return $.compareTo$1$ns(a, b);
},

Duration$: function(days, hours, microseconds, milliseconds, minutes, seconds) {
  if (typeof microseconds !== "number")
    throw $.iae(microseconds);
  return new $.Duration(days * 86400000000 + hours * 3600000000 + minutes * 60000000 + seconds * 1000000 + milliseconds * 1000 + microseconds);
},

Error_safeToString: function(object) {
  var t1;
  if (typeof object === "number" && Math.floor(object) === object || typeof object === "number" || typeof object === "boolean" || null == object)
    return $.toString$0(object);
  if (typeof object === "string") {
    t1 = $.JSString_methods.replaceAll$2(object, "\\", "\\\\");
    t1 = $.stringReplaceAllUnchecked(t1, "\n", "\\n");
    t1 = $.stringReplaceAllUnchecked(t1, "\r", "\\r");
    return "\"" + $.stringReplaceAllUnchecked(t1, "\"", "\\\"") + "\"";
  }
  return "Instance of '" + $.Primitives_objectTypeName(object) + "'";
},

List_List: function($length) {
  var t1, result;
  t1 = $ === $length;
  if (t1)
    $length = null;
  if (t1)
    return new Array(0);
  if (typeof $length !== "number" || Math.floor($length) !== $length || $length < 0)
    throw $.wrapException(new $.ArgumentError("Length must be a positive integer: " + $.S($length) + "."));
  result = new Array($length);
  result.fixed$length = true;
  return result;
},

List_List$from: function(other, growable) {
  var list, t1, $length, fixedList, i;
  list = $.List_List($);
  for (t1 = $.get$iterator$ax(other); t1.moveNext$0() === true;)
    list.push(t1.get$current());
  if (growable === true)
    return list;
  $length = list.length;
  fixedList = $.List_List($length);
  for (t1 = list.length, i = 0; i < $length; ++i) {
    if (i >= t1)
      throw $.ioore(i);
    fixedList[i] = list[i];
  }
  return fixedList;
}}],
["dart.dom.html", {
_ChildrenElementList: {"": "ListBase;_element,_childElements",
  get$length: function(_) {
    return this._childElements.length;
  },
  $index: function(_, index) {
    var t1 = this._childElements;
    if (index >>> 0 !== index || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  $indexSet: function(_, index, value) {
    var t1 = this._childElements;
    if (index >>> 0 !== index || index >= t1.length)
      throw $.ioore(index);
    this._element.replaceChild(value, t1[index]);
  },
  set$length: function(_, newLength) {
    throw $.wrapException(new $.UnsupportedError("Cannot resize element lists"));
  },
  add$1: function(_, value) {
    this._element.appendChild(value);
    return value;
  },
  get$iterator: function(_) {
    return $.get$iterator$ax(this.toList$0(this));
  },
  setRange$4: function(_, start, end, iterable, skipCount) {
    throw $.wrapException(new $.UnimplementedError(null));
  },
  remove$1: function(_, object) {
    var t1;
    if (typeof object === "object" && object !== null && !!$.getInterceptor(object).$isElement) {
      t1 = this._element;
      if (object.parentNode === t1) {
        t1.removeChild(object);
        return true;
      }
    }
    return false;
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i1(this, "remove$1", receiver);
  },
  clear$0: function(_) {
    this._element.textContent = "";
  },
  removeLast$0: function(_) {
    var t1, result, t2;
    t1 = this._element;
    result = t1.lastElementChild;
    t2 = result == null;
    if (t2)
      $.throwExpression(new $.StateError("No elements"));
    if (!t2)
      t1.removeChild(result);
    return result;
  },
  $asList: function() { return [$.Element]; },
  $asIterable: function() { return [$.Element]; }
},

Interceptor_ListMixin: {"": "Interceptor+ListMixin;", $isList: true, $asList: function() { return [$.Node]; }, $isIterable: true, $asIterable: function() { return [$.Node]; }},

Interceptor_ListMixin_ImmutableListMixin: {"": "Interceptor_ListMixin+ImmutableListMixin;", $isList: true, $asList: function() { return [$.Node]; }, $isIterable: true, $asIterable: function() { return [$.Node]; }},

_ChildNodeListLazy: {"": "ListBase;_this",
  add$1: function(_, value) {
    this._this.appendChild(value);
  },
  addAll$1: function(_, iterable) {
    var t1, len, i, t2;
    if (typeof iterable === "object" && iterable !== null && !!$.getInterceptor(iterable).$is_ChildNodeListLazy) {
      t1 = this._this;
      if (iterable._this !== t1) {
        len = iterable.get$length(iterable);
        if (typeof len !== "number")
          return this.addAll$1$bailout1(1, iterable, len, t1);
        i = 0;
        for (; i < len; ++i)
          t1.appendChild(iterable.$index(iterable, 0));
      }
      return;
    }
    for (t1 = $.get$iterator$ax(iterable), t2 = this._this; t1.moveNext$0() === true;)
      t2.appendChild(t1.get$current());
  },
  addAll$1$bailout1: function(state0, iterable, len, t1) {
    switch (state0) {
      case 0:
      case 1:
        var i, t2;
        if (state0 === 1 || state0 === 0 && typeof iterable === "object" && iterable !== null && !!$.getInterceptor(iterable).$is_ChildNodeListLazy)
          switch (state0) {
            case 0:
              t1 = this._this;
            case 1:
              if (state0 === 1 || state0 === 0 && iterable._this !== t1)
                switch (state0) {
                  case 0:
                    len = iterable.get$length(iterable);
                  case 1:
                    state0 = 0;
                    i = 0;
                    for (; $.JSNumber_methods.$lt(i, len); ++i)
                      t1.appendChild(iterable.$index(iterable, 0));
                }
              return;
          }
        for (t1 = $.get$iterator$ax(iterable), t2 = this._this; t1.moveNext$0() === true;)
          t2.appendChild(t1.get$current());
    }
  },
  removeLast$0: function(_) {
    var t1, result, t2;
    t1 = this._this;
    result = t1.lastChild;
    t2 = result == null;
    if (t2)
      $.throwExpression(new $.StateError("No elements"));
    if (!t2)
      t1.removeChild(result);
    return result;
  },
  remove$1: function(_, object) {
    var t1;
    if (typeof object !== "object" || object === null || !$.getInterceptor(object).$isNode)
      return false;
    t1 = this._this;
    if (t1 !== object.parentNode)
      return false;
    t1.removeChild(object);
    return true;
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i1(this, "remove$1", receiver);
  },
  clear$0: function(_) {
    this._this.textContent = "";
  },
  $indexSet: function(_, index, value) {
    var t1, t2;
    t1 = this._this;
    t2 = t1.childNodes;
    if (index >>> 0 !== index || index >= t2.length)
      throw $.ioore(index);
    t1.replaceChild(value, t2[index]);
  },
  get$iterator: function(_) {
    return $.NodeList_methods.get$iterator(this._this.childNodes);
  },
  setRange$4: function(_, start, end, iterable, skipCount) {
    throw $.wrapException(new $.UnsupportedError("Cannot setRange on Node list"));
  },
  get$length: function(_) {
    return this._this.childNodes.length;
  },
  set$length: function(_, value) {
    throw $.wrapException(new $.UnsupportedError("Cannot set length on immutable List."));
  },
  $index: function(_, index) {
    var t1 = this._this.childNodes;
    if (index >>> 0 !== index || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  $is_ChildNodeListLazy: true,
  $asList: function() { return [$.Node]; },
  $asIterable: function() { return [$.Node]; }
},

Interceptor_ListMixin0: {"": "Interceptor+ListMixin;", $isList: true, $asList: function() { return [$.Node]; }, $isIterable: true, $asIterable: function() { return [$.Node]; }},

Interceptor_ListMixin_ImmutableListMixin0: {"": "Interceptor_ListMixin0+ImmutableListMixin;", $isList: true, $asList: function() { return [$.Node]; }, $isIterable: true, $asIterable: function() { return [$.Node]; }},

EventTarget_ListMixin: {"": "EventTarget+ListMixin;", $isList: true, $asList: function() { return [$.TextTrack]; }, $isIterable: true, $asIterable: function() { return [$.TextTrack]; }},

EventTarget_ListMixin_ImmutableListMixin: {"": "EventTarget_ListMixin+ImmutableListMixin;", $isList: true, $asList: function() { return [$.TextTrack]; }, $isIterable: true, $asIterable: function() { return [$.TextTrack]; }},

Interceptor_ListMixin1: {"": "Interceptor+ListMixin;", $isList: true, $asList: function() { return [$.Node]; }, $isIterable: true, $asIterable: function() { return [$.Node]; }},

Interceptor_ListMixin_ImmutableListMixin1: {"": "Interceptor_ListMixin1+ImmutableListMixin;", $isList: true, $asList: function() { return [$.Node]; }, $isIterable: true, $asIterable: function() { return [$.Node]; }},

_AttributeMap: {"": "Object;",
  clear$0: function(_) {
    var t1;
    for (t1 = $.JSArray_methods.get$iterator(this.get$keys()); t1.moveNext$0();)
      this.remove$1(this, t1.get$current());
  },
  forEach$1: function(_, f) {
    var t1, key;
    for (t1 = $.JSArray_methods.get$iterator(this.get$keys()); t1.moveNext$0();) {
      key = t1.get$current();
      f.call$2(key, this.$index(this, key));
    }
  },
  get$keys: function() {
    var attributes, keys, len, i, t1;
    attributes = this._element.attributes;
    keys = $.List_List($);
    for (len = attributes.length, i = 0; i < len; ++i) {
      if (i >= attributes.length)
        throw $.ioore(i);
      t1 = attributes[i];
      if (this._matches$1(t1))
        keys.push(t1.localName);
    }
    return keys;
  },
  get$values: function(_) {
    var attributes, values, len, i, t1;
    attributes = this._element.attributes;
    values = $.List_List($);
    for (len = attributes.length, i = 0; i < len; ++i) {
      if (i >= attributes.length)
        throw $.ioore(i);
      t1 = attributes[i];
      if (this._matches$1(t1))
        values.push($.get$value$x(t1));
    }
    return values;
  },
  $isMap: true,
  $asMap: function() { return [$.JSString, $.JSString]; }
},

_ElementAttributeMap: {"": "_AttributeMap;_element",
  $index: function(_, key) {
    return this._element.getAttribute(key);
  },
  $indexSet: function(_, key, value) {
    this._element.setAttribute(key, value);
  },
  remove$1: function(_, key) {
    var t1, value;
    t1 = this._element;
    value = t1.getAttribute(key);
    t1.removeAttribute(key);
    return value;
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i1(this, "remove$1", receiver);
  },
  get$length: function(_) {
    return this.get$keys().length;
  },
  _matches$1: function(node) {
    return node.namespaceURI == null;
  }
},

_EventStream: {"": "Stream;_target,_eventType,_useCapture",
  listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
    var t1, t2;
    t1 = new $._EventStreamSubscription(0, this._target, this._eventType, onData, this._useCapture);
    t2 = t1._onData;
    if (t2 != null && !(t1._pauseCount > 0))
      $.$$dom_addEventListener$3$x(t1._target, t1._eventType, t2, t1._useCapture);
    return t1;
  },
  listen$3$onDone$onError: function(onData, onDone, onError) {
    return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
  }
},

_EventStreamSubscription: {"": "StreamSubscription;_pauseCount,_target,_eventType,_onData,_useCapture",
  cancel$0: function() {
    var t1, t2;
    t1 = this._target;
    if (t1 == null)
      return;
    t2 = this._onData;
    if (t2 != null)
      $.$$dom_removeEventListener$3$x(t1, this._eventType, t2, this._useCapture);
    this._target = null;
    this._onData = null;
  },
  get$isPaused: function() {
    return this._pauseCount > 0;
  },
  _EventStreamSubscription$4: function(_target, _eventType, _onData, _useCapture) {
    var t1 = this._onData;
    if (t1 != null && !(this._pauseCount > 0))
      $.$$dom_addEventListener$3$x(this._target, this._eventType, t1, this._useCapture);
  }
},

EventStreamProvider: {"": "Object;_eventType",
  forTarget$2$useCapture: function(e, useCapture) {
    return new $._EventStream(e, this._eventType, useCapture);
  },
  forTarget$1: function(e) {
    return this.forTarget$2$useCapture(e, false);
  }
},

_CustomEventStreamProvider: {"": "Object;_eventTypeGetter",
  _eventTypeGetter$1: function(arg0) {
    return this._eventTypeGetter.call$1(arg0);
  },
  forTarget$2$useCapture: function(e, useCapture) {
    return new $._EventStream(e, this._eventTypeGetter$1(e), useCapture);
  },
  forTarget$1: function(e) {
    return this.forTarget$2$useCapture(e, false);
  }
},

ImmutableListMixin: {"": "Object;",
  get$iterator: function(receiver) {
    return new $.FixedSizeListIterator(receiver, this.get$length(receiver), -1, null);
  },
  add$1: function(receiver, value) {
    throw $.wrapException(new $.UnsupportedError("Cannot add to immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException(new $.UnsupportedError("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.wrapException(new $.UnsupportedError("Cannot remove from immutable List."));
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i1(this, "remove$1", receiver);
  },
  $isList: true,
  $asList: null,
  $isIterable: true,
  $asIterable: null
},

Point: {"": "Object;x>,y>",
  toString$0: function(_) {
    return "(" + $.S(this.x) + ", " + $.S(this.y) + ")";
  },
  $eq: function(_, other) {
    if (other == null)
      return false;
    if (typeof other !== "object" || other === null || !$.getInterceptor(other).$isPoint)
      return false;
    else
      other;
    return $.$eq(this.x, other.x) && $.$eq(this.y, other.y);
  },
  $add: function(_, other) {
    var t1, t2, t3;
    t1 = this.x;
    if (typeof t1 !== "number")
      return this.$$add$bailout(1, other, t1);
    t2 = $.getInterceptor$x(other);
    t3 = t2.get$x(other);
    if (typeof t3 !== "number")
      return this.$$add$bailout(2, other, t1, t2, t3);
    t3 = t1 + t3;
    t1 = this.y;
    if (typeof t1 !== "number")
      return this.$$add$bailout(3, other, t1, t2, t3);
    t2 = t2.get$y(other);
    if (typeof t2 !== "number")
      return this.$$add$bailout(4, 0, t1, t2, t3);
    return new $.Point(t3, t1 + t2);
  },
  $$add$bailout: function(state0, other, t1, t2, t3) {
    switch (state0) {
      case 0:
        t1 = this.x;
      case 1:
        state0 = 0;
        t2 = $.getInterceptor$x(other);
        t3 = t2.get$x(other);
      case 2:
        state0 = 0;
        t3 = $.$add$ns(t1, t3);
        t1 = this.y;
      case 3:
        state0 = 0;
        t2 = t2.get$y(other);
      case 4:
        state0 = 0;
        return new $.Point(t3, $.$add$ns(t1, t2));
    }
  },
  $sub: function(_, other) {
    var t1, t2, t3;
    t1 = this.x;
    if (typeof t1 !== "number")
      return this.$$sub$bailout(1, other, t1);
    t2 = $.getInterceptor$x(other);
    t3 = t2.get$x(other);
    if (typeof t3 !== "number")
      return this.$$sub$bailout(2, other, t1, t2, t3);
    t3 = t1 - t3;
    t1 = this.y;
    if (typeof t1 !== "number")
      return this.$$sub$bailout(3, other, t1, t2, t3);
    t2 = t2.get$y(other);
    if (typeof t2 !== "number")
      return this.$$sub$bailout(4, 0, t1, t2, t3);
    return new $.Point(t3, t1 - t2);
  },
  $$sub$bailout: function(state0, other, t1, t2, t3) {
    switch (state0) {
      case 0:
        t1 = this.x;
      case 1:
        state0 = 0;
        t2 = $.getInterceptor$x(other);
        t3 = t2.get$x(other);
      case 2:
        state0 = 0;
        t3 = $.$sub$n(t1, t3);
        t1 = this.y;
      case 3:
        state0 = 0;
        t2 = t2.get$y(other);
      case 4:
        state0 = 0;
        return new $.Point(t3, $.$sub$n(t1, t2));
    }
  },
  $mul: function(_, factor) {
    var t1, t2;
    if (typeof factor !== "number")
      return this.$$mul$bailout(1, factor);
    t1 = this.x;
    if (typeof t1 !== "number")
      return this.$$mul$bailout(2, factor, t1);
    t1 *= factor;
    t2 = this.y;
    if (typeof t2 !== "number")
      return this.$$mul$bailout(3, factor, t1, t2);
    return new $.Point(t1, t2 * factor);
  },
  $$mul$bailout: function(state0, factor, t1, t2) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = this.x;
      case 2:
        state0 = 0;
        t1 = $.$mul$n(t1, factor);
        t2 = this.y;
      case 3:
        state0 = 0;
        return new $.Point(t1, $.$mul$n(t2, factor));
    }
  },
  ceil$0: function(_) {
    return new $.Point($.ceil$0$nx(this.x), $.ceil$0$nx(this.y));
  },
  floor$0: function(_) {
    return new $.Point($.floor$0$nx(this.x), $.floor$0$nx(this.y));
  },
  toInt$0: function(_) {
    return new $.Point($.toInt$0$nx(this.x), $.toInt$0$nx(this.y));
  },
  $isPoint: true
},

Rect: {"": "Object;left>,top>,width>,height>",
  get$right: function(_) {
    return $.$add$ns(this.left, this.width);
  },
  get$bottom: function(_) {
    return $.$add$ns(this.top, this.height);
  },
  toString$0: function(_) {
    return "(" + $.S(this.left) + ", " + $.S(this.top) + ", " + $.S(this.width) + ", " + $.S(this.height) + ")";
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    if (typeof other !== "object" || other === null || !$.getInterceptor(other).$isRect)
      return false;
    t1 = $.getInterceptor$x(other);
    return $.$eq(this.left, t1.get$left(other)) && $.$eq(this.top, t1.get$top(other)) && $.$eq(this.width, t1.get$width(other)) && $.$eq(this.height, t1.get$height(other));
  },
  ceil$0: function(_) {
    return new $.Rect($.ceil$0$nx(this.left), $.ceil$0$nx(this.top), $.ceil$0$nx(this.width), $.ceil$0$nx(this.height));
  },
  floor$0: function(_) {
    return new $.Rect($.floor$0$nx(this.left), $.floor$0$nx(this.top), $.floor$0$nx(this.width), $.floor$0$nx(this.height));
  },
  toInt$0: function(_) {
    return new $.Rect($.toInt$0$nx(this.left), $.toInt$0$nx(this.top), $.toInt$0$nx(this.width), $.toInt$0$nx(this.height));
  },
  $isRect: true,
  $asRect: null
},

_DOMWindowCrossFrame: {"": "Object;_window",
  get$top: function(_) {
    return $._DOMWindowCrossFrame__createSafe(this._window.top);
  }
},

FixedSizeListIterator: {"": "Object;_array,_liblib$_length,_position,_current",
  moveNext$0: function() {
    var t1, nextPosition;
    t1 = this._position;
    if (typeof t1 !== "number")
      return this.moveNext$0$bailout(1, t1);
    nextPosition = t1 + 1;
    t1 = this._liblib$_length;
    if (nextPosition < t1) {
      t1 = this._array;
      if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !$.isJsIndexable(t1, t1[$.dispatchPropertyName])))
        return this.moveNext$0$bailout(2, t1, nextPosition);
      if (nextPosition >>> 0 !== nextPosition || nextPosition >= t1.length)
        throw $.ioore(nextPosition);
      this._current = t1[nextPosition];
      this._position = nextPosition;
      return true;
    }
    this._current = null;
    this._position = t1;
    return false;
  },
  moveNext$0$bailout: function(state0, t1, nextPosition) {
    switch (state0) {
      case 0:
        t1 = this._position;
      case 1:
        state0 = 0;
        nextPosition = $.$add$ns(t1, 1);
        t1 = this._liblib$_length;
      case 2:
        if (state0 === 2 || state0 === 0 && $.$lt$n(nextPosition, t1))
          switch (state0) {
            case 0:
              t1 = this._array;
            case 2:
              state0 = 0;
              this._current = $.$index$asx(t1, nextPosition);
              this._position = nextPosition;
              return true;
          }
        this._current = null;
        this._position = t1;
        return false;
    }
  },
  get$current: function() {
    return this._current;
  }
},

AudioElement_AudioElement: function(src) {
  var t1 = $ === src;
  if (t1)
    src = null;
  if (!t1)
    return new Audio(src);
  return new Audio();
},

CanvasElement_CanvasElement: function(height, width) {
  var e = document.createElement("canvas");
  if (width != null)
    $.set$width$x(e, width);
  if (height != null)
    $.set$height$x(e, height);
  return e;
},

Element__determineMouseWheelEventType: function(e) {
  if (e.onwheel !== undefined)
    return "wheel";
  else if (e.onmousewheel !== undefined)
    return "mousewheel";
  else
    return "DOMMouseScroll";
},

ImageElement_ImageElement: function(height, src, width) {
  var e = document.createElement("img");
  $.set$src$x(e, src);
  if (width != null)
    $.set$width$x(e, width);
  if (height != null)
    $.set$height$x(e, height);
  return e;
},

_ChildNodeListLazy$: function(_this) {
  return new $._ChildNodeListLazy(_this);
},

_convertNativeToDart_Window: function(win) {
  return $._DOMWindowCrossFrame__createSafe(win);
},

_convertNativeToDart_EventTarget: function(e) {
  var $window;
  if ("setInterval" in e) {
    $window = $._DOMWindowCrossFrame__createSafe(e);
    if (typeof $window === "object" && $window !== null && !!$.getInterceptor($window).$isEventTarget)
      return $window;
    return;
  } else
    return e;
},

_DOMWindowCrossFrame__createSafe: function(w) {
  if (w === window)
    return w;
  else
    return new $._DOMWindowCrossFrame(w);
}}],
["dart.isolate", {
ReceivePort: {"": "Object;"}}],
["dart.math", {
_Random: {"": "Object;"}}],
["dart.typed_data", {
_Lists_getRange: function(a, start, end, accumulator) {
  var i;
  if (start !== (start | 0))
    return $._Lists_getRange$bailout(1, a, start, end, accumulator);
  if (typeof end !== "number")
    return $._Lists_getRange$bailout(1, a, start, end, accumulator);
  if (start < 0)
    throw $.wrapException(new $.RangeError("value " + start));
  if (end < start)
    throw $.wrapException(new $.RangeError("value " + $.S(end)));
  if (end > a.length)
    throw $.wrapException(new $.RangeError("value " + $.S(end)));
  for (i = start; i < end; ++i) {
    if (i >= a.length)
      throw $.ioore(i);
    accumulator.push(a[i]);
  }
  return accumulator;
},

_Lists_getRange$bailout: function(state0, a, start, end, accumulator) {
  var t1, i;
  if ($.$lt$n(start, 0))
    throw $.wrapException(new $.RangeError("value " + $.S(start)));
  t1 = $.getInterceptor$n(end);
  if (t1.$lt(end, start))
    throw $.wrapException(new $.RangeError("value " + $.S(end)));
  if (t1.$gt(end, a.length))
    throw $.wrapException(new $.RangeError("value " + $.S(end)));
  for (i = start; $.$lt$n(i, end); ++i) {
    if (i >>> 0 !== i || i >= a.length)
      throw $.ioore(i);
    accumulator.push(a[i]);
  }
  return accumulator;
}}],
["html_common", {
convertDartToNative_Dictionary_closure: {"": "Closure;object_0",
  call$2: function(key, value) {
    this.object_0[key] = value;
  }
},

FilteredElementList: {"": "ListBase;_node,_childNodes",
  get$_filtered: function() {
    var t1 = this._childNodes;
    return $.List_List$from(t1.where$1(t1, new $.FilteredElementList__filtered_closure()), true);
  },
  forEach$1: function(_, f) {
    $.IterableMixinWorkaround_forEach(this.get$_filtered(), f);
  },
  $indexSet: function(_, index, value) {
    var t1 = this.get$_filtered();
    if (index >>> 0 !== index || index >= t1.length)
      throw $.ioore(index);
    $.replaceWith$1$x(t1[index], value);
  },
  set$length: function(_, newLength) {
    var len;
    if (typeof newLength !== "number")
      return this.set$length$bailout(1, newLength);
    len = this.get$_filtered().length;
    if (newLength >= len)
      return;
    else if (newLength < 0)
      throw $.wrapException(new $.ArgumentError("Invalid list length"));
    this.removeRange$2(this, newLength, len);
  },
  set$length$bailout: function(state0, newLength) {
    var len, t1;
    len = this.get$_filtered().length;
    t1 = $.getInterceptor$n(newLength);
    if (t1.$ge(newLength, len))
      return;
    else if (t1.$lt(newLength, 0))
      throw $.wrapException(new $.ArgumentError("Invalid list length"));
    this.removeRange$2(this, newLength, len);
  },
  add$1: function(_, value) {
    this._childNodes._this.appendChild(value);
  },
  addAll$1: function(_, iterable) {
    var t1, t2;
    for (t1 = $.get$iterator$ax(iterable), t2 = this._childNodes._this; t1.moveNext$0() === true;)
      t2.appendChild(t1.get$current());
  },
  setRange$4: function(_, start, end, iterable, skipCount) {
    throw $.wrapException(new $.UnsupportedError("Cannot setRange on filtered list"));
  },
  removeRange$2: function(_, start, end) {
    $.IterableMixinWorkaround_forEach($.sublist$2$ax(this.get$_filtered(), start, end), new $.FilteredElementList_removeRange_closure());
  },
  clear$0: function(_) {
    this._childNodes._this.textContent = "";
  },
  removeLast$0: function(_) {
    var result = this.get$last(this);
    if (result != null)
      $.remove$0$ax(result);
    return result;
  },
  remove$1: function(_, element) {
    var i, t1, indexElement;
    if (typeof element !== "object" || element === null || !$.getInterceptor(element).$isElement)
      return false;
    else
      element;
    for (i = 0; i < this.get$_filtered().length; ++i) {
      t1 = this.get$_filtered();
      if (i >= t1.length)
        throw $.ioore(i);
      indexElement = t1[i];
      if (indexElement === element) {
        $.remove$0$ax(indexElement);
        return true;
      }
    }
    return false;
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i1(this, "remove$1", receiver);
  },
  get$length: function(_) {
    return this.get$_filtered().length;
  },
  $index: function(_, index) {
    var t1 = this.get$_filtered();
    if (index >>> 0 !== index || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  get$iterator: function(_) {
    var t1 = this.get$_filtered();
    return new $.ListIterator(t1, t1.length, 0, null);
  },
  $asList: null,
  $asIterable: null
},

FilteredElementList__filtered_closure: {"": "Closure;",
  call$1: function(n) {
    return typeof n === "object" && n !== null && !!$.getInterceptor(n).$isElement;
  }
},

FilteredElementList_removeRange_closure: {"": "Closure;",
  call$1: function(el) {
    return $.remove$0$ax(el);
  }
},

convertDartToNative_Dictionary: function(dict) {
  var object;
  if (dict == null)
    return;
  object = {};
  dict.forEach$1(dict, new $.convertDartToNative_Dictionary_closure(object));
  return object;
}}],
["metadata", {
SupportedBrowser: {"": "Object;browserName,minimumVersion"},

DomName: {"": "Object;name"}}],
]);
Isolate.$finishClasses($$, $, null);
$$ = null;

$.IsolateNatives__processWorkerMessage$closure = new $.Closure$_processWorkerMessage($.IsolateNatives__processWorkerMessage, "IsolateNatives__processWorkerMessage$closure");
$.Primitives__throwFormatException$closure = new $.Closure$_throwFormatException($.Primitives__throwFormatException, "Primitives__throwFormatException$closure");
$.wrapException$closure = new $.Closure$wrapException($.wrapException, "wrapException$closure");
$.DartError_toStringWrapper$closure = new $.Closure$toStringWrapper($.DartError_toStringWrapper, "DartError_toStringWrapper$closure");
$.invokeClosure$closure = new $.Closure$invokeClosure($.invokeClosure, "invokeClosure$closure");
$.typeNameInChrome$closure = new $.Closure$typeNameInChrome($.typeNameInChrome, "typeNameInChrome$closure");
$.typeNameInSafari$closure = new $.Closure$typeNameInSafari($.typeNameInSafari, "typeNameInSafari$closure");
$.typeNameInOpera$closure = new $.Closure$typeNameInOpera($.typeNameInOpera, "typeNameInOpera$closure");
$.typeNameInFirefox$closure = new $.Closure$typeNameInFirefox($.typeNameInFirefox, "typeNameInFirefox$closure");
$.typeNameInIE$closure = new $.Closure$typeNameInIE($.typeNameInIE, "typeNameInIE$closure");
$.constructorNameFallback$closure = new $.Closure$constructorNameFallback($.constructorNameFallback, "constructorNameFallback$closure");
$.doneResizing$closure = new $.Closure$doneResizing($.doneResizing, "doneResizing$closure");
$.main$closure = new $.Closure$main($.main, "main$closure");
$._asyncRunCallback$closure = new $.Closure$_asyncRunCallback($._asyncRunCallback, "_asyncRunCallback$closure");
$._nullDataHandler$closure = new $.Closure$_nullDataHandler($._nullDataHandler, "_nullDataHandler$closure");
$._nullErrorHandler$closure = new $.Closure$_nullErrorHandler($._nullErrorHandler, "_nullErrorHandler$closure");
$._nullDoneHandler$closure = new $.Closure$_nullDoneHandler($._nullDoneHandler, "_nullDoneHandler$closure");
$.Comparable_compare$closure = new $.Closure$compare($.Comparable_compare, "Comparable_compare$closure");
$.Element__determineMouseWheelEventType$closure = new $.Closure$_determineMouseWheelEventType($.Element__determineMouseWheelEventType, "Element__determineMouseWheelEventType$closure");
Isolate.makeConstantList = function(list) {
  list.immutable$list = true;
  list.fixed$length = true;
  return list;
};
$.List_empty = Isolate.makeConstantList([]);
$.EventStreamProvider_canplay = new $.EventStreamProvider("canplay");
$.EventStreamProvider_keydown = new $.EventStreamProvider("keydown");
$.Window_methods = $.Window.prototype;
$.HtmlDocument_methods = $.HtmlDocument.prototype;
$.C__Random = new $._Random();
$.EventStreamProvider_keyup = new $.EventStreamProvider("keyup");
$.JSArray_methods = $.JSArray.prototype;
$._CustomEventStreamProvider__determineMouseWheelEventType = new $._CustomEventStreamProvider($.Element__determineMouseWheelEventType$closure);
$.C_JSUnknown = new $.JSUnknown();
$.Duration_0 = new $.Duration(0);
$.JSNull_methods = $.JSNull.prototype;
$.EventStreamProvider_click = new $.EventStreamProvider("click");
$.C_NullThrownError = new $.NullThrownError();
$.JSInt_methods = $.JSInt.prototype;
$.EventStreamProvider_dblclick = new $.EventStreamProvider("dblclick");
$.NodeList_methods = $.NodeList.prototype;
$.EventStreamProvider_load = new $.EventStreamProvider("load");
$.EventStreamProvider_mousedown = new $.EventStreamProvider("mousedown");
$.EventStreamProvider_contextmenu = new $.EventStreamProvider("contextmenu");
$.C_CloseToken = new $.CloseToken();
$.JSNumber_methods = $.JSNumber.prototype;
$.JSString_methods = $.JSString.prototype;
$.EventStreamProvider_mousemove = new $.EventStreamProvider("mousemove");
$.EventStreamProvider_mouseup = new $.EventStreamProvider("mouseup");
$.EventStreamProvider_resize = new $.EventStreamProvider("resize");
$.dispatchPropertyName = null;
$.lazyPort = null;
$.ReceivePortImpl__nextFreeId = 1;
$.Primitives_hashCodeSeed = 0;
$._getTypeNameOf = null;
$.interceptorsByTag = null;
$.leafTags = null;
$.engine = null;
$.game = null;
$._callbacksAreEnqueued = false;
$.Expando__keyCount = 0;
$.$$dom_addEventListener$3$x = function(receiver, a0, a1, a2) {
  return $.getInterceptor$x(receiver).$$dom_addEventListener$3(receiver, a0, a1, a2);
};
$.$$dom_removeEventListener$3$x = function(receiver, a0, a1, a2) {
  return $.getInterceptor$x(receiver).$$dom_removeEventListener$3(receiver, a0, a1, a2);
};
$.$$dom_replaceChild$2$x = function(receiver, a0, a1) {
  return $.getInterceptor$x(receiver).$$dom_replaceChild$2(receiver, a0, a1);
};
$.$add$ns = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver + a0;
  return $.getInterceptor$ns(receiver).$add(receiver, a0);
};
$.$and$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return (receiver & a0) >>> 0;
  return $.getInterceptor$n(receiver).$and(receiver, a0);
};
$.$div$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver / a0;
  return $.getInterceptor$n(receiver).$div(receiver, a0);
};
$.$eq = function(receiver, a0) {
  if (receiver == null)
    return a0 == null;
  if (typeof receiver != "object")
    return a0 != null && receiver === a0;
  return $.getInterceptor(receiver).$eq(receiver, a0);
};
$.$ge$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver >= a0;
  return $.getInterceptor$n(receiver).$ge(receiver, a0);
};
$.$gt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver > a0;
  return $.getInterceptor$n(receiver).$gt(receiver, a0);
};
$.$index$asx = function(receiver, a0) {
  if (receiver.constructor == Array || typeof receiver == "string")
    if (a0 >>> 0 === a0 && a0 < receiver.length)
      return receiver[a0];
  return $.getInterceptor$asx(receiver).$index(receiver, a0);
};
$.$indexSet$ax = function(receiver, a0, a1) {
  if (receiver.constructor == Array && !receiver.immutable$list && a0 >>> 0 === a0 && a0 < receiver.length)
    return receiver[a0] = a1;
  return $.getInterceptor$ax(receiver).$indexSet(receiver, a0, a1);
};
$.$le$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver <= a0;
  return $.getInterceptor$n(receiver).$le(receiver, a0);
};
$.$lt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver < a0;
  return $.getInterceptor$n(receiver).$lt(receiver, a0);
};
$.$mul$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver * a0;
  return $.getInterceptor$n(receiver).$mul(receiver, a0);
};
$.$negate$n = function(receiver) {
  if (typeof receiver == "number")
    return -receiver;
  return $.getInterceptor$n(receiver).$negate(receiver);
};
$.$shl$n = function(receiver, a0) {
  return $.getInterceptor$n(receiver).$shl(receiver, a0);
};
$.$sub$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver - a0;
  return $.getInterceptor$n(receiver).$sub(receiver, a0);
};
$.abs$0$n = function(receiver) {
  return $.getInterceptor$n(receiver).abs$0(receiver);
};
$.add$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).add$1(receiver, a0);
};
$.beginPath$0$x = function(receiver) {
  return $.getInterceptor$x(receiver).beginPath$0(receiver);
};
$.ceil$0$nx = function(receiver) {
  return $.getInterceptor$nx(receiver).ceil$0(receiver);
};
$.clear$0$ax = function(receiver) {
  return $.getInterceptor$ax(receiver).clear$0(receiver);
};
$.clearRect$4$x = function(receiver, a0, a1, a2, a3) {
  return $.getInterceptor$x(receiver).clearRect$4(receiver, a0, a1, a2, a3);
};
$.compareTo$1$ns = function(receiver, a0) {
  return $.getInterceptor$ns(receiver).compareTo$1(receiver, a0);
};
$.control$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).control$1(receiver, a0);
};
$.createPattern$2$x = function(receiver, a0, a1) {
  return $.getInterceptor$x(receiver).createPattern$2(receiver, a0, a1);
};
$.drawImage$3$x = function(receiver, a0, a1, a2) {
  return $.getInterceptor$x(receiver).drawImage$3(receiver, a0, a1, a2);
};
$.drawImageScaled$5$x = function(receiver, a0, a1, a2, a3, a4) {
  return $.getInterceptor$x(receiver).drawImageScaled$5(receiver, a0, a1, a2, a3, a4);
};
$.drawImageScaledFromSource$9$x = function(receiver, a0, a1, a2, a3, a4, a5, a6, a7, a8) {
  return $.getInterceptor$x(receiver).drawImageScaledFromSource$9(receiver, a0, a1, a2, a3, a4, a5, a6, a7, a8);
};
$.elementAt$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).elementAt$1(receiver, a0);
};
$.fillRect$4$x = function(receiver, a0, a1, a2, a3) {
  return $.getInterceptor$x(receiver).fillRect$4(receiver, a0, a1, a2, a3);
};
$.floor$0$nx = function(receiver) {
  return $.getInterceptor$nx(receiver).floor$0(receiver);
};
$.forEach$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).forEach$1(receiver, a0);
};
$.get$bottom$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$bottom(receiver);
};
$.get$children$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$children(receiver);
};
$.get$currentTarget$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$currentTarget(receiver);
};
$.get$currentTime$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$currentTime(receiver);
};
$.get$ended$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$ended(receiver);
};
$.get$hashCode$ = function(receiver) {
  return $.getInterceptor(receiver).get$hashCode(receiver);
};
$.get$height$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$height(receiver);
};
$.get$id$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$id(receiver);
};
$.get$index$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$index(receiver);
};
$.get$iterator$ax = function(receiver) {
  return $.getInterceptor$ax(receiver).get$iterator(receiver);
};
$.get$key$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$key(receiver);
};
$.get$left$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$left(receiver);
};
$.get$length$asx = function(receiver) {
  return $.getInterceptor$asx(receiver).get$length(receiver);
};
$.get$nodes$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$nodes(receiver);
};
$.get$onLoad$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$onLoad(receiver);
};
$.get$position$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$position(receiver);
};
$.get$remove$ax = function(receiver) {
  return $.getInterceptor$ax(receiver).get$remove(receiver);
};
$.get$right$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$right(receiver);
};
$.get$seed$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$seed(receiver);
};
$.get$selected$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$selected(receiver);
};
$.get$size$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$size(receiver);
};
$.get$status$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$status(receiver);
};
$.get$target$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$target(receiver);
};
$.get$top$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$top(receiver);
};
$.get$value$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$value(receiver);
};
$.get$which$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$which(receiver);
};
$.get$width$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$width(receiver);
};
$.get$x$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$x(receiver);
};
$.get$y$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$y(receiver);
};
$.get$z$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$z(receiver);
};
$.getContext$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).getContext$1(receiver, a0);
};
$.lineTo$2$x = function(receiver, a0, a1) {
  return $.getInterceptor$x(receiver).lineTo$2(receiver, a0, a1);
};
$.moveTo$2$x = function(receiver, a0, a1) {
  return $.getInterceptor$x(receiver).moveTo$2(receiver, a0, a1);
};
$.play$0$x = function(receiver) {
  return $.getInterceptor$x(receiver).play$0(receiver);
};
$.preventDefault$0$x = function(receiver) {
  return $.getInterceptor$x(receiver).preventDefault$0(receiver);
};
$.register$2$x = function(receiver, a0, a1) {
  return $.getInterceptor$x(receiver).register$2(receiver, a0, a1);
};
$.remove$0$ax = function(receiver) {
  return $.getInterceptor$ax(receiver).remove$0(receiver);
};
$.replaceWith$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).replaceWith$1(receiver, a0);
};
$.restore$0$x = function(receiver) {
  return $.getInterceptor$x(receiver).restore$0(receiver);
};
$.save$0$x = function(receiver) {
  return $.getInterceptor$x(receiver).save$0(receiver);
};
$.set$bottom$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$bottom(receiver, value);
};
$.set$fillStyle$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$fillStyle(receiver, value);
};
$.set$globalAlpha$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$globalAlpha(receiver, value);
};
$.set$globalCompositeOperation$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$globalCompositeOperation(receiver, value);
};
$.set$height$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$height(receiver, value);
};
$.set$index$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$index(receiver, value);
};
$.set$innerHtml$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$innerHtml(receiver, value);
};
$.set$left$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$left(receiver, value);
};
$.set$lineWidth$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$lineWidth(receiver, value);
};
$.set$remove$ax = function(receiver, value) {
  return $.getInterceptor$ax(receiver).set$remove(receiver, value);
};
$.set$right$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$right(receiver, value);
};
$.set$selected$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$selected(receiver, value);
};
$.set$src$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$src(receiver, value);
};
$.set$status$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$status(receiver, value);
};
$.set$strokeStyle$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$strokeStyle(receiver, value);
};
$.set$top$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$top(receiver, value);
};
$.set$volume$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$volume(receiver, value);
};
$.set$width$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$width(receiver, value);
};
$.set$x$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$x(receiver, value);
};
$.set$y$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$y(receiver, value);
};
$.setProperty$3$x = function(receiver, a0, a1, a2) {
  return $.getInterceptor$x(receiver).setProperty$3(receiver, a0, a1, a2);
};
$.stroke$0$x = function(receiver) {
  return $.getInterceptor$x(receiver).stroke$0(receiver);
};
$.strokeRect$4$x = function(receiver, a0, a1, a2, a3) {
  return $.getInterceptor$x(receiver).strokeRect$4(receiver, a0, a1, a2, a3);
};
$.sublist$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).sublist$1(receiver, a0);
};
$.sublist$2$ax = function(receiver, a0, a1) {
  return $.getInterceptor$ax(receiver).sublist$2(receiver, a0, a1);
};
$.substring$1$s = function(receiver, a0) {
  return $.getInterceptor$s(receiver).substring$1(receiver, a0);
};
$.substring$2$s = function(receiver, a0, a1) {
  return $.getInterceptor$s(receiver).substring$2(receiver, a0, a1);
};
$.toInt$0$nx = function(receiver) {
  return $.getInterceptor$nx(receiver).toInt$0(receiver);
};
$.toList$0$ax = function(receiver) {
  return $.getInterceptor$ax(receiver).toList$0(receiver);
};
$.toString$0 = function(receiver) {
  return $.getInterceptor(receiver).toString$0(receiver);
};
$.toStringAsFixed$1$n = function(receiver, a0) {
  return $.getInterceptor$n(receiver).toStringAsFixed$1(receiver, a0);
};
$.translate$2$x = function(receiver, a0, a1) {
  return $.getInterceptor$x(receiver).translate$2(receiver, a0, a1);
};
$.getInterceptor = function(receiver) {
  if (typeof receiver == "number") {
    if (Math.floor(receiver) == receiver)
      return $.JSInt.prototype;
    return $.JSDouble.prototype;
  }
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return $.JSNull.prototype;
  if (typeof receiver == "boolean")
    return $.JSBool.prototype;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof $.Object)
    return receiver;
  if (Object.getPrototypeOf(receiver) === Object.prototype)
    return $.Interceptor.prototype;
  return $.getNativeInterceptor(receiver);
};
$.getInterceptor$asx = function(receiver) {
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof $.Object)
    return receiver;
  if (Object.getPrototypeOf(receiver) === Object.prototype)
    return $.Interceptor.prototype;
  return $.getNativeInterceptor(receiver);
};
$.getInterceptor$ax = function(receiver) {
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof $.Object)
    return receiver;
  if (Object.getPrototypeOf(receiver) === Object.prototype)
    return $.Interceptor.prototype;
  return $.getNativeInterceptor(receiver);
};
$.getInterceptor$n = function(receiver) {
  if (typeof receiver == "number")
    return $.JSNumber.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof $.Object))
    return $.JSUnknown.prototype;
  return receiver;
};
$.getInterceptor$ns = function(receiver) {
  if (typeof receiver == "number")
    return $.JSNumber.prototype;
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof $.Object))
    return $.JSUnknown.prototype;
  return receiver;
};
$.getInterceptor$nx = function(receiver) {
  if (typeof receiver == "number")
    return $.JSNumber.prototype;
  if (receiver == null)
    return receiver;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof $.Object)
    return receiver;
  if (Object.getPrototypeOf(receiver) === Object.prototype)
    return $.Interceptor.prototype;
  return $.getNativeInterceptor(receiver);
};
$.getInterceptor$s = function(receiver) {
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof $.Object))
    return $.JSUnknown.prototype;
  return receiver;
};
$.getInterceptor$x = function(receiver) {
  if (receiver == null)
    return receiver;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof $.Object)
    return receiver;
  if (Object.getPrototypeOf(receiver) === Object.prototype)
    return $.Interceptor.prototype;
  return $.getNativeInterceptor(receiver);
};
Isolate.$lazy($, "globalThis", "globalThis", "get$globalThis", function() {
  return function() { return this; }();
});
Isolate.$lazy($, "globalWindow", "globalWindow", "get$globalWindow", function() {
  return $.get$globalThis().window;
});
Isolate.$lazy($, "globalWorker", "globalWorker", "get$globalWorker", function() {
  return $.get$globalThis().Worker;
});
Isolate.$lazy($, "globalPostMessageDefined", "globalPostMessageDefined", "get$globalPostMessageDefined", function() {
  return $.get$globalThis().postMessage !== void 0;
});
Isolate.$lazy($, "thisScript", "IsolateNatives_thisScript", "get$IsolateNatives_thisScript", function() {
  return $.IsolateNatives_computeThisScript();
});
Isolate.$lazy($, "workerIds", "IsolateNatives_workerIds", "get$IsolateNatives_workerIds", function() {
  return new $.Expando(null);
});
Isolate.$lazy($, "_stackTraceExpando", "_stackTraceExpando", "get$_stackTraceExpando", function() {
  return new $.Expando("asynchronous error");
});
Isolate.$lazy($, "_asyncCallbacks", "_asyncCallbacks", "get$_asyncCallbacks", function() {
  return [];
});
// Native classes
$.defineNativeMethodsNonleaf("HTMLElement", $._HTMLElement);

$.defineNativeMethods("HTMLAnchorElement", $.AnchorElement);

$.defineNativeMethods("WebKitAnimationEvent", $.AnimationEvent);

$.defineNativeMethods("HTMLAreaElement", $.AreaElement);

$.defineNativeMethods("Attr", $.Attr);

$.defineNativeMethods("HTMLAudioElement", $.AudioElement);

$.defineNativeMethods("AutocompleteErrorEvent", $.AutocompleteErrorEvent);

$.defineNativeMethods("HTMLBRElement", $.BRElement);

$.defineNativeMethods("HTMLBaseElement", $.BaseElement);

$.defineNativeMethods("BeforeLoadEvent", $.BeforeLoadEvent);

$.defineNativeMethods("HTMLBodyElement", $.BodyElement);

$.defineNativeMethods("HTMLButtonElement", $.ButtonElement);

$.defineNativeMethods("CDATASection", $.CDataSection);

$.defineNativeMethods("HTMLCanvasElement", $.CanvasElement);

$.defineNativeMethods("CanvasGradient", $.CanvasGradient);

$.defineNativeMethods("CanvasPattern", $.CanvasPattern);

$.defineNativeMethodsNonleaf("CanvasRenderingContext", $.CanvasRenderingContext);

$.defineNativeMethods("CanvasRenderingContext2D", $.CanvasRenderingContext2D);

$.defineNativeMethodsNonleaf("CharacterData", $.CharacterData);

$.defineNativeMethods("CloseEvent", $.CloseEvent);

$.defineNativeMethods("Comment", $.Comment);

$.defineNativeMethods("CompositionEvent", $.CompositionEvent);

$.defineNativeMethods("HTMLContentElement", $.ContentElement);

$.defineNativeMethods("CSSFontFaceLoadEvent", $.CssFontFaceLoadEvent);

$.defineNativeMethods("CSSStyleDeclaration", $.CssStyleDeclaration);

$.defineNativeMethods("CustomElementConstructor", $.CustomElementConstructor);

$.defineNativeMethods("CustomEvent", $.CustomEvent);

$.defineNativeMethods("HTMLDListElement", $.DListElement);

$.defineNativeMethods("HTMLDataListElement", $.DataListElement);

$.defineNativeMethods("HTMLDetailsElement", $.DetailsElement);

$.defineNativeMethods("DeviceMotionEvent", $.DeviceMotionEvent);

$.defineNativeMethods("DeviceOrientationEvent", $.DeviceOrientationEvent);

$.defineNativeMethods("HTMLDialogElement", $.DialogElement);

$.defineNativeMethods("HTMLDivElement", $.DivElement);

$.defineNativeMethodsNonleaf("Document", $.Document);

$.defineNativeMethodsNonleaf("DocumentFragment", $.DocumentFragment);

$.defineNativeMethods("DocumentType", $.DocumentType);

$.defineNativeMethods("DOMError", $.DomError);

$.defineNativeMethods("DOMException", $.DomException);

$.defineNativeMethodsNonleaf("Element", $.Element);

$.defineNativeMethods("HTMLEmbedElement", $.EmbedElement);

$.defineNativeMethods("ErrorEvent", $.ErrorEvent);

$.defineNativeMethodsNonleaf("Event", $.Event);

$.defineNativeMethods("EventException", $.EventException);

$.defineNativeMethodsNonleaf("EventTarget", $.EventTarget);

$.defineNativeMethods("HTMLFieldSetElement", $.FieldSetElement);

$.defineNativeMethods("FileError", $.FileError);

$.defineNativeMethods("FileException", $.FileException);

$.defineNativeMethods("FocusEvent", $.FocusEvent);

$.defineNativeMethods("HTMLFormElement", $.FormElement);

$.defineNativeMethods("HTMLHRElement", $.HRElement);

$.defineNativeMethods("HashChangeEvent", $.HashChangeEvent);

$.defineNativeMethods("HTMLHeadElement", $.HeadElement);

$.defineNativeMethods("HTMLHeadingElement", $.HeadingElement);

$.defineNativeMethodsNonleaf("HTMLCollection", $.HtmlCollection);

$.defineNativeMethods("HTMLDocument", $.HtmlDocument);

$.defineNativeMethods("HTMLHtmlElement", $.HtmlElement);

$.defineNativeMethods("HTMLFormControlsCollection", $.HtmlFormControlsCollection);

$.defineNativeMethods("HTMLOptionsCollection", $.HtmlOptionsCollection);

$.defineNativeMethods("XMLHttpRequestProgressEvent", $.HttpRequestProgressEvent);

$.defineNativeMethods("HTMLIFrameElement", $.IFrameElement);

$.defineNativeMethods("HTMLImageElement", $.ImageElement);

$.defineNativeMethods("HTMLInputElement", $.InputElement);

$.defineNativeMethods("KeyboardEvent", $.KeyboardEvent);

$.defineNativeMethods("HTMLKeygenElement", $.KeygenElement);

$.defineNativeMethods("HTMLLIElement", $.LIElement);

$.defineNativeMethods("HTMLLabelElement", $.LabelElement);

$.defineNativeMethods("HTMLLegendElement", $.LegendElement);

$.defineNativeMethods("HTMLLinkElement", $.LinkElement);

$.defineNativeMethods("HTMLMapElement", $.MapElement);

$.defineNativeMethods("MediaController", $.MediaController);

$.defineNativeMethodsNonleaf("HTMLMediaElement", $.MediaElement);

$.defineNativeMethods("MediaError", $.MediaError);

$.defineNativeMethods("MediaKeyError", $.MediaKeyError);

$.defineNativeMethods("MediaKeyEvent", $.MediaKeyEvent);

$.defineNativeMethods("MediaStreamEvent", $.MediaStreamEvent);

$.defineNativeMethods("MediaStreamTrackEvent", $.MediaStreamTrackEvent);

$.defineNativeMethods("HTMLMenuElement", $.MenuElement);

$.defineNativeMethods("MessageEvent", $.MessageEvent);

$.defineNativeMethods("HTMLMetaElement", $.MetaElement);

$.defineNativeMethods("HTMLMeterElement", $.MeterElement);

$.defineNativeMethods("MIDIConnectionEvent", $.MidiConnectionEvent);

$.defineNativeMethods("MIDIMessageEvent", $.MidiMessageEvent);

$.defineNativeMethods("HTMLModElement", $.ModElement);

$.defineNativeMethodsNonleaf("MouseEvent", $.MouseEvent);

$.defineNativeMethods("MutationEvent", $.MutationEvent);

$.defineNativeMethods("Navigator", $.Navigator);

$.defineNativeMethods("NavigatorUserMediaError", $.NavigatorUserMediaError);

$.defineNativeMethodsNonleaf("Node", $.Node);

$.defineNativeMethods("NodeList|RadioNodeList", $.NodeList);

$.defineNativeMethods("Notation", $.Notation);

$.defineNativeMethods("HTMLOListElement", $.OListElement);

$.defineNativeMethods("HTMLObjectElement", $.ObjectElement);

$.defineNativeMethods("HTMLOptGroupElement", $.OptGroupElement);

$.defineNativeMethods("HTMLOptionElement", $.OptionElement);

$.defineNativeMethods("HTMLOutputElement", $.OutputElement);

$.defineNativeMethods("OverflowEvent", $.OverflowEvent);

$.defineNativeMethods("PageTransitionEvent", $.PageTransitionEvent);

$.defineNativeMethods("HTMLParagraphElement", $.ParagraphElement);

$.defineNativeMethods("HTMLParamElement", $.ParamElement);

$.defineNativeMethods("PopStateEvent", $.PopStateEvent);

$.defineNativeMethods("PositionError", $.PositionError);

$.defineNativeMethods("HTMLPreElement", $.PreElement);

$.defineNativeMethods("ProcessingInstruction", $.ProcessingInstruction);

$.defineNativeMethods("HTMLProgressElement", $.ProgressElement);

$.defineNativeMethodsNonleaf("ProgressEvent", $.ProgressEvent);

$.defineNativeMethods("HTMLQuoteElement", $.QuoteElement);

$.defineNativeMethods("RTCDataChannelEvent", $.RtcDataChannelEvent);

$.defineNativeMethods("RTCDTMFToneChangeEvent", $.RtcDtmfToneChangeEvent);

$.defineNativeMethods("RTCIceCandidateEvent", $.RtcIceCandidateEvent);

$.defineNativeMethods("HTMLScriptElement", $.ScriptElement);

$.defineNativeMethods("SecurityPolicyViolationEvent", $.SecurityPolicyViolationEvent);

$.defineNativeMethods("HTMLSelectElement", $.SelectElement);

$.defineNativeMethods("HTMLShadowElement", $.ShadowElement);

$.defineNativeMethods("ShadowRoot", $.ShadowRoot);

$.defineNativeMethods("HTMLSourceElement", $.SourceElement);

$.defineNativeMethods("HTMLSpanElement", $.SpanElement);

$.defineNativeMethods("SpeechInputEvent", $.SpeechInputEvent);

$.defineNativeMethods("SpeechRecognitionError", $.SpeechRecognitionError);

$.defineNativeMethods("SpeechRecognitionEvent", $.SpeechRecognitionEvent);

$.defineNativeMethods("SpeechSynthesisEvent", $.SpeechSynthesisEvent);

$.defineNativeMethods("StorageEvent", $.StorageEvent);

$.defineNativeMethods("HTMLStyleElement", $.StyleElement);

$.defineNativeMethods("HTMLTableCaptionElement", $.TableCaptionElement);

$.defineNativeMethods("HTMLTableCellElement", $.TableCellElement);

$.defineNativeMethods("HTMLTableColElement", $.TableColElement);

$.defineNativeMethods("HTMLTableElement", $.TableElement);

$.defineNativeMethods("HTMLTableRowElement", $.TableRowElement);

$.defineNativeMethods("HTMLTableSectionElement", $.TableSectionElement);

$.defineNativeMethods("HTMLTemplateElement", $.TemplateElement);

$.defineNativeMethodsNonleaf("Text", $.Text);

$.defineNativeMethods("HTMLTextAreaElement", $.TextAreaElement);

$.defineNativeMethods("TextEvent", $.TextEvent);

$.defineNativeMethods("TextTrack", $.TextTrack);

$.defineNativeMethods("TextTrackList", $.TextTrackList);

$.defineNativeMethods("TimeRanges", $.TimeRanges);

$.defineNativeMethods("HTMLTitleElement", $.TitleElement);

$.defineNativeMethods("TouchEvent", $.TouchEvent);

$.defineNativeMethods("HTMLTrackElement", $.TrackElement);

$.defineNativeMethods("TrackEvent", $.TrackEvent);

$.defineNativeMethods("TransitionEvent|WebKitTransitionEvent", $.TransitionEvent);

$.defineNativeMethodsNonleaf("UIEvent", $.UIEvent);

$.defineNativeMethods("HTMLUListElement", $.UListElement);

$.defineNativeMethods("HTMLUnknownElement", $.UnknownElement);

$.defineNativeMethods("HTMLVideoElement", $.VideoElement);

$.defineNativeMethods("MouseScrollEvent|MouseWheelEvent|WheelEvent", $.WheelEvent);

$.defineNativeMethods("DOMWindow|Window", $.Window);

$.defineNativeMethods("XPathException", $.XPathException);

$.defineNativeMethods("ClientRect", $._ClientRect);

$.defineNativeMethods("NamedNodeMap", $._NamedNodeMap);

$.defineNativeMethods("IDBVersionChangeEvent", $.VersionChangeEvent);

$.defineNativeMethods("SVGAElement", $.AElement);

$.defineNativeMethods("SVGAltGlyphElement", $.AltGlyphElement);

$.defineNativeMethods("SVGAnimateElement", $.AnimateElement);

$.defineNativeMethods("SVGAnimateMotionElement", $.AnimateMotionElement);

$.defineNativeMethods("SVGAnimateTransformElement", $.AnimateTransformElement);

$.defineNativeMethods("SVGAnimatedEnumeration", $.AnimatedEnumeration);

$.defineNativeMethods("SVGAnimatedLength", $.AnimatedLength);

$.defineNativeMethods("SVGAnimatedLengthList", $.AnimatedLengthList);

$.defineNativeMethods("SVGAnimatedNumber", $.AnimatedNumber);

$.defineNativeMethods("SVGAnimatedNumberList", $.AnimatedNumberList);

$.defineNativeMethods("SVGAnimatedString", $.AnimatedString);

$.defineNativeMethodsNonleaf("SVGAnimationElement", $.AnimationElement);

$.defineNativeMethods("SVGCircleElement", $.CircleElement);

$.defineNativeMethods("SVGClipPathElement", $.ClipPathElement);

$.defineNativeMethods("SVGDefsElement", $.DefsElement);

$.defineNativeMethods("SVGDescElement", $.DescElement);

$.defineNativeMethods("SVGEllipseElement", $.EllipseElement);

$.defineNativeMethods("SVGFEBlendElement", $.FEBlendElement);

$.defineNativeMethods("SVGFEColorMatrixElement", $.FEColorMatrixElement);

$.defineNativeMethods("SVGFEComponentTransferElement", $.FEComponentTransferElement);

$.defineNativeMethods("SVGFECompositeElement", $.FECompositeElement);

$.defineNativeMethods("SVGFEConvolveMatrixElement", $.FEConvolveMatrixElement);

$.defineNativeMethods("SVGFEDiffuseLightingElement", $.FEDiffuseLightingElement);

$.defineNativeMethods("SVGFEDisplacementMapElement", $.FEDisplacementMapElement);

$.defineNativeMethods("SVGFEDistantLightElement", $.FEDistantLightElement);

$.defineNativeMethods("SVGFEFloodElement", $.FEFloodElement);

$.defineNativeMethods("SVGFEFuncAElement", $.FEFuncAElement);

$.defineNativeMethods("SVGFEFuncBElement", $.FEFuncBElement);

$.defineNativeMethods("SVGFEFuncGElement", $.FEFuncGElement);

$.defineNativeMethods("SVGFEFuncRElement", $.FEFuncRElement);

$.defineNativeMethods("SVGFEGaussianBlurElement", $.FEGaussianBlurElement);

$.defineNativeMethods("SVGFEImageElement", $.FEImageElement);

$.defineNativeMethods("SVGFEMergeElement", $.FEMergeElement);

$.defineNativeMethods("SVGFEMergeNodeElement", $.FEMergeNodeElement);

$.defineNativeMethods("SVGFEMorphologyElement", $.FEMorphologyElement);

$.defineNativeMethods("SVGFEOffsetElement", $.FEOffsetElement);

$.defineNativeMethods("SVGFEPointLightElement", $.FEPointLightElement);

$.defineNativeMethods("SVGFESpecularLightingElement", $.FESpecularLightingElement);

$.defineNativeMethods("SVGFESpotLightElement", $.FESpotLightElement);

$.defineNativeMethods("SVGFETileElement", $.FETileElement);

$.defineNativeMethods("SVGFETurbulenceElement", $.FETurbulenceElement);

$.defineNativeMethods("SVGFilterElement", $.FilterElement);

$.defineNativeMethods("SVGForeignObjectElement", $.ForeignObjectElement);

$.defineNativeMethods("SVGGElement", $.GElement);

$.defineNativeMethods("SVGImageElement", $.ImageElement0);

$.defineNativeMethods("SVGLineElement", $.LineElement);

$.defineNativeMethods("SVGLinearGradientElement", $.LinearGradientElement);

$.defineNativeMethods("SVGMarkerElement", $.MarkerElement);

$.defineNativeMethods("SVGMaskElement", $.MaskElement);

$.defineNativeMethods("SVGMetadataElement", $.MetadataElement);

$.defineNativeMethods("SVGPathElement", $.PathElement);

$.defineNativeMethods("SVGPatternElement", $.PatternElement);

$.defineNativeMethods("SVGPolygonElement", $.PolygonElement);

$.defineNativeMethods("SVGPolylineElement", $.PolylineElement);

$.defineNativeMethods("SVGRadialGradientElement", $.RadialGradientElement);

$.defineNativeMethods("SVGRectElement", $.RectElement);

$.defineNativeMethods("SVGScriptElement", $.ScriptElement0);

$.defineNativeMethods("SVGSetElement", $.SetElement);

$.defineNativeMethods("SVGStopElement", $.StopElement);

$.defineNativeMethods("SVGStyleElement", $.StyleElement0);

$.defineNativeMethodsNonleaf("SVGStyledElement", $.StyledElement);

$.defineNativeMethods("SVGDocument", $.SvgDocument);

$.defineNativeMethodsNonleaf("SVGElement", $.SvgElement);

$.defineNativeMethods("SVGException", $.SvgException);

$.defineNativeMethods("SVGSVGElement", $.SvgSvgElement);

$.defineNativeMethods("SVGSwitchElement", $.SwitchElement);

$.defineNativeMethods("SVGSymbolElement", $.SymbolElement);

$.defineNativeMethods("SVGTSpanElement", $.TSpanElement);

$.defineNativeMethodsNonleaf("SVGTextContentElement", $.TextContentElement);

$.defineNativeMethods("SVGTextElement", $.TextElement);

$.defineNativeMethods("SVGTextPathElement", $.TextPathElement);

$.defineNativeMethodsNonleaf("SVGTextPositioningElement", $.TextPositioningElement);

$.defineNativeMethods("SVGTitleElement", $.TitleElement0);

$.defineNativeMethods("SVGUseElement", $.UseElement);

$.defineNativeMethods("SVGViewElement", $.ViewElement);

$.defineNativeMethods("SVGZoomEvent", $.ZoomEvent);

$.defineNativeMethodsNonleaf("SVGGradientElement", $._GradientElement);

$.defineNativeMethodsNonleaf("SVGComponentTransferFunctionElement", $._SVGComponentTransferFunctionElement);

$.defineNativeMethods("AudioProcessingEvent", $.AudioProcessingEvent);

$.defineNativeMethods("OfflineAudioCompletionEvent", $.OfflineAudioCompletionEvent);

$.defineNativeMethods("WebGLContextEvent", $.ContextEvent);

$.defineNativeMethods("WebGLRenderingContext", $.RenderingContext);

$.defineNativeMethods("SQLError", $.SqlError);

$.defineNativeMethods("SQLException", $.SqlException);

$.defineNativeMethodsNonleaf("ArrayBufferView", $.TypedData);

$.defineNativeMethods("Uint8ClampedArray", $.Uint8ClampedList);

$.defineNativeMethodsNonleaf("Uint8Array", $.Uint8List);


var $ = null;
Isolate = Isolate.$finishIsolateConstructor(Isolate);
var $ = new Isolate();
$.initializeDispatchProperty(function(a) {
  $.getDispatchProperty = a;
}, "___dart_dispatch_record_ZxYxX_0_", $.Interceptor.prototype);
// BEGIN invoke [main].
if (typeof document !== "undefined" && document.readyState !== "complete") {
  document.addEventListener("readystatechange", function () {
    if (document.readyState == "complete") {
      if (typeof dartMainRunner === "function") {
        dartMainRunner(function() { $.startRootIsolate($.main$closure); });
      } else {
        $.startRootIsolate($.main$closure);
      }
    }
  }, false);
} else {
  if (typeof dartMainRunner === "function") {
    dartMainRunner(function() { $.startRootIsolate($.main$closure); });
  } else {
    $.startRootIsolate($.main$closure);
  }
}
// END invoke [main].
function init() {
  Isolate.$isolateProperties = {};
  function generateAccessor(field, prototype) {
    var len = field.length;
    var code = field.charCodeAt(len - 1);
    code = code >= 60 && code <= 64 ? code - 59 : code >= 123 && code <= 126 ? code - 117 : code >= 37 && code <= 43 ? code - 27 : 0;
    if (code) {
      var getterCode = code & 3;
      var setterCode = code >> 2;
      var accessorName = field = field.substring(0, len - 1);
      var divider = field.indexOf(":");
      if (divider > 0) {
        accessorName = field.substring(0, divider);
        field = field.substring(divider + 1);
      }
      if (getterCode) {
        var args = getterCode & 2 ? "receiver" : "";
        var receiver = getterCode & 1 ? "this" : "receiver";
        var body = "return " + receiver + "." + field;
        prototype["get$" + accessorName] = new Function(args, body);
      }
      if (setterCode) {
        var args = setterCode & 2 ? "receiver, value" : "value";
        var receiver = setterCode & 1 ? "this" : "receiver";
        var body = receiver + "." + field + " = value";
        prototype["set$" + accessorName] = new Function(args, body);
      }
    }
    return field;
  }
  Isolate.$isolateProperties.$generateAccessor = generateAccessor;
  function defineClass(name, cls, fields, prototype) {
    var constructor;
    if (typeof fields == "function") {
      constructor = fields;
    } else {
      var str = "function " + cls + "(";
      var body = "";
      for (var i = 0; i < fields.length; i++) {
        if (i != 0)
          str += ", ";
        var field = generateAccessor(fields[i], prototype);
        var parameter = "parameter_" + field;
        str += parameter;
        body += "this." + field + " = " + parameter + ";\n";
      }
      str += ") {" + body + "}\nreturn " + cls;
      constructor = new Function(str)();
    }
    constructor.prototype = prototype;
    constructor.builtin$cls = name;
    return constructor;
  }
  var supportsProto = false;
  var tmp = defineClass("c", "c", ["f<"], {}).prototype;
  if (tmp.__proto__) {
    tmp.__proto__ = {};
    if (typeof tmp.get$f != "undefined")
      supportsProto = true;
  }
  Isolate.$finishClasses = function(collectedClasses, isolateProperties, existingIsolateProperties) {
    var pendingClasses = {};
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    for (var cls in collectedClasses) {
      if (hasOwnProperty.call(collectedClasses, cls)) {
        var desc = collectedClasses[cls];
        var classData = desc[""], supr, name = cls, fields = classData;
        if (typeof classData == "string") {
          var split = classData.split("/");
          if (split.length == 2) {
            name = split[0];
            fields = split[1];
          }
        }
        if (typeof fields == "string") {
          var s = fields.split(";");
          fields = s[1] == "" ? [] : s[1].split(",");
          supr = s[0];
        } else {
          supr = desc.super;
          if (!!desc.$name)
            name = desc.$name;
        }
        if (supr && supr.indexOf("+") > 0) {
          s = supr.split("+");
          supr = s[0];
          var mixin = collectedClasses[s[1]];
          for (var d in mixin) {
            if (hasOwnProperty.call(mixin, d) && !hasOwnProperty.call(desc, d))
              desc[d] = mixin[d];
          }
        }
        isolateProperties[cls] = defineClass(name, cls, fields, desc);
        if (supr)
          pendingClasses[cls] = supr;
      }
    }
    var finishedClasses = {};
    function finishClass(cls) {
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      if (hasOwnProperty.call(finishedClasses, cls))
        return;
      finishedClasses[cls] = true;
      var superclass = pendingClasses[cls];
      if (!superclass || typeof superclass != "string")
        return;
      finishClass(superclass);
      var constructor = isolateProperties[cls];
      var superConstructor = isolateProperties[superclass];
      if (!superConstructor)
        superConstructor = existingIsolateProperties[superclass];
      var prototype = constructor.prototype;
      if (supportsProto) {
        prototype.__proto__ = superConstructor.prototype;
        prototype.constructor = constructor;
      } else {
        function tmp() {
        }
        tmp.prototype = superConstructor.prototype;
        var newPrototype = new tmp();
        constructor.prototype = newPrototype;
        newPrototype.constructor = constructor;
        for (var member in prototype) {
          if (!member)
            continue;
          if (hasOwnProperty.call(prototype, member)) {
            newPrototype[member] = prototype[member];
          }
        }
      }
    }
    for (var cls in pendingClasses)
      finishClass(cls);
  };
  Isolate.$lazy = function(prototype, staticName, fieldName, getterName, lazyValue) {
    var getter = new Function("{ return $." + fieldName + ";}");
    var sentinelUndefined = {};
    var sentinelInProgress = {};
    prototype[fieldName] = sentinelUndefined;
    prototype[getterName] = function() {
      var result = $[fieldName];
      try {
        if (result === sentinelUndefined) {
          $[fieldName] = sentinelInProgress;
          try {
            result = $[fieldName] = lazyValue();
          } finally {
            if (result === sentinelUndefined) {
              if ($[fieldName] === sentinelInProgress) {
                $[fieldName] = null;
              }
            }
          }
        } else {
          if (result === sentinelInProgress)
            $.throwCyclicInit(staticName);
        }
        return result;
      } finally {
        $[getterName] = getter;
      }
    };
  };
  Isolate.$finishIsolateConstructor = function(oldIsolate) {
    var isolateProperties = oldIsolate.$isolateProperties;
    isolateProperties.$currentScript = typeof document == "object" ? document.currentScript || document.scripts[document.scripts.length - 1] : null;
    var isolatePrototype = oldIsolate.prototype;
    var str = "{\n";
    str += "var properties = Isolate.$isolateProperties;\n";
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    for (var staticName in isolateProperties) {
      if (hasOwnProperty.call(isolateProperties, staticName)) {
        str += "this." + staticName + "= properties." + staticName + ";\n";
      }
    }
    str += "}\n";
    var newIsolate = new Function(str);
    newIsolate.prototype = isolatePrototype;
    isolatePrototype.constructor = newIsolate;
    newIsolate.$isolateProperties = isolateProperties;
    newIsolate.makeConstantList = oldIsolate.makeConstantList;
    newIsolate.$finishClasses = oldIsolate.$finishClasses;
    return newIsolate;
  };
}
//@ sourceMappingURL=main.dart.js.map
